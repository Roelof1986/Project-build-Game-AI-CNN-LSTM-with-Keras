var tipuesearch = {"pages": [
     {"title": "introduction", "text": " Welcome to Allegro 5!  <p>Before to start, be sure you have read the <code>README</code> file. Then you can read the <a class=\"normal\" href=\"introduction.html#getst\">Getting Started</a> section and go to the <a href=\"./AllUnits.html\">All units</a> list to start using Allegro.pas.  <p><ol> <li><a href=\"#getst\">Getting started</a> <ol> <li><a href=\"#getst_libstruct\">Structure of the library and its addons</a> </li> <li><a href=\"#getst_init\">Initialisation</a> </li> <li><a href=\"#getst_openwindow\">Opening a window</a> </li> <li><a href=\"#getst_displaying\">Displaying an image</a> </li> <li><a href=\"#getst_changetarget\">Changing the drawing target</a> </li> <li><a href=\"#getst_events\">Event queues and input</a> </li> <li><a href=\"#getst_text\">Displaying some text</a> </li> <li><a href=\"#getst_drawingprims\">Drawing primitives</a> </li> <li><a href=\"#getst_blending\">Blending</a> </li> <li><a href=\"#getst_sound\">Sound</a> </li> <li><a href=\"#getst_unstable\">Unstable API</a> </li> </ol> </li> <li><a href=\"#cfg_files\">Config files</a> </li> <li><a href=\"#displays\">Displays</a> </li> <li><a href=\"#events\">Events</a> </li> <li><a href=\"#alt_file_streams\">Alternative file streams</a> </li> <li><a href=\"#keyboard\">Keyboard</a> <ol> <li><a href=\"#keycodes\">Key codes</a> </li> <li><a href=\"#kbdmodifiers\">Keyboard modifier flags</a> </li> </ol> </li> <li><a href=\"#transformations\">Transformations</a> </li> </ol>   <p><h2 class=\"\"><span id=\"getst\"></span>Getting started</h2>  This short guide should point you at the parts of the API that you'll want to know about first. It's not a tutorial, as there isn't much discussion, only links into the manual. The rest you'll have to discover for yourself. Read the examples, and ask questions at <a href=\"http://www.pascalgamedevelopment.com\">Pascal Game Development</a>, <a href=\"https://forum.lazarus.freepascal.org/index.php/board,74.0.html\">Lazarus/FPC forums</a> or <a href=\"http://www.allegro.cc/\">Allegro.cc</a>.  <p><h3 class=\"\"><span id=\"getst_libstruct\"></span>Structure of the library and its addons</h3>  Allegro 5.0 is divided into a core library and multiple addons. The addons are bundled together and built at the same time as the core, but they are distinct and kept in separate libraries. The core doesn't depend on anything in the addons, but addons may depend on the core and other addons and additional third party libraries.  <p>Here are the addons and their dependencies:  <p></p>  <pre class=\"preformatted\"> allegro_main -&gt; allegro  allegro_image -&gt; allegro allegro_primitives -&gt; allegro allegro_color -&gt; allegro  allegro_font -&gt; allegro allegro_ttf -&gt; allegro_font -&gt; allegro  allegro_audio -&gt; allegro allegro_acodec -&gt; allegro_audio -&gt; allegro  allegro_memfile -&gt; allegro allegro_physfs -&gt; allegro  allegro_native_dialog -&gt; allegro</pre>  <p>  <p>The unit for the core library is <a class=\"normal\" href=\"Allegro5.html\">Allegro5</a>. The units for the addons are named <a class=\"normal\" href=\"al5image.html\">al5image</a>, <a class=\"normal\" href=\"al5font.html\">al5font</a>, etc. The <code>allegro_main</code> addon does not have an unit file.  <p><h3 class=\"\"><span id=\"getst_init\"></span>Initialisation</h3>  Before using Allegro you must call <a class=\"normal\" href=\"Allegro5.html#al_init\">al_init</a>. Some addons have their own initialisation, e.g. <a class=\"normal\" href=\"al5image.html#al_init_image_addon\">al_init_image_addon</a>, <a class=\"normal\" href=\"al5font.html#al_init_font_addon\">al_init_font_addon</a>, <a class=\"normal\" href=\"al5ttf.html#al_init_ttf_addon\">al_init_ttf_addon</a>.  <p>To receive input, you need to initialise some subsystems like <a class=\"normal\" href=\"Allegro5.html#al_install_keyboard\">al_install_keyboard</a>, <a class=\"normal\" href=\"Allegro5.html#al_install_mouse\">al_install_mouse</a>, <a class=\"normal\" href=\"Allegro5.html#al_install_joystick\">al_install_joystick</a>.  <p><h3 class=\"\"><span id=\"getst_openwindow\"></span>Opening a window</h3>  <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a> will open a window and return an <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_DISPLAYptr\">ALLEGRO_DISPLAYptr</a>.  <p>To clear the display, call <a class=\"normal\" href=\"Allegro5.html#al_clear_to_color\">al_clear_to_color</a>. Use <a class=\"normal\" href=\"Allegro5.html#al_map_rgba\">al_map_rgba</a> or <a class=\"normal\" href=\"Allegro5.html#al_map_rgba_f\">al_map_rgba_f</a> to obtain an <a class=\"normal\" href=\"Allegro5.ALLEGRO_COLOR.html\">ALLEGRO_COLOR</a> parameter.  <p>Drawing operations are performed on a backbuffer. To make the operations visible, call <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>.  <p>You can get more information about displays in the <a class=\"normal\" href=\"introduction.html#displays\">Displays</a> section.  <p><h3 class=\"\"><span id=\"getst_displaying\"></span>Displaying an image</h3>  To load an image from disk, you need to have initialised the image I/O addon with <a class=\"normal\" href=\"al5image.html#al_init_image_addon\">al_init_image_addon</a>. Then use <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap\">al_load_bitmap</a>, which returns an <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_BITMAPptr\">ALLEGRO_BITMAPptr</a>.  <p>Use <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a>, <a class=\"normal\" href=\"Allegro5.html#al_draw_scaled_bitmap\">al_draw_scaled_bitmap</a> or <a class=\"normal\" href=\"Allegro5.html#al_draw_scaled_rotated_bitmap\">al_draw_scaled_rotated_bitmap</a> to draw the image to the backbuffer. Remember to call <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>.  <p><h3 class=\"\"><span id=\"getst_changetarget\"></span>Changing the drawing target</h3>  Notice that <a class=\"normal\" href=\"Allegro5.html#al_clear_to_color\">al_clear_to_color</a> and <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> didn't take destination parameters: the destination is implicit. Allegro remembers the current <i>&quot;target bitmap&quot;</i> for the current thread. To change the target bitmap, call <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a>.  <p>The backbuffer of the display is also a bitmap. You can get it with <a class=\"normal\" href=\"Allegro5.html#al_get_backbuffer\">al_get_backbuffer</a> and then restore it as the target bitmap.  <p>Other bitmaps can be created with <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a>, with options which can be adjusted with <a class=\"normal\" href=\"Allegro5.html#al_set_new_bitmap_flags\">al_set_new_bitmap_flags</a> and <a class=\"normal\" href=\"Allegro5.html#al_set_new_bitmap_format\">al_set_new_bitmap_format</a>.  <p><h3 class=\"\"><span id=\"getst_events\"></span>Event queues and input</h3>  Input comes from multiple sources: keyboard, mouse, joystick, timers, etc. Event queues aggregate events from all these sources, then you can query the queue for events.  <p>Create an event queue with <a class=\"normal\" href=\"Allegro5.html#al_create_event_queue\">al_create_event_queue</a>, then tell input sources to place new events into that queue using <a class=\"normal\" href=\"Allegro5.html#al_register_event_source\">al_register_event_source</a>. The usual input event sources can be retrieved with <a class=\"normal\" href=\"Allegro5.html#al_get_keyboard_event_source\">al_get_keyboard_event_source</a>, <a class=\"normal\" href=\"Allegro5.html#al_get_mouse_event_source\">al_get_mouse_event_source</a> and <a class=\"normal\" href=\"Allegro5.html#al_get_joystick_event_source\">al_get_joystick_event_source</a>.  <p>Events can be retrieved with <a class=\"normal\" href=\"Allegro5.html#al_wait_for_event\">al_wait_for_event</a> or <a class=\"normal\" href=\"Allegro5.html#al_get_next_event\">al_get_next_event</a>. Check the event type and other fields of <a class=\"normal\" href=\"Allegro5.ALLEGRO_EVENT.html\">ALLEGRO_EVENT</a> to react to the input.  <p>Displays are also event sources, which emit events when they are closed or resized. To get these events you'll need to set some special flags with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> before creating the display, then register the display with an event queue. When you get a resize event, call <a class=\"normal\" href=\"Allegro5.html#al_acknowledge_resize\">al_acknowledge_resize</a>.  <p>Timers are event sources which <i>&quot;tick&quot;</i> periodically, causing an event to be inserted into the queues that the timer is registered with. Create some with <a class=\"normal\" href=\"Allegro5.html#al_create_timer\">al_create_timer</a>.  <p><a class=\"normal\" href=\"Allegro5.html#al_get_time\">al_get_time</a> and <a class=\"normal\" href=\"Allegro5.html#al_rest\">al_rest</a> are more direct ways to deal with time.  <p><h3 class=\"\"><span id=\"getst_text\"></span>Displaying some text</h3>  To display some text, initialise the image and font addons with <a class=\"normal\" href=\"al5image.html#al_init_image_addon\">al_init_image_addon</a> and <a class=\"normal\" href=\"al5font.html#al_init_font_addon\">al_init_font_addon</a>, then load a bitmap font with <a class=\"normal\" href=\"al5font.html#al_load_font\">al_load_font</a>. Use <a class=\"normal\" href=\"al5font.html#al_draw_text\">al_draw_text</a>.  <p>For TrueType fonts, you'll need to initialise the TTF font addon with <a class=\"normal\" href=\"al5ttf.html#al_init_ttf_addon\">al_init_ttf_addon</a> and load a TTF font with <a class=\"normal\" href=\"al5ttf.html#al_load_ttf_font\">al_load_ttf_font</a>.  <p>Note that Allegro uses <a class=\"normal\" href=\"al5Base.html#AL_STR\">AL_STR</a> (defined as <code>ANSISTRING</code>), so it will not manage <code>UNICODESTRING</code> or <code>WIDESTRING</code> correctly. That may conflict with some RTL functions and procedures (specially in modern Delphi), unit <a class=\"normal\" href=\"al5strings.html\">al5strings</a> defines functions and procedures to reduce such conflicts.  <p><h3 class=\"\"><span id=\"getst_drawingprims\"></span>Drawing primitives</h3>  The primitives addon provides some handy routines to draw lines (<a class=\"normal\" href=\"al5primitives.html#al_draw_line\">al_draw_line</a>), rectangles (<a class=\"normal\" href=\"al5primitives.html#al_draw_rectangle\">al_draw_rectangle</a>), circles (<a class=\"normal\" href=\"al5primitives.html#al_draw_circle\">al_draw_circle</a>), etc.  <p><h3 class=\"\"><span id=\"getst_blending\"></span>Blending</h3>  To draw translucent or tinted images or primitives, change the blender state with <a class=\"normal\" href=\"Allegro5.html#al_set_blender\">al_set_blender</a>.  <p>As with <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a>, this changes Allegro's internal state (for the current thread). Often you'll want to save some part of the state and restore it later. The functions <a class=\"normal\" href=\"Allegro5.html#al_store_state\">al_store_state</a> and <a class=\"normal\" href=\"Allegro5.html#al_restore_state\">al_restore_state</a> provide a convenient way to do that.  <p><h3 class=\"\"><span id=\"getst_sound\"></span>Sound</h3>  Use <a class=\"normal\" href=\"al5audio.html#al_install_audio\">al_install_audio</a> to initialize sound. To load any sample formats, you will need to initialise the acodec addon with <a class=\"normal\" href=\"al5acodec.html#al_init_acodec_addon\">al_init_acodec_addon</a>.  <p>After that, you can simply use <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a> and pass the number of sound effects typically playing at the same time. Then load your sound effects with <a class=\"normal\" href=\"al5audio.html#al_load_sample\">al_load_sample</a> and play them with <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a>. To stream large pieces of music from disk, you can use <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a> so the whole piece will not have to be pre-loaded into memory.  <p>If the above sounds too simple and you can't help but think about clipping and latency issues, don't worry. Allegro gives you full control over how much or little you want its sound system to do. The <code>al_reserve_samples</code> function mentioned above only sets up a default mixer and a number of sample instances but you don't need to use it.  <p>Instead, to get a <i>&quot;direct connection&quot;</i> to the sound system you would use an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_VOICEptr\">ALLEGRO_VOICEptr</a> (but depending on the platform only one such voice is guaranteed to be available and it might require a specific format of audio data). Therefore all sound can be first routed through an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_MIXERptr\">ALLEGRO_MIXERptr</a> which is connected to such a voice (or another mixer) and will mix together all sample data fed to it.  <p>You can then directly stream real-time sample data to a mixer or a voice using an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_STREAMptr\">ALLEGRO_AUDIO_STREAMptr</a> or play complete sounds using an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr\">ALLEGRO_SAMPLE_INSTANCEptr</a>. The latter simply points to an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLEptr\">ALLEGRO_SAMPLEptr</a> and will stream it for you.  <p><h3 class=\"\"><span id=\"getst_unstable\"></span>Unstable API</h3>  Some of the original Allegro's API is marked as unstable, which means that future versions of Allegro it may change or even be removed entirely! That API isn't included in the Allegro.pas wrappers.  <h2 class=\"\"><span id=\"cfg_files\"></span>Config files</h2>  Allegro supports reading and writing of configuration files with a simple, INI file-like format. These files are fully compatible with the <code>TIniFile</code> objects defined by Delphi and Free Pascal. You can use <code>TIniFile</code>, but you should use Allegro's config procedures if you're writting your own Allegro add-on.  <p>A configuration file consists of key-value pairs separated by newlines. Keys are separated from values by an equals sign (<code>=</code>). All whitespace before the key, after the value and immediately adjacent to the equals sign is ignored. Keys and values may have whitespace characters within them. Keys do not need to be unique, but all but the last one are ignored.  <p>The hash (<code>#</code>) character is used a comment when it is the first non-whitespace character on the line. All characters following that character are ignored to the end of the line. The hash character anywhere else on the line has no special significance.  <p>Key-value pairs can be optionally grouped into sections, which are declared by surrounding a section name with square brackets (<code>[</code> and <code>]</code>) on a single line. Whitespace before the opening bracket is ignored. All characters after the trailing bracket are also ignored.  <p>All key-value pairs that follow a section declaration belong to the last declared section. Key-value pairs that don't follow any section declarations belong to the global section. Sections do not nest.  <p>Here is an example configuration file:  <p></p>  <pre class=\"preformatted\"> #  Monster description monster name = Allegro Developer  [weapon 0] damage = 443  [weapon 1] damage = 503</pre>  <p>  <p>It can then be accessed like this (make sure to check for errors in an actual program):  <p></p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Cfg: ALLEGRO_CONFIGptr; <span class=\"pascal_keyword\">BEGIN</span>   cfg := al_load_config_file (<span class=\"pascal_string\">'test.cfg'</span>);   WriteLn (al_get_config_value (Cfg, <span class=\"pascal_string\">''</span>, <span class=\"pascal_string\">'monster name'</span>)); <span class=\"pascal_comment\">{ Prints: Allegro Developer }</span>   WriteLn (al_get_config_value (Cfg, <span class=\"pascal_string\">'weapon 0'</span>, <span class=\"pascal_string\">'damage'</span>)); <span class=\"pascal_comment\">{ Prints: 443 }</span>   WriteLn (al_get_config_value (Cfg, <span class=\"pascal_string\">'weapon 1'</span>, <span class=\"pascal_string\">'damage'</span>)); <span class=\"pascal_comment\">{ Prints: 503 }</span>   al_destroy_config (Cfg) <span class=\"pascal_keyword\">END</span>.</pre>  <p>  <p><b>See also:</b> <a class=\"normal\" href=\"Allegro5.html#al_load_config_file\">al_load_config_file</a>  <h2 class=\"\"><span id=\"displays\"></span>Displays</h2>  All drawing operations end up being visible on a display which is the same as a window in windowed environments. Thus, before anything is displayed, a display needs to be created.  <p>Before creating a display with <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a>, flags and options can be set with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> and <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_option\">al_set_new_display_option</a>. For example, you can enable the use of shaders or choose between the OpenGL and Direct3D backends (on platforms that support both) with <code>al_set_new_display_flags</code>. Display options are rather optional settings that do not affect Allegro itself, e.g. they allow you to specify whether you want a depth buffer or enable multisampling.  <p>The actual properties of a display that has been successfully created can be queried via <a class=\"normal\" href=\"Allegro5.html#al_get_display_option\">al_get_display_option</a>, <a class=\"normal\" href=\"Allegro5.html#al_get_display_flags\">al_get_display_flags</a>, <a class=\"normal\" href=\"Allegro5.html#al_get_display_width\">al_get_display_width</a> etc. Note that you can query some additional read-only properties such as the maximum allowed bitmap (i.e. texture) size via <a class=\"normal\" href=\"Allegro5.html#al_get_display_option\">al_get_display_option</a>.  <p>Each display has a backbuffer associated to it which is the default target for any drawing operations. In order to make visible what has been drawn previously, you have to to call <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>. Note that it is generally advisable to redraw the whole screen (or clear it in advance) to avoid artefacts of uninitialised memory becoming visible with some drivers.  <p>You don't have to use Allegro's drawing routines, however: since creating a display implies the creation of an OpenGL context or Direct3D device respectively, you can use these APIs directly if you prefer to do so. Allegro provides integration for both (see the OpenGL / Direct3D sections), so you can retrieve the underlying textures of <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_BITMAPptr\">ALLEGRO_BITMAPs</a>, for example.  <p>In order to write a well-behaved application, it is necessary to remember that displays will also inform you about important events via their event sources.  <h2 class=\"\"><span id=\"events\"></span>Events</h2>   <p>Events are generated by event sources. Most notably, each of the input subsystems provides an event source, but also timers, displays, and audio streams will generate events.  <p>Event sources are registered to event queues which aggregate events from multiple sources. A single event source can also be registered to multiple event queues.  <p>Event queues can then be queried for events. In particular, it is possible to wait until events become available in order to save CPU time. You can combine this with timers to make your main-loop run at a specific speed without wasting CPU time or missing events.  <p>In addition to the predefined event types, Allegro also allows for user-defined events that can be generated by user-defined event sources.  <p>The appropriate reaction to an event is determined by examining the fields of the <a class=\"normal\" href=\"Allegro5.ALLEGRO_EVENT.html\">ALLEGRO_EVENT</a> union according to the event type.  <p>In addition to the events sent by Allegro core, there's also events send by the addons, see <a class=\"normal\" href=\"al5audio.html\">al5audio</a> and <a class=\"normal\" href=\"al5video.html\">al5video</a>.  <h2 class=\"\"><span id=\"alt_file_streams\"></span>Alternative file streams</h2>   <p>By default, the Allegro file I/O routines use the C library I/O routines, hence work with files on the local filesystem, but can be overridden so that you can read and write to other streams. For example, you can work with blocks of memory or sub-files inside .zip files.  <p>There are two ways to get an <code>ALLEGRO_FILEptr</code> that doesn't use stdio. An addon library may provide a function that returns a new <code>ALLEGRO_FILEptr</code> directly, after which, all <code>al_f*</code> calls on that object will use overridden functions for that type of stream. Alternatively, <a class=\"normal\" href=\"Allegro5.html#al_set_new_file_interface\">al_set_new_file_interface</a> changes which function will handle the following <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a> calls for the current thread.  <h2 class=\"\"><span id=\"keyboard\"></span>Keyboard</h2>   <p><h3 class=\"\"><span id=\"keycodes\"></span>Key codes</h3>  The constant <code>ALLEGRO_KEY_MAX</code> is always one higher than the highest key code. So if you want to use the key code as array index you can do something like this:  <p></p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   PressedKeys: <span class=\"pascal_keyword\">ARRAY</span>[<span class=\"pascal_numeric\">0</span>..ALLEGRO_KEY_MAX] <span class=\"pascal_keyword\">OF</span> BOOLEAN; <span class=\"pascal_numeric\"></span>...   PressedKeys[KeyCode] := TRUE;</pre>  <p>  <p>These are the list of key codes used by Allegro, which are returned in the <code>event.keyboard.keycode</code> field of the <code>ALLEGRO_KEY_DOWN</code> and <code>ALLEGRO_KEY_UP</code> events and which you can pass to <a class=\"normal\" href=\"Allegro5.html#al_key_down\">al_key_down</a>:  <p></p>  <pre class=\"preformatted\"> ALLEGRO_KEY_A ... ALLEGRO_KEY_Z ALLEGRO_KEY_0 ... ALLEGRO_KEY_9 ALLEGRO_KEY_PAD_0 ... ALLEGRO_KEY_PAD_9 ALLEGRO_KEY_F1 ... ALLEGRO_KEY_F12 ALLEGRO_KEY_ESCAPE ALLEGRO_KEY_TILDE ALLEGRO_KEY_MINUS ALLEGRO_KEY_EQUALS ALLEGRO_KEY_BACKSPACE ALLEGRO_KEY_TAB ALLEGRO_KEY_OPENBRACE ALLEGRO_KEY_CLOSEBRACE ALLEGRO_KEY_ENTER ALLEGRO_KEY_SEMICOLON ALLEGRO_KEY_QUOTE ALLEGRO_KEY_BACKSLASH ALLEGRO_KEY_BACKSLASH2 ALLEGRO_KEY_COMMA ALLEGRO_KEY_FULLSTOP ALLEGRO_KEY_SLASH ALLEGRO_KEY_SPACE ALLEGRO_KEY_INSERT ALLEGRO_KEY_DELETE ALLEGRO_KEY_HOME ALLEGRO_KEY_END ALLEGRO_KEY_PGUP ALLEGRO_KEY_PGDN ALLEGRO_KEY_LEFT ALLEGRO_KEY_RIGHT ALLEGRO_KEY_UP ALLEGRO_KEY_DOWN ALLEGRO_KEY_PAD_SLASH ALLEGRO_KEY_PAD_ASTERISK ALLEGRO_KEY_PAD_MINUS ALLEGRO_KEY_PAD_PLUS ALLEGRO_KEY_PAD_DELETE ALLEGRO_KEY_PAD_ENTER ALLEGRO_KEY_PRINTSCREEN ALLEGRO_KEY_PAUSE ALLEGRO_KEY_ABNT_C1 ALLEGRO_KEY_YEN ALLEGRO_KEY_KANA ALLEGRO_KEY_CONVERT ALLEGRO_KEY_NOCONVERT ALLEGRO_KEY_AT ALLEGRO_KEY_CIRCUMFLEX ALLEGRO_KEY_COLON2 ALLEGRO_KEY_KANJI ALLEGRO_KEY_LSHIFT ALLEGRO_KEY_RSHIFT ALLEGRO_KEY_LCTRL ALLEGRO_KEY_RCTRL ALLEGRO_KEY_ALT ALLEGRO_KEY_ALTGR ALLEGRO_KEY_LWIN ALLEGRO_KEY_RWIN ALLEGRO_KEY_MENU ALLEGRO_KEY_SCROLLLOCK ALLEGRO_KEY_NUMLOCK ALLEGRO_KEY_CAPSLOCK ALLEGRO_KEY_PAD_EQUALS ALLEGRO_KEY_BACKQUOTE ALLEGRO_KEY_SEMICOLON2 ALLEGRO_KEY_COMMAND  (* Since: 5.1.1 *) (* Android only for now *) ALLEGRO_KEY_BACK  (* Since: 5.1.2 *) (* Android only for now *) ALLEGRO_KEY_VOLUME_UP ALLEGRO_KEY_VOLUME_DOWN  (* Since: 5.1.6 *) (* Android only for now *) ALLEGRO_KEY_SEARCH ALLEGRO_KEY_DPAD_CENTER ALLEGRO_KEY_BUTTON_X ALLEGRO_KEY_BUTTON_Y ALLEGRO_KEY_DPAD_UP ALLEGRO_KEY_DPAD_DOWN ALLEGRO_KEY_DPAD_LEFT ALLEGRO_KEY_DPAD_RIGHT ALLEGRO_KEY_SELECT ALLEGRO_KEY_START ALLEGRO_KEY_L1 ALLEGRO_KEY_R1</pre>  <p>  <p><h3 class=\"\"><span id=\"kbdmodifiers\"></span>Keyboard modifier flags</h3>  The event field <code>keyboard.modifiers</code> is a bitfield composed of these constants. These indicate the modifier keys which were pressed at the time a character was typed.  <p></p>  <pre class=\"preformatted\"> ALLEGRO_KEYMOD_SHIFT ALLEGRO_KEYMOD_CTRL ALLEGRO_KEYMOD_ALT ALLEGRO_KEYMOD_LWIN ALLEGRO_KEYMOD_RWIN ALLEGRO_KEYMOD_MENU ALLEGRO_KEYMOD_ALTGR ALLEGRO_KEYMOD_COMMAND ALLEGRO_KEYMOD_SCROLLLOCK ALLEGRO_KEYMOD_NUMLOCK ALLEGRO_KEYMOD_CAPSLOCK ALLEGRO_KEYMOD_INALTSEQ ALLEGRO_KEYMOD_ACCENT1 ALLEGRO_KEYMOD_ACCENT2 ALLEGRO_KEYMOD_ACCENT3 ALLEGRO_KEYMOD_ACCENT4</pre>  <p>  <h2 class=\"\"><span id=\"transformations\"></span>Transformations</h2>  Transformations allow you to transform the coordinates you use for drawing operations without additional overhead. Scaling, rotating, translating, and combinations of these are possible as well as using custom transformations. There are two types of transformations that you can set, 'regular' transformations and projection transformations. The projection transform is rarely used in 2D games, but is common in 3D games to set up the projection from the 3D world to the 2D screen. Typically, you would use the regular transform for non-projective types of transformations (that is, translations, rotations, scales, skews... i.e. transformations that are linear), while the projection transform will be used for setting up perspective and possibly more advanced effects. It is possible to do everything with just using the projection transformation (that is, you'd compose the projection transformation with the non-projection transformations that, e.g., move the camera in the world), but it is more convenient to use both for two reasons:  <p></p>  <ul class=\"paragraph_spacing\">   <li><p>Regular transformations can be changed while the bitmap drawing is held (see <a class=\"normal\" href=\"Allegro5.html#al_hold_bitmap_drawing\">al_hold_bitmap_drawing</a>).</p></li>   <li><p>Regular transformations work with memory bitmaps.</p></li> </ul>  <p>  <p>As a result, if you're making a 2D game, it's best to leave the projection transformations at their default values.  <p>Both types of transformations are set per target-bitmap, i.e. a change of the target bitmap will also change the active transformation.  <p>Allegro provides convenience functions to construct transformations in 2D and 3D variants (the latter with a _3d suffix), so you don't have to deal with the underlying matrix algebra yourself.  <p>The transformations are combined in the order of the function invocations. Thus to create a transformation that first rotates a point and then translates it, you would (starting with an identity transformation) call <a class=\"normal\" href=\"Allegro5.html#al_rotate_transform\">al_rotate_transform</a> and then <a class=\"normal\" href=\"Allegro5.html#al_translate_transform\">al_translate_transform</a>. This approach is opposite of what OpenGL uses but similar to what Direct3D uses.  <p>For those who know the matrix algebra going behind the scenes, what the transformation functions in Allegro do is &quot;pre-multiply&quot; the successive transformations. So, for example, if you have code that does:  <p></p>  <pre class=\"longcode\"> al_identity_transform (T);  al_compose_transform (T, T1); al_compose_transform (T, T2); al_compose_transform (T, T3); al_compose_transform (T, T4);</pre>  <p>  <p>The resultant matrix multiplication expression will look like this:  <p></p>  <pre class=\"longcode\"> T := T4 * T3 * T2 * T1</pre>  <p>  <p>Since the point coordinate vector term will go on the right of that sequence of factors, the transformation that is called first, will also be applied first.  <p>This means if you have code like this:  <p></p>  <pre class=\"longcode\"> al_identity_transform (T1); al_scale_transform (T1, <span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">2</span>);  al_identity_transform (T2); al_translate_transform (T2, <span class=\"pascal_numeric\">100</span>, <span class=\"pascal_numeric\">0</span>);  al_identity_transform (T); al_compose_transform (T, T1); al_compose_transform (T, T2);  al_use_transform (T);</pre>  <p>  <p>it does exactly the same as:  <p></p>  <pre class=\"longcode\"> al_identity_transform (T); al_scale_transform (T, <span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">2</span>); al_translate_transform (T, <span class=\"pascal_numeric\">100</span>, <span class=\"pascal_numeric\">0</span>); al_use_transform (T);</pre>  <p>   Introduction", "tags": "", "loc": "introduction.html"},
     {"title": "al5acodec", "text": " ", "tags": "", "loc": "al5acodec.html"},
     {"title": "al5acodec.al_init_acodec_addon", "text": "  <p>Depending on what libraries are available, the full set of recognised extensions is: .wav, .flac, .ogg, .it, .mod, .s3m, .xm.  <p><i>Limitations:</i> </p>  <ul class=\"paragraph_spacing\">   <li><p>Saving is only supported for wav files.</p></li>   <li><p>The wav file loader currently only supports 8/16 bit little endian PCM files. 16 bits are used when saving wav files. Use flac files if more precision is required.</p></li>   <li><p>Module files (.it, .mod, .s3m, .xm) are often composed with streaming in mind, and sometimes cannot be easily rendered into a finite length sample. Therefore they cannot be loaded with <a class=\"normal\" href=\"al5audio.html#al_load_sample\">al_load_sample</a> and must be streamed with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>.</p></li>   <li><p>.voc file streaming is unimplemented.</p></li> </ul>  <p>    <code>True</code> on success. ", "tags": "", "loc": "al5acodec.html#al_init_acodec_addon"},
     {"title": "al5acodec.al_get_allegro_acodec_version", "text": "    ", "tags": "", "loc": "al5acodec.html#al_get_allegro_acodec_version"},
     {"title": "al5audio", "text": "  <p> In order to just play some samples, here's how to quick start with Allegro's audio addon: Call <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a> with the number of samples you'd like to be able to play simultaneously (don't forget to call <a class=\"normal\" href=\"al5audio.html#al_install_audio\">al_install_audio</a> beforehand). If these succeed, you can now call <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a>, with data obtained by <a class=\"normal\" href=\"al5audio.html#al_load_sample\">al_load_sample</a>, for example (don't forget to initialize the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon). You don't need to worry about voices, mixers or sample instances when using this approach. In order to stop samples, you can use the <a class=\"normal\" href=\"al5audio.ALLEGRO_SAMPLE_ID.html\">ALLEGRO_SAMPLE_ID</a> that <code>al_play_sample</code> returns.  <p>If you want to play large audio files (e.g. background music) without loading the whole file at once or if you want to output audio generated in real-time, you can use Allegro's audio streams. The easiest way to setup an audio stream is to attach it to the default mixer (created for you by <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a>) using <a class=\"normal\" href=\"al5audio.html#al_attach_audio_stream_to_mixer\">al_attach_audio_stream_to_mixer</a> on the return value of <a class=\"normal\" href=\"al5audio.html#al_get_default_mixer\">al_get_default_mixer</a>. Allegro will feed streams created from files using <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a> automatically. However, you can also stream audio data you generate on the fly. In this case, audio streams will emit an event when it's time to provide the next fragment (chunk) of audio data. You can control several playback parameters of audio streams (speed, gain, pan, playmode, played/paused; additionally position and loop points when streaming a file).  <p>For more fine-grained control over audio output, here's a short description of the basic concepts:  <p><b>Voices</b> represent audio devices on the system. Basically, every audio output chain that you want to be heard needs to end up in a voice. As voices are on the hardware/driver side of things, there is only limited control over their parameters (frequency, sample format, channel configuration). The number of available voices is limited as well. Typically, you will only use one voice and attach a mixer to it. Calling <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a> will do this for you by setting up a default voice and mixer; it can also be achieved by calling <a class=\"normal\" href=\"al5audio.html#al_restore_default_mixer\">al_restore_default_mixer</a>. Although you can attach sample instances and audio streams directly to a voice without using a mixer, it is, as of now, not recommended. In contrast to mixers, you can only attach a single object to a voice anyway.  <p><b>Mixers</b> mix several sample instances and/or audio streams into a single output buffer, converting sample data with differing formats according to their output parameters (frequency, depth, channels) in the process. In order to play several samples/streams at once reliably, you will need at least one mixer. A mixer that is not (indirectly) attached to a voice will remain silent. For most use cases, one (default) mixer attached to a single voice will be sufficient. You may attach mixers to other mixers in order to create complex audio chains.  <p><b>Samples</b> (<a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLEptr\">ALLEGRO_SAMPLEptr</a>) just represent &quot;passive&quot; buffers for sample data in memory. In order to play a sample, a sample instance (<a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr\">ALLEGRO_SAMPLE_INSTANCEptr</a>) needs to be created and attached to a mixer (or voice). Sample instances control how the underlying samples are played. Several playback parameters (position, speed, gain, pan, playmode, playing/paused) can be adjusted. Particularly, multiple instances may be created from the same sample, e.g. with different parameters.  <p><b>Audio streams</b> (see above) are similar to sample instances insofar as they respond to the same playback parameters and have to be attached to mixers or voices. A single audio stream can only be played once simultaneously.  <p>For example, consider the following configuration of the audio system: <figure>  <img src=\"images/audio.png\" width=\"100%\" title=\"Audio configuration diagram\" alt=\"[-]\" />  <figcaption>An example configuration of the audio system to play music and a sound.</figcaption> </figure> </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Voice: ALLEGRO_VOICEptr;   Mixer1, Mixer2: ALLEGRO_MIXERptr;   Stream: ALLEGRO_AUDIO_STREAMptr;   Sample: ALLEGRO_SAMPLEptr;   Instance1, Instance2: ALLEGRO_SAMPLE_INSTANCEptr; <span class=\"pascal_keyword\">BEGIN</span>   Voice := al_create_voice (     <span class=\"pascal_numeric\">44100</span>, ALLEGRO_AUDIO_DEPTH_INT16, ALLEGRO_CHANNEL_CONF_2   );   Mixer1 := al_create_mixer (     <span class=\"pascal_numeric\">44100</span>, ALLEGRO_AUDIO_DEPTH_FLOAT32, ALLEGRO_CHANNEL_CONF_2   );   Mixer2 := al_create_mixer (     <span class=\"pascal_numeric\">44100</span>, ALLEGRO_AUDIO_DEPTH_FLOAT32, ALLEGRO_CHANNEL_CONF_2   );  <span class=\"pascal_comment\">{ Load a stream, the stream starts in a playing state and just needs   to be attached to actually output sound. }</span>   Stream := al_load_audio_stream (<span class=\"pascal_string\">'music.ogg'</span>, <span class=\"pascal_numeric\">4</span>, <span class=\"pascal_numeric\">2048</span>); <span class=\"pascal_comment\">{ The sample needs sample instances to output sound. }</span>   Sample := al_load_sample (<span class=\"pascal_string\">'sound.wav'</span>);   Instance1 := al_create_sample_instance (Sample);   Instance2 := al_create_sample_instance (Sample);  <span class=\"pascal_comment\">{ Attach everything up (as in the diagram). }</span>   al_attach_mixer_to_voice (Mixer1, Voice);   al_attach_mixer_to_mixer (Mixer2, Mixer1);   al_attach_audio_stream_to_mixer (Stream, Mixer1);   al_attach_sample_instance_to_mixer (Instance1, Mixer2);   al_attach_sample_instance_to_mixer (Instance2, Mixer2);  <span class=\"pascal_comment\">{ Play two copies of the sound simultaneously. }</span>   al_set_sample_instance_playing (Instance1, TRUE);   al_set_sample_instance_playing (Instance2, TRUE);</pre>  <p>  <p>Since we have two mixers, with the sample instances connected to a different mixer than the audio stream, you can control the volume of all the instances independently from the music by setting the gain of the mixer / stream. Having two sample instances lets you play two copies of the sample simultaneously.  <p>With this in mind, another look at <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a> and <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a> is due: What the former does internally is to create a specified number of sample instances that are &quot;empty&quot; at first, i.e. with no sample data set. When <code>al_play_sample</code> is called, it'll use one of these internal sample instances that is not currently playing to play the requested sample. All of these sample instances will be attached to the default mixer, which can be changed via <a class=\"normal\" href=\"al5audio.html#al_set_default_mixer\">al_set_default_mixer</a>.  <p>See Audio recording for Allegro's audio recording API, which is, as of now, still unstable and subject to change.  ", "tags": "", "loc": "al5audio.html"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT", "text": "  <p><b>Unstable API:</b> The API may need a slight redesign.   ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.ftype", "text": " ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html#ftype"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.source", "text": " ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html#source"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.timestamp", "text": " ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html#timestamp"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.buffer", "text": " ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html#buffer"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.samples", "text": " ", "tags": "", "loc": "al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html#samples"},
     {"title": "al5audio.ALLEGRO_SAMPLE_ID", "text": " It can be used to later stop the sample with <a class=\"normal\" href=\"al5audio.html#al_stop_sample\">al_stop_sample</a>. The underlying <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr\">ALLEGRO_SAMPLE_INSTANCEptr</a> can be extracted using <a class=\"normal\" href=\"al5audio.html#al_lock_sample_id\">al_lock_sample_id</a>. ", "tags": "", "loc": "al5audio.ALLEGRO_SAMPLE_ID.html"},
     {"title": "al5audio.ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT", "text": "  ", "tags": "", "loc": "al5audio.html#ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT"},
     {"title": "al5audio.ALLEGRO_EVENT_AUDIO_STREAM_FINISHED", "text": " ", "tags": "", "loc": "al5audio.html#ALLEGRO_EVENT_AUDIO_STREAM_FINISHED"},
     {"title": "al5audio.ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT", "text": " Convert this to <a class=\"normal\" href=\"al5audio.ALLEGRO_AUDIO_RECORDER_EVENT.html\">ALLEGRO_AUDIO_RECORDER_EVENT</a> via <a class=\"normal\" href=\"al5audio.html#al_get_audio_recorder_event\">al_get_audio_recorder_event</a>.  <p>You must always check the values for the buffer and samples as they are not guaranteed to be exactly what was originally specified.  <p><b>Unstable API:</b> The API may need a slight redesign. ", "tags": "", "loc": "al5audio.html#ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT"},
     {"title": "al5audio.ALLEGRO_AUDIO_PAN_NONE", "text": " Use this value to disable panning on sample instances and audio streams, and play them without attentuation implied by panning support.  <p><code>ALLEGRO_AUDIO_PAN_NONE</code> is different from a pan value of 0.0 (centered) because, when panning is enabled, we try to maintain a constant sound power level as a sample is panned from left to right. A sound coming out of one speaker should sound as loud as it does when split over two speakers. As a consequence, a sample with pan value 0.0 will be 3 dB softer than the original level.  <p>(Please correct us if this is wrong.) ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_PAN_NONE"},
     {"title": "al5audio.al_install_audio", "text": "  <p><b>Note</b>  <p>most users will call <code>al_reserve_samples</code> and <code>al_init_acodec_addon</code> after this.      *)   <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_install_audio"},
     {"title": "al5audio.al_uninstall_audio", "text": "     ", "tags": "", "loc": "al5audio.html#al_uninstall_audio"},
     {"title": "al5audio.al_is_audio_installed", "text": "    ", "tags": "", "loc": "al5audio.html#al_is_audio_installed"},
     {"title": "al5audio.al_get_allegro_audio_version", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_allegro_audio_version"},
     {"title": "al5audio.al_create_sample", "text": " If <code>free_buf</code> is <code>True</code> then the buffer will be freed with <a class=\"normal\" href=\"Allegro5.html#al_free\">al_free</a> when the sample data structure is destroyed. For portability (especially Windows), the buffer should have been allocated with <a class=\"normal\" href=\"Allegro5.html#al_malloc\">al_malloc</a>. Otherwise you should free the sample data yourself.  <p>A sample that is referred to by the <code>samples</code> parameter refers to a sequence channel intensities. E.g. if you're making a stereo sample with the <code>samples</code> set to 4, then the layout of the data in buf will be: </p>  <pre class=\"preformatted\"> LRLRLRLR</pre>  <p> Where L and R are the intensities for the left and right channels respectively. A single sample, then, refers to the LR pair in this example.  <p>To allocate a buffer of the correct size, you can use something like this: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   SampleSize, Bytes: INTEGER;   Buffer: POINTER; <span class=\"pascal_keyword\">BEGIN</span>   SampleSize := al_get_channel_count (ChanConf) * al_get_audio_depth_size (Depth);   Bytes := Samples * SampleSize;   Buffer := al_malloc (Bytes) <span class=\"pascal_keyword\">END</span>.</pre>  <p>       ", "tags": "", "loc": "al5audio.html#al_create_sample"},
     {"title": "al5audio.al_destroy_sample", "text": " If it was created with the <code>free_buf</code> parameter set to <code>True</code>, then the buffer will be freed with <a class=\"normal\" href=\"Allegro5.html#al_free\">al_free</a>.  <p>This function will stop any sample instances which may be playing the buffer referenced by the <code>ALLEGRO_SAMPLEptr</code>.       ", "tags": "", "loc": "al5audio.html#al_destroy_sample"},
     {"title": "al5audio.al_create_sample_instance", "text": " The instance must be attached to a mixer (or voice) in order to actually produce output.  <p>The argument may be <code>Nil</code>. You can then set the sample data later with <a class=\"normal\" href=\"al5audio.html#al_set_sample\">al_set_sample</a>.     ", "tags": "", "loc": "al5audio.html#al_create_sample_instance"},
     {"title": "al5audio.al_destroy_sample_instance", "text": " its <code>ALLEGRO_SAMPLE</code>, is <i>not</i> freed!).     ", "tags": "", "loc": "al5audio.html#al_destroy_sample_instance"},
     {"title": "al5audio.al_get_sample_frequency", "text": "        ", "tags": "", "loc": "al5audio.html#al_get_sample_frequency"},
     {"title": "al5audio.al_get_sample_length", "text": "        ", "tags": "", "loc": "al5audio.html#al_get_sample_length"},
     {"title": "al5audio.al_get_sample_depth", "text": "         ", "tags": "", "loc": "al5audio.html#al_get_sample_depth"},
     {"title": "al5audio.al_get_sample_channels", "text": "         ", "tags": "", "loc": "al5audio.html#al_get_sample_channels"},
     {"title": "al5audio.al_get_sample_data", "text": "        ", "tags": "", "loc": "al5audio.html#al_get_sample_data"},
     {"title": "al5audio.al_get_sample_instance_frequency", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_frequency"},
     {"title": "al5audio.al_get_sample_instance_length", "text": " This property may differ from the length of the instance's sample data.      ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_length"},
     {"title": "al5audio.al_get_sample_instance_position", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_position"},
     {"title": "al5audio.al_get_sample_instance_speed", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_speed"},
     {"title": "al5audio.al_get_sample_instance_gain", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_gain"},
     {"title": "al5audio.al_get_sample_instance_pan", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_pan"},
     {"title": "al5audio.al_get_sample_instance_time", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_time"},
     {"title": "al5audio.al_get_sample_instance_depth", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_depth"},
     {"title": "al5audio.al_get_sample_instance_channels", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_channels"},
     {"title": "al5audio.al_get_sample_instance_playmode", "text": "      ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_playmode"},
     {"title": "al5audio.al_get_sample_instance_playing", "text": " This may be true even if the instance is not attached to anything.     ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_playing"},
     {"title": "al5audio.al_get_sample_instance_attached", "text": "       ", "tags": "", "loc": "al5audio.html#al_get_sample_instance_attached"},
     {"title": "al5audio.al_set_sample_instance_position", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_position"},
     {"title": "al5audio.al_set_sample_instance_length", "text": " This can be used to play only parts of the underlying sample. Be careful not to exceed the actual length of the sample data, though.     <code>True</code> on success, <code>False</code> on failure. Will fail if the sample instance is currently playing. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_length"},
     {"title": "al5audio.al_set_sample_instance_speed", "text": " 1.0 means normal speed.     <code>True</code> on success, <code>False</code> on failure. Will fail if the sample instance is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_speed"},
     {"title": "al5audio.al_set_sample_instance_gain", "text": "     <code>True</code> on success, <code>False</code> on failure. Will fail if the sample instance is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_gain"},
     {"title": "al5audio.al_set_sample_instance_pan", "text": " A value of -1.0 means to play the sample only through the left speaker; +1.0 means only through the right speaker; 0.0 means the sample is centre balanced. A special value <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_PAN_NONE\">ALLEGRO_AUDIO_PAN_NONE</a> disables panning and plays the sample at its original level. This will be louder than a pan value of 0.0.  <p><b>Note</b>  <p>panning samples with more than two channels doesn't work yet.      <code>True</code> on success, <code>False</code> on failure. Will fail if the sample instance is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_pan"},
     {"title": "al5audio.al_set_sample_instance_playmode", "text": "      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_playmode"},
     {"title": "al5audio.al_set_sample_instance_playing", "text": "  <p>The instance does not need to be attached to anything.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_sample_instance_playing"},
     {"title": "al5audio.al_detach_sample_instance", "text": "       <code>True</code> on success. ", "tags": "", "loc": "al5audio.html#al_detach_sample_instance"},
     {"title": "al5audio.al_set_sample", "text": " This can be quite an involved process.  <p>First, the sample is stopped if it is not already.  <p>Next, if data is <code>Nil</code>, the sample is detached from its parent (if any).  <p>If data is not <code>Nil</code>, the sample may be detached and reattached to its parent (if any). This is not necessary if the old sample data and new sample data have the same frequency, depth and channel configuration. Reattaching may not always succeed.  <p>On success, the sample remains stopped. The playback position and loop end points are reset to their default values. The loop mode remains unchanged.     <code>True</code> on success, <code>False</code> on failure. On failure, the sample will be stopped and detached from its parent. ", "tags": "", "loc": "al5audio.html#al_set_sample"},
     {"title": "al5audio.al_get_sample", "text": "  <p>Note this returns a pointer to an internal structure, not the <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLEptr\">ALLEGRO_SAMPLEptr</a> that you may have passed to <a class=\"normal\" href=\"al5audio.html#al_set_sample\">al_set_sample</a>. However, the sample buffer of the returned <code>ALLEGRO_SAMPLEptr</code> will be the same as the one that was used to create the sample (passed to <a class=\"normal\" href=\"al5audio.html#al_create_sample\">al_create_sample</a>). You can use <a class=\"normal\" href=\"al5audio.html#al_get_sample_data\">al_get_sample_data</a> on the return value to retrieve and compare it.     ", "tags": "", "loc": "al5audio.html#al_get_sample"},
     {"title": "al5audio.al_play_sample_instance", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_play_sample_instance"},
     {"title": "al5audio.al_stop_sample_instance", "text": "     ", "tags": "", "loc": "al5audio.html#al_stop_sample_instance"},
     {"title": "al5audio.al_create_audio_stream", "text": " The stream will be set to play by default. It will feed audio data from a buffer, which is split into a number of fragments.  <p>A sample that is referred to by the <code>samples</code> parameter refers to a sequence channel intensities. E.g. if you're making a stereo stream with the <code>samples</code> set to 4, then the layout of the data in the fragment will be: </p>  <pre class=\"preformatted\"> LRLRLRLR</pre>  <p> Where L and R are the intensities for the left and right channels respectively. A single sample, then, refers to the LR pair in this example.  <p>The choice of <code>buffer_count</code>, <code>samples</code> and <code>freq</code> directly influences the audio delay. The delay in seconds can be expressed as: </p>  <pre class=\"longcode\"> Delay := buffer_count * samples / freq</pre>  <p> This is only the delay due to Allegro's streaming, there may be additional delay caused by sound drivers and/or hardware.  <p><b>Note</b>  <p>If you know the fragment size in bytes, you can get the size in samples like this: </p>  <pre class=\"longcode\"> SampleSize := al_get_channel_count (ChannelConf) * al_get_audio_depth_size (Depth); Samples := BytesPerFragment / SampleSize;</pre>  <p> The size of the complete buffer is: </p>  <pre class=\"longcode\"> BufferSize := BytesPerFragment * buffer_count</pre>  <p> <b>Note</b>  <p>Unlike many Allegro objects, audio streams are not implicitly destroyed when Allegro is shut down. You must destroy them manually with al_destroy_audio_stream before the audio system is shut down.  <p>      buffer_count How many fragments to use for the audio stream. Usually only two fragments are required - splitting the audio buffer in two halves. But it means that the only time when new data can be supplied is whenever one half has finished playing. When using many fragments, you usually will use fewer samples for one, so there always will be (small) fragments available to be filled with new data. samples The size of a fragment in samples. freq The frequency, in Hertz. depth Must be one of the values listed for <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_DEPTH\">ALLEGRO_AUDIO_DEPTH</a>. chan_conf Must be one of the values listed for <a class=\"normal\" href=\"al5audio.html#ALLEGRO_CHANNEL_CONF\">ALLEGRO_CHANNEL_CONF</a>.  buffer_count How many fragments to use for the audio stream. Usually only two fragments are required - splitting the audio buffer in two halves. But it means that the only time when new data can be supplied is whenever one half has finished playing. When using many fragments, you usually will use fewer samples for one, so there always will be (small) fragments available to be filled with new data. samples The size of a fragment in samples. freq The frequency, in Hertz. depth Must be one of the values listed for <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_DEPTH\">ALLEGRO_AUDIO_DEPTH</a>. chan_conf Must be one of the values listed for <a class=\"normal\" href=\"al5audio.html#ALLEGRO_CHANNEL_CONF\">ALLEGRO_CHANNEL_CONF</a>.", "tags": "", "loc": "al5audio.html#al_create_audio_stream"},
     {"title": "al5audio.al_destroy_audio_stream", "text": "  <p><b>Note</b>  <p>If the stream is still attached to a mixer or voice, <a class=\"normal\" href=\"al5audio.html#al_detach_audio_stream\">al_detach_audio_stream</a> is automatically called on it first.     ", "tags": "", "loc": "al5audio.html#al_destroy_audio_stream"},
     {"title": "al5audio.al_drain_audio_stream", "text": " The stream's playing state will change to <code>False</code>.     ", "tags": "", "loc": "al5audio.html#al_drain_audio_stream"},
     {"title": "al5audio.al_get_audio_stream_frequency", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_frequency"},
     {"title": "al5audio.al_get_audio_stream_length", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_length"},
     {"title": "al5audio.al_get_audio_stream_fragments", "text": " This is the same value as passed to <a class=\"normal\" href=\"al5audio.html#al_create_audio_stream\">al_create_audio_stream</a> when a new stream is created.     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_fragments"},
     {"title": "al5audio.al_get_available_audio_stream_fragments", "text": "      ", "tags": "", "loc": "al5audio.html#al_get_available_audio_stream_fragments"},
     {"title": "al5audio.al_get_audio_stream_speed", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_speed"},
     {"title": "al5audio.al_get_audio_stream_gain", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_gain"},
     {"title": "al5audio.al_get_audio_stream_pan", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_pan"},
     {"title": "al5audio.al_get_audio_stream_channels", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_channels"},
     {"title": "al5audio.al_get_audio_stream_depth", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_depth"},
     {"title": "al5audio.al_get_audio_stream_playmode", "text": "      ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_playmode"},
     {"title": "al5audio.al_get_audio_stream_playing", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_playing"},
     {"title": "al5audio.al_get_audio_stream_attached", "text": "       ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_attached"},
     {"title": "al5audio.al_get_audio_stream_played_samples", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_played_samples"},
     {"title": "al5audio.al_get_audio_stream_fragment", "text": "  <p>If the stream is ready for new data, the function will return the address of an internal buffer to be filled with audio data. The length and format of the buffer are specified with <a class=\"normal\" href=\"al5audio.html#al_create_audio_stream\">al_create_audio_stream</a> or can be queried with the various functions described here. Once the buffer is filled, you must signal this to Allegro by passing the buffer to <a class=\"normal\" href=\"al5audio.html#al_set_audio_stream_fragment\">al_set_audio_stream_fragment</a>.  <p>If the stream is not ready for new data, the function will return <code>Nil</code>.  <p><b>Note</b>  <p>If you listen to events from the stream, an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT\">ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</a> event will be generated whenever a new fragment is ready. However, getting an event is not a guarantee that <a class=\"normal\" href=\"al5audio.html#al_get_audio_stream_fragment\">al_get_audio_stream_fragment</a> will not return <code>Nil</code>, so you still must check for it.          ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_fragment"},
     {"title": "al5audio.al_set_audio_stream_speed", "text": " 1.0 means normal speed.     <code>True</code> on success, <code>False</code> on failure. Will fail if the audio stream is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_speed"},
     {"title": "al5audio.al_set_audio_stream_gain", "text": "     <code>True</code> on success, <code>False</code> on failure. Will fail if the audio stream is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_gain"},
     {"title": "al5audio.al_set_audio_stream_pan", "text": " A value of -1.0 means to play the stream only through the left speaker; +1.0 means only through the right speaker; 0.0 means the sample is centre balanced. A special value <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_PAN_NONE\">ALLEGRO_AUDIO_PAN_NONE</a> disables panning and plays the stream at its original level. This will be louder than a pan value of 0.0.      <code>True</code> on success, <code>False</code> on failure. Will fail if the audio stream is attached directly to a voice. ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_pan"},
     {"title": "al5audio.al_set_audio_stream_playmode", "text": "      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_playmode"},
     {"title": "al5audio.al_set_audio_stream_playing", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_playing"},
     {"title": "al5audio.al_detach_audio_stream", "text": "       ", "tags": "", "loc": "al5audio.html#al_detach_audio_stream"},
     {"title": "al5audio.al_set_audio_stream_fragment", "text": "     ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_fragment"},
     {"title": "al5audio.al_rewind_audio_stream", "text": " Currently this can only be called on streams created with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>, <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream_f\">al_load_audio_stream_f</a> and the format-specific functions underlying those functions.    <code>True</code> on success. ", "tags": "", "loc": "al5audio.html#al_rewind_audio_stream"},
     {"title": "al5audio.al_seek_audio_stream_secs", "text": " Currently this can only be called on streams created with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>, <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream_f\">al_load_audio_stream_f</a> and the format-specific functions underlying those functions.      <code>True</code> on success. ", "tags": "", "loc": "al5audio.html#al_seek_audio_stream_secs"},
     {"title": "al5audio.al_get_audio_stream_position_secs", "text": " Currently this can only be called on streams created with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>.     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_position_secs"},
     {"title": "al5audio.al_get_audio_stream_length_secs", "text": " Otherwise returns zero.  <p>Currently this can only be called on streams created with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>, <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream_f\">al_load_audio_stream_f</a> and the format-specific functions underlying those functions.     ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_length_secs"},
     {"title": "al5audio.al_set_audio_stream_loop_secs", "text": " Currently this can only be called on streams created with <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>, <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream_f\">al_load_audio_stream_f</a> and the format-specific functions underlying those functions.    ", "tags": "", "loc": "al5audio.html#al_set_audio_stream_loop_secs"},
     {"title": "al5audio.al_get_audio_stream_event_source", "text": "  <p>See <a class=\"normal\" href=\"al5audio.html#al_get_audio_stream_fragment\">al_get_audio_stream_fragment</a> for a description of the <a class=\"normal\" href=\"al5audio.html#ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT\">ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</a> event that audio streams emit.    ", "tags": "", "loc": "al5audio.html#al_get_audio_stream_event_source"},
     {"title": "al5audio.al_create_mixer", "text": " It will mix into a buffer at the requested frequency (in Hz) and channel count.  <p>The only supported audio depths are <code>ALLEGRO_AUDIO_DEPTH_FLOAT32</code> and <code>ALLEGRO_AUDIO_DEPTH_INT16</code> (not yet complete).  <p>To actually produce any output, the mixer will have to be attached to a voice.        <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5audio.html#al_create_mixer"},
     {"title": "al5audio.al_destroy_mixer", "text": "     ", "tags": "", "loc": "al5audio.html#al_destroy_mixer"},
     {"title": "al5audio.al_attach_sample_instance_to_mixer", "text": " The instance must not already be attached to anything.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_attach_sample_instance_to_mixer"},
     {"title": "al5audio.al_attach_audio_stream_to_mixer", "text": " The stream must not already be attached to anything.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_attach_audio_stream_to_mixer"},
     {"title": "al5audio.al_attach_mixer_to_mixer", "text": " The first mixer (that is going to be attached) must not already be attached to anything. Both mixers must use the same frequency, audio depth and channel configuration.  <p>It is invalid to attach a mixer to itself.     <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5audio.html#al_attach_mixer_to_mixer"},
     {"title": "al5audio.al_set_mixer_postprocess_callback", "text": " The buffer's format will be whatever the mixer was created with. The sample count and user-data pointer is also passed.  <p><b>Note</b>  <p>The callback is called from a dedicated audio thread.    ", "tags": "", "loc": "al5audio.html#al_set_mixer_postprocess_callback"},
     {"title": "al5audio.al_get_mixer_frequency", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_mixer_frequency"},
     {"title": "al5audio.al_get_mixer_channels", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_mixer_channels"},
     {"title": "al5audio.al_get_mixer_depth", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_mixer_depth"},
     {"title": "al5audio.al_get_mixer_quality", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_mixer_quality"},
     {"title": "al5audio.al_get_mixer_gain", "text": " The default is 1.0.    ", "tags": "", "loc": "al5audio.html#al_get_mixer_gain"},
     {"title": "al5audio.al_get_mixer_playing", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_mixer_playing"},
     {"title": "al5audio.al_get_mixer_attached", "text": "        ", "tags": "", "loc": "al5audio.html#al_get_mixer_attached"},
     {"title": "al5audio.al_set_mixer_frequency", "text": " This will only work if the mixer is not attached to anything.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_mixer_frequency"},
     {"title": "al5audio.al_set_mixer_quality", "text": " This can only succeed if the mixer does not have anything attached to it.   (al_get_mixer_quality)   <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_mixer_quality"},
     {"title": "al5audio.al_set_mixer_gain", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_mixer_gain"},
     {"title": "al5audio.al_set_mixer_playing", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_mixer_playing"},
     {"title": "al5audio.al_detach_mixer", "text": "     ", "tags": "", "loc": "al5audio.html#al_detach_mixer"},
     {"title": "al5audio.al_create_voice", "text": " The passed frequency (in HZ), sample format and channel configuration are used as a hint to what kind of data will be sent to the voice. However, the underlying sound driver is free to use non-matching values. For example, it may be the native format of the sound hardware.  <p>If a mixer is attached to the voice, the mixer will handle the conversion of all its input streams to the voice format and care does not have to be taken for this. However if you access the voice directly, make sure to not rely on the parameters passed to this function, but instead query the returned voice for the actual settings.     ", "tags": "", "loc": "al5audio.html#al_create_voice"},
     {"title": "al5audio.al_destroy_voice", "text": " Does nothing if the voice is <code>Nil</code>.     ", "tags": "", "loc": "al5audio.html#al_destroy_voice"},
     {"title": "al5audio.al_attach_sample_instance_to_voice", "text": " The instance's gain and loop mode will be ignored, and it must have the same frequency, channel configuration and depth (including signed-ness) as the voice. This function may fail if the selected driver doesn't support preloading sample data.  <p>At this time, we don't recommend attaching sample instances directly to voices. Use a mixer inbetween.  seealso(al_detach_voice)   <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_attach_sample_instance_to_voice"},
     {"title": "al5audio.al_attach_audio_stream_to_voice", "text": " The same rules as <a class=\"normal\" href=\"al5audio.html#al_attach_sample_instance_to_voice\">al_attach_sample_instance_to_voice</a> apply. This may fail if the driver can't create a voice with the buffer count and buffer size the stream uses.  <p>An audio stream attached directly to a voice has a number of limitations: The audio stream plays immediately and cannot be stopped. The stream position, speed, gain and panning cannot be changed. At this time, we don't recommend attaching audio streams directly to voices. Use a mixer inbetween.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_attach_audio_stream_to_voice"},
     {"title": "al5audio.al_attach_mixer_to_voice", "text": " It must have the same frequency and channel configuration, but the depth may be different.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_attach_mixer_to_voice"},
     {"title": "al5audio.al_detach_voice", "text": "       ", "tags": "", "loc": "al5audio.html#al_detach_voice"},
     {"title": "al5audio.al_get_voice_frequency", "text": " 44100.    ", "tags": "", "loc": "al5audio.html#al_get_voice_frequency"},
     {"title": "al5audio.al_get_voice_position", "text": " a sample, returns the voice's current sample position. Otherwise, returns zero.     ", "tags": "", "loc": "al5audio.html#al_get_voice_position"},
     {"title": "al5audio.al_get_voice_channels", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_voice_channels"},
     {"title": "al5audio.al_get_voice_depth", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_voice_depth"},
     {"title": "al5audio.al_get_voice_playing", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_voice_playing"},
     {"title": "al5audio.al_set_voice_position", "text": " This can only work if the voice has a non-streaming object attached to it, e.g. a sample instance.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_voice_position"},
     {"title": "al5audio.al_set_voice_playing", "text": " This can only work if the voice has a non-streaming object attached to it, e.g. a sample instance. On success the voice's current sample position is reset.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5audio.html#al_set_voice_playing"},
     {"title": "al5audio.al_get_channel_count", "text": "    ", "tags": "", "loc": "al5audio.html#al_get_channel_count"},
     {"title": "al5audio.al_get_audio_depth_size", "text": " The format is one of the values listed under <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_DEPTH\">ALLEGRO_AUDIO_DEPTH</a>.    ", "tags": "", "loc": "al5audio.html#al_get_audio_depth_size"},
     {"title": "al5audio.al_fill_silence", "text": " The buffer must have enough space for the given number of samples, and be properly aligned.    ", "tags": "", "loc": "al5audio.html#al_fill_silence"},
     {"title": "al5audio.al_reserve_samples", "text": " If no default mixer is set when this function is called, then it will create one and attach it to the default voice. If no default voice has been set, it, too, will be created.  <p>This diagram illustrates the structures that are set up: </p>  <pre class=\"preformatted\">                                       sample instance 1                                     / sample instance 2 default voice &lt;-- default mixer &lt;---         .                                     \\        .                                       sample instance N</pre>  <p>      <code>True</code> on success, <code>False</code> on error. <a class=\"normal\" href=\"al5audio.html#al_install_audio\">al_install_audio</a> must have been called first. ", "tags": "", "loc": "al5audio.html#al_reserve_samples"},
     {"title": "al5audio.al_get_default_mixer", "text": " Although different configurations of mixers and voices can be used, in most cases a single mixer attached to a voice is what you want. The default mixer is used by <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a>.        ", "tags": "", "loc": "al5audio.html#al_get_default_mixer"},
     {"title": "al5audio.al_set_default_mixer", "text": " All samples started with <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a> will be stopped and all sample instances returned by <a class=\"normal\" href=\"al5audio.html#al_lock_sample_id\">al_lock_sample_id</a> will be invalidated. If you are using your own mixer, this should be called before <a class=\"normal\" href=\"al5audio.html#al_reserve_samples\">al_reserve_samples</a>.        <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5audio.html#al_set_default_mixer"},
     {"title": "al5audio.al_restore_default_mixer", "text": " If the default mixer hasn't been created before, it will be created. If the default voice hasn't been set via <a class=\"normal\" href=\"al5audio.html#al_set_default_voice\">al_set_default_voice</a> or created before, it will also be created. All samples started with <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a> will be stopped and all sample instances returned by <a class=\"normal\" href=\"al5audio.html#al_lock_sample_id\">al_lock_sample_id</a> will be invalidated.       <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5audio.html#al_restore_default_mixer"},
     {"title": "al5audio.al_play_sample", "text": "             gain relative volume at which the sample is played; 1.0 is normal. pan 0.0 is centred, -1.0 is left, 1.0 is right, or <code>ALLEGRO_AUDIO_PAN_NONE</code>. speed relative speed at which the sample is played; 1.0 is normal. loop <code>ALLEGRO_PLAYMODE_ONCE</code>, <code>ALLEGRO_PLAYMODE_LOOP</code>, or <code>ALLEGRO_PLAYMODE_BIDIR</code>. ret_id if non-<code>Nil</code> the variable which this points to will be assigned an id representing the sample being played. <code>True</code> on success, <code>False</code> on failure. Playback may fail because all the reserved sample instances are currently used. gain relative volume at which the sample is played; 1.0 is normal. pan 0.0 is centred, -1.0 is left, 1.0 is right, or <code>ALLEGRO_AUDIO_PAN_NONE</code>. speed relative speed at which the sample is played; 1.0 is normal. loop <code>ALLEGRO_PLAYMODE_ONCE</code>, <code>ALLEGRO_PLAYMODE_LOOP</code>, or <code>ALLEGRO_PLAYMODE_BIDIR</code>. ret_id if non-<code>Nil</code> the variable which this points to will be assigned an id representing the sample being played.", "tags": "", "loc": "al5audio.html#al_play_sample"},
     {"title": "al5audio.al_stop_sample", "text": "     ", "tags": "", "loc": "al5audio.html#al_stop_sample"},
     {"title": "al5audio.al_stop_samples", "text": "     ", "tags": "", "loc": "al5audio.html#al_stop_samples"},
     {"title": "al5audio.al_get_default_voice", "text": "     ", "tags": "", "loc": "al5audio.html#al_get_default_voice"},
     {"title": "al5audio.al_set_default_voice", "text": " Any previous voice will be destroyed. You can also pass <code>Nil</code> to destroy the current default voice.     ", "tags": "", "loc": "al5audio.html#al_set_default_voice"},
     {"title": "al5audio.al_lock_sample_id", "text": " This allows you to adjust the various properties of the instance (such as volume, pan, etc) while the sound is playing.  <p>This function will return <code>Nil</code> if the sound corresponding to the id is no longer playing.  <p>While locked, <code>ALLEGRO_SAMPLE_ID</code> will be unavailable to additional calls to <a class=\"normal\" href=\"al5audio.html#al_play_sample\">al_play_sample</a>, even if the sound stops while locked. To put the <code>ALLEGRO_SAMPLE_ID</code> back into the pool for reuse, make sure to call <a class=\"normal\" href=\"al5audio.html#al_unlock_sample_id\">al_unlock_sample_id</a> when you're done with the instance.  <p><b>Unstable API:</b> New API.      ", "tags": "", "loc": "al5audio.html#al_lock_sample_id"},
     {"title": "al5audio.al_unlock_sample_id", "text": " Note that after the id is unlocked, the <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr\">ALLEGRO_SAMPLE_INSTANCEptr</a> that was previously returned by <a class=\"normal\" href=\"al5audio.html#al_lock_sample_id\">al_lock_sample_id</a> will possibly be playing a different sound, so you should only use it after locking the id again.  <p><b>Unstable API:</b> New API.      ", "tags": "", "loc": "al5audio.html#al_unlock_sample_id"},
     {"title": "al5audio.al_register_sample_loader", "text": " The given function will be used to handle the loading of sample files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>loader</code> argument may be <code>Nil</code> to unregister an entry.      <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_sample_loader"},
     {"title": "al5audio.al_register_sample_saver", "text": " The given function will be used to handle the saving of sample files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>saver</code> argument may be <code>Nil</code> to unregister an entry.      <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_sample_saver"},
     {"title": "al5audio.al_register_audio_stream_loader", "text": " The given function will be used to open streams from files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>stream_loader</code> argument may be <code>Nil</code> to unregister an entry.     <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_audio_stream_loader"},
     {"title": "al5audio.al_register_sample_loader_f", "text": " The given function will be used to handle the loading of sample files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>loader</code> argument may be <code>Nil</code> to unregister an entry.     <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_sample_loader_f"},
     {"title": "al5audio.al_register_sample_saver_f", "text": " The given function will be used to handle the saving of sample files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>saver</code> argument may be <code>Nil</code> to unregister an entry.  <p>    <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_sample_saver_f"},
     {"title": "al5audio.al_register_audio_stream_loader_f", "text": " The given function will be used to open streams from files with the given extension.  <p>The extension should include the leading dot (<code>'.'</code>) character. It will be matched case-insensitively.  <p>The <code>stream_loader</code> argument may be <code>Nil</code> to unregister an entry.     <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ", "tags": "", "loc": "al5audio.html#al_register_audio_stream_loader_f"},
     {"title": "al5audio.al_load_sample", "text": "  <p>Note that this stores the entire file in memory at once, which may be time consuming. To read the file as it is needed, use <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a>.  <p><b>Note</b>  <p>the <code>al5audio</code> unit does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.      The sample on success, <code>Nil</code> on failure. ", "tags": "", "loc": "al5audio.html#al_load_sample"},
     {"title": "al5audio.al_save_sample", "text": " Currently, wav is the only supported format, and the extension must be <code>'.wav'</code>.  <p><b>Note</b>  <p>the <code>al5acodec</code> unit does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.       <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5audio.html#al_save_sample"},
     {"title": "al5audio.al_load_audio_stream", "text": "  <p>Unlike regular streams, the one returned by this function need not be fed by the user; the library will automatically read more of the file as it is needed. The stream will contain <code>buffer_count</code> buffers with <code>samples</code> samples.  <p>The audio stream will start in the playing state. It should be attached to a voice or mixer to generate any output. See <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_STREAMptr\">ALLEGRO_AUDIO_STREAMptr</a> for more details.  <p><b>Note</b>  <p>the <code>al5audio</code> library does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.       the stream on success, <code>Nil</code> on failure. ", "tags": "", "loc": "al5audio.html#al_load_audio_stream"},
     {"title": "al5audio.al_load_sample_f", "text": " The file type is determined by the passed <code>ident</code> parameter, which is a file name extension including the leading dot.  <p>Note that this stores the entire file in memory at once, which may be time consuming. To read the file as it is needed, use <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream_f\">al_load_audio_stream_f</a>.  <p><b>Note</b>  <p>the <a class=\"normal\" href=\"al5audio.html\">al5audio</a> add-on does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.      the sample on success, <code>Nil</code> on failure. The file remains open afterwards. ", "tags": "", "loc": "al5audio.html#al_load_sample_f"},
     {"title": "al5audio.al_save_sample_f", "text": " Currently, wav is the only supported format, and the extension must be <code>'.wav'</code>.  <p><b>Note</b>  <p>the <a class=\"normal\" href=\"al5audio.html\">al5audio</a> add-on does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.       <code>True</code> on success, <code>False</code> on error. The file remains open afterwards. ", "tags": "", "loc": "al5audio.html#al_save_sample_f"},
     {"title": "al5audio.al_load_audio_stream_f", "text": "  <p>Unlike regular streams, the one returned by this function need not be fed by the user; the library will automatically read more of the file as it is needed. The stream will contain <code>buffer_count</code> buffers with samples samples.  <p>The file type is determined by the passed <code>ident</code> parameter, which is a file name extension including the leading dot.  <p>The audio stream will start in the playing state. It should be attached to a voice or mixer to generate any output. See <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_STREAMptr\">ALLEGRO_AUDIO_STREAMptr</a> for more details.  <p><b>Note</b>  <p>the <a class=\"normal\" href=\"al5audio.html\">al5audio</a> library does not support any audio file formats by default. You must use the <a class=\"normal\" href=\"al5acodec.html\">al5acodec</a> addon, or register your own format handler.       the stream on success, <code>Nil</code> on failure. On success the file should be considered owned by the audio stream, and will be closed when the audio stream is destroyed. On failure the file will be closed. ", "tags": "", "loc": "al5audio.html#al_load_audio_stream_f"},
     {"title": "al5audio.al_create_audio_recorder", "text": " (So if the returned device does not work, try updating the system's default recording device.)  <p>Allegro will internally buffer several seconds of captured audio with minimal latency. (XXX: These settings need to be exposed via config or API calls.) Audio will be copied out of that private buffer into a fragment buffer of the size specified by the samples parameter. Whenever a new fragment is ready an event will be generated.  <p>The total size of the fragment buffer is fragment_count * samples * bytes_per_sample. It is treated as a circular, never ending buffer. If you do not process the information fast enough, it will be overrun. Because of that, even if you only ever need to process one small fragment at a time, you should still use a large enough value for <code>fragment_count</code> to hold a few seconds of audio.  <p><code>frequency</code> is the number of samples per second to record. Common values are: </p>  <ul class=\"paragraph_spacing\">   <li><p>8000 - telephone quality speech</p></li>   <li><p>11025</p></li>   <li><p>22050</p></li>   <li><p>44100 - CD quality music (if 16-bit, stereo)</p></li> </ul>  <p> For maximum compatibility, use a depth of <code>ALLEGRO_AUDIO_DEPTH_UINT8</code> or <a class=\"normal\" href=\"al5audio.html#ALLEGRO_AUDIO_DEPTH_INT16\">ALLEGRO_AUDIO_DEPTH_INT16</a>, and a single (mono) channel.  <p>The recorder will not record until you start it with <a class=\"normal\" href=\"al5audio.html#al_start_audio_recorder\">al_start_audio_recorder</a>.  <p><b>Unstable API:</b> The API may need a slight redesign.       Pointer to recorder control object or <code>Nil</code> on failure. ", "tags": "", "loc": "al5audio.html#al_create_audio_recorder"},
     {"title": "al5audio.al_start_audio_recorder", "text": " Once a complete fragment has been captured (as specified in <a class=\"normal\" href=\"al5audio.html#al_create_audio_recorder\">al_create_audio_recorder</a>), an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT\">ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</a> event will be triggered.   <p><b>Unstable API:</b> The API may need a slight redesign.     <code>True</code> if it was able to begin recording. ", "tags": "", "loc": "al5audio.html#al_start_audio_recorder"},
     {"title": "al5audio.al_stop_audio_recorder", "text": " Note that the audio recorder is still active and consuming resources, so if you are finished recording you should destroy it with <a class=\"normal\" href=\"al5audio.html#al_destroy_audio_recorder\">al_destroy_audio_recorder</a>.  <p>You may still receive a few events after you call this function as the device flushes the buffer.  <p>If you restart the recorder, it will begin recording at the beginning of the next fragment buffer.     ", "tags": "", "loc": "al5audio.html#al_stop_audio_recorder"},
     {"title": "al5audio.al_is_audio_recorder_recording", "text": "  <p><b>Unstable API:</b> The API may need a slight redesign.    ", "tags": "", "loc": "al5audio.html#al_is_audio_recorder_recording"},
     {"title": "al5audio.al_get_audio_recorder_event_source", "text": "  <p><b>Unstable API:</b> The API may need a slight redesign.     ", "tags": "", "loc": "al5audio.html#al_get_audio_recorder_event_source"},
     {"title": "al5audio.al_get_audio_recorder_event", "text": "  <p><b>Unstable API:</b> The API may need a slight redesign.    ", "tags": "", "loc": "al5audio.html#al_get_audio_recorder_event"},
     {"title": "al5audio.al_destroy_audio_recorder", "text": " It is safe to destroy a recorder that is recording.  <p>You may receive events after the recorder has been destroyed. They must be ignored, as the fragment buffer will no longer be valid.  <p><b>Unstable API:</b> The API may need a slight redesign.    ", "tags": "", "loc": "al5audio.html#al_destroy_audio_recorder"},
     {"title": "al5audio.ALLEGRO_AUDIO_RECORDERptr", "text": "  <p><b>Unstable API:</b> The API may need a slight redesign. ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_RECORDERptr"},
     {"title": "al5audio.ALLEGRO_AUDIO_DEPTH", "text": " Mixers only use 32-bit signed float (-1..+1), or 16-bit signed integers. Signedness is determined by an &quot;unsigned&quot; bit-flag applied to the depth value.  <p><b><code>ALLEGRO_AUDIO_DEPTH_UINT8</code></b>: <code>INT8 + UNSIGNED</code>  ALLEGRO_AUDIO_DEPTH_INT8    ALLEGRO_AUDIO_DEPTH_INT16    ALLEGRO_AUDIO_DEPTH_INT24    ALLEGRO_AUDIO_DEPTH_FLOAT32    ALLEGRO_AUDIO_DEPTH_UNSIGNED    ALLEGRO_AUDIO_DEPTH_UINT16 <code>INT16 + UNSIGNED</code>   ALLEGRO_AUDIO_DEPTH_UINT24 <code>INT24 + UNSIGNED</code>  ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_DEPTH"},
     {"title": "al5audio.ALLEGRO_CHANNEL_CONF", "text": "  ALLEGRO_CHANNEL_CONF_1    ALLEGRO_CHANNEL_CONF_2    ALLEGRO_CHANNEL_CONF_3    ALLEGRO_CHANNEL_CONF_4    ALLEGRO_CHANNEL_CONF_5_1    ALLEGRO_CHANNEL_CONF_6_1    ALLEGRO_CHANNEL_CONF_7_1   ", "tags": "", "loc": "al5audio.html#ALLEGRO_CHANNEL_CONF"},
     {"title": "al5audio.ALLEGRO_PLAYMODE", "text": "  ALLEGRO_PLAYMODE_ONCE    ALLEGRO_PLAYMODE_LOOP    ALLEGRO_PLAYMODE_BIDIR   ", "tags": "", "loc": "al5audio.html#ALLEGRO_PLAYMODE"},
     {"title": "al5audio.ALLEGRO_MIXER_QUALITY", "text": "  ALLEGRO_MIXER_QUALITY_POINT Point sampling.   ALLEGRO_MIXER_QUALITY_LINEAR Linear interpolation.   ALLEGRO_MIXER_QUALITY_CUBIC Cubic interpolation.  ", "tags": "", "loc": "al5audio.html#ALLEGRO_MIXER_QUALITY"},
     {"title": "al5audio.ALLEGRO_SAMPLEptr", "text": "  <p>An Allegro sample object stores the data necessary for playing pre-defined digital audio. It holds a user-specified PCM data buffer and information about its format (data length, depth, frequency, channel configuration). You can have the same ALLEGRO_SAMPLE playing multiple times simultaneously.  ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLEptr"},
     {"title": "al5audio.ALLEGRO_SAMPLE_IDptr", "text": " ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_IDptr"},
     {"title": "al5audio.ALLEGRO_SAMPLE_INSTANCEptr", "text": "  <p>An Allegro sample instance represents a playable instance of a predefined sound effect. It holds information about how the effect should be played: These playback parameters consist of the looping mode, loop start/end points, playing position, speed, gain, pan and the playmode. Whether a sample instance is currently playing or paused is also one of its properties.  <p>An instance uses the data from an Allegro sample object. Multiple instances may be created from the same <code>ALLEGRO_SAMPLE</code>. An <code>ALLEGRO_SAMPLE</code> must not be destroyed while there are instances which reference it.  <p>To actually produce audio output, an <code>ALLEGRO_SAMPLE_INSTANCEptr</code> must be attached to an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_MIXERptr\">ALLEGRO_MIXERptr</a> which eventually reaches an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_VOICEptr\">ALLEGRO_VOICEptr</a> object.  ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr"},
     {"title": "al5audio.ALLEGRO_AUDIO_STREAMptr", "text": " This is done by reading from a buffer, which is split into a number of fragments. Whenever a fragment has finished playing, the user can refill it with new data.  <p>As with <a class=\"normal\" href=\"al5audio.html#ALLEGRO_SAMPLE_INSTANCEptr\">ALLEGRO_SAMPLE_INSTANCEptr</a> objects, streams store information necessary for playback, so you may not play the same stream multiple times simultaneously. Streams also need to be attached to an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_MIXERptr\">ALLEGRO_MIXERptr</a>, which, eventually, reaches an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_VOICEptr\">ALLEGRO_VOICEptr</a> object.  <p>While playing, you must periodically fill fragments with new audio data. To know when a new fragment is ready to be filled, you can either directly check with <a class=\"normal\" href=\"al5audio.html#al_get_available_audio_stream_fragments\">al_get_available_audio_stream_fragments</a>, or listen to events from the stream.  <p>You can register an audio stream event source to an event queue; see <a class=\"normal\" href=\"al5audio.html#al_get_audio_stream_event_source\">al_get_audio_stream_event_source</a>. An <code>ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</code> event is generated whenever a new fragment is ready. When you receive an event, use <a class=\"normal\" href=\"al5audio.html#al_get_audio_stream_fragment\">al_get_audio_stream_fragment</a> to obtain a pointer to the fragment to be filled. The size and format are determined by the parameters passed to <a class=\"normal\" href=\"al5audio.html#al_create_audio_stream\">al_create_audio_stream</a>.  <p>If you're late with supplying new data, the stream will be silent until new data is provided. You must call <a class=\"normal\" href=\"al5audio.html#al_drain_audio_stream\">al_drain_audio_stream</a> when you're finished with supplying data to the stream.  <p>If the stream is created by <a class=\"normal\" href=\"al5audio.html#al_load_audio_stream\">al_load_audio_stream</a> then it will also generate an <a class=\"normal\" href=\"al5audio.html#ALLEGRO_EVENT_AUDIO_STREAM_FINISHED\">ALLEGRO_EVENT_AUDIO_STREAM_FINISHED</a> event if it reaches the end of the file and is not set to loop. ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_STREAMptr"},
     {"title": "al5audio.ALLEGRO_MIXERptr", "text": " In the process, it converts channel configurations, sample frequencies and audio depths of the attached sample instances and audio streams accordingly. You can control the quality of this conversion using <a class=\"normal\" href=\"al5audio.html#ALLEGRO_MIXER_QUALITY\">ALLEGRO_MIXER_QUALITY</a>.  <p>When going from mono to stereo (and above), the mixer reduces the volume of both channels by sqrt(2). When going from stereo (and above) to mono, the mixer reduces the volume of the left and right channels by sqrt(2) before adding them to the center channel (if present). ", "tags": "", "loc": "al5audio.html#ALLEGRO_MIXERptr"},
     {"title": "al5audio.ALLEGRO_VOICEptr", "text": "  <p>A voice represents an audio device on the system, which may be a real device, or an abstract device provided by the operating system. To play back audio, you would attach a mixer, sample instance or audio stream to a voice.    ", "tags": "", "loc": "al5audio.html#ALLEGRO_VOICEptr"},
     {"title": "al5audio.ALLEGRO_MIXER_CALLBACK", "text": "    ", "tags": "", "loc": "al5audio.html#ALLEGRO_MIXER_CALLBACK"},
     {"title": "al5audio.ALLEGRO_SAMPLE_LOADER", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_LOADER"},
     {"title": "al5audio.ALLEGRO_SAMPLE_SAVER", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_SAVER"},
     {"title": "al5audio.ALLEGRO_AUDIO_STREAM_LOADER", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_STREAM_LOADER"},
     {"title": "al5audio.ALLEGRO_SAMPLE_LOADER_F", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_LOADER_F"},
     {"title": "al5audio.ALLEGRO_SAMPLE_SAVER_F", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_SAMPLE_SAVER_F"},
     {"title": "al5audio.ALLEGRO_AUDIO_STREAM_LOADER_F", "text": "     ", "tags": "", "loc": "al5audio.html#ALLEGRO_AUDIO_STREAM_LOADER_F"},
     {"title": "al5Base", "text": "  <p>This unit includes definitions of data types used by Allegro. They're used internally to be sure they're the correct in any platform (i.e. 32bit or 64bit). You may use them if you wish. ", "tags": "", "loc": "al5Base.html"},
     {"title": "al5Base.AL_DATA_PTR_T", "text": "  <p>This is a workaround because some Pascal compilers doesn't allow to cast a <code>POINTER</code> as <code>INTEGER</code> and vice-versa. This is needed in some low-level operations.     ", "tags": "", "loc": "al5Base.AL_DATA_PTR_T.html"},
     {"title": "al5Base.AL_DATA_PTR_T.int_value", "text": " ", "tags": "", "loc": "al5Base.AL_DATA_PTR_T.html#int_value"},
     {"title": "al5Base.AL_DATA_PTR_T.uint_value", "text": " ", "tags": "", "loc": "al5Base.AL_DATA_PTR_T.html#uint_value"},
     {"title": "al5Base.AL_DATA_PTR_T.ptr_value", "text": " ", "tags": "", "loc": "al5Base.AL_DATA_PTR_T.html#ptr_value"},
     {"title": "al5Base.AL_POINTER", "text": " ", "tags": "", "loc": "al5Base.html#AL_POINTER"},
     {"title": "al5Base.AL_INT8", "text": " ", "tags": "", "loc": "al5Base.html#AL_INT8"},
     {"title": "al5Base.AL_UINT8", "text": " ", "tags": "", "loc": "al5Base.html#AL_UINT8"},
     {"title": "al5Base.AL_INT16", "text": " ", "tags": "", "loc": "al5Base.html#AL_INT16"},
     {"title": "al5Base.AL_UINT16", "text": " ", "tags": "", "loc": "al5Base.html#AL_UINT16"},
     {"title": "al5Base.AL_INT32", "text": " ", "tags": "", "loc": "al5Base.html#AL_INT32"},
     {"title": "al5Base.AL_UINT32", "text": " ", "tags": "", "loc": "al5Base.html#AL_UINT32"},
     {"title": "al5Base.AL_INT64", "text": " ", "tags": "", "loc": "al5Base.html#AL_INT64"},
     {"title": "al5Base.AL_UINT64", "text": " ", "tags": "", "loc": "al5Base.html#AL_UINT64"},
     {"title": "al5Base.AL_BOOL", "text": " ", "tags": "", "loc": "al5Base.html#AL_BOOL"},
     {"title": "al5Base.AL_CHAR", "text": "  <p>Note that it isn't Pascal's CHAR type! ", "tags": "", "loc": "al5Base.html#AL_CHAR"},
     {"title": "al5Base.AL_UCHAR", "text": " ", "tags": "", "loc": "al5Base.html#AL_UCHAR"},
     {"title": "al5Base.AL_SHORT", "text": " ", "tags": "", "loc": "al5Base.html#AL_SHORT"},
     {"title": "al5Base.AL_USHORT", "text": " ", "tags": "", "loc": "al5Base.html#AL_USHORT"},
     {"title": "al5Base.AL_INT", "text": " ", "tags": "", "loc": "al5Base.html#AL_INT"},
     {"title": "al5Base.AL_UINT", "text": " ", "tags": "", "loc": "al5Base.html#AL_UINT"},
     {"title": "al5Base.AL_LONG", "text": " ", "tags": "", "loc": "al5Base.html#AL_LONG"},
     {"title": "al5Base.AL_ULONG", "text": " ", "tags": "", "loc": "al5Base.html#AL_ULONG"},
     {"title": "al5Base.AL_SIZE_T", "text": " ", "tags": "", "loc": "al5Base.html#AL_SIZE_T"},
     {"title": "al5Base.AL_INTPTR_T", "text": " It's needed to use pointers as integer values in some low-level operations.  ", "tags": "", "loc": "al5Base.html#AL_INTPTR_T"},
     {"title": "al5Base.AL_UINTPTR_T", "text": " It's needed to use pointers as integer values in some low-level operations.  ", "tags": "", "loc": "al5Base.html#AL_UINTPTR_T"},
     {"title": "al5Base.AL_OFF_T", "text": " ", "tags": "", "loc": "al5Base.html#AL_OFF_T"},
     {"title": "al5Base.AL_FLOAT", "text": " ", "tags": "", "loc": "al5Base.html#AL_FLOAT"},
     {"title": "al5Base.AL_DOUBLE", "text": " ", "tags": "", "loc": "al5Base.html#AL_DOUBLE"},
     {"title": "al5Base.AL_STR", "text": " Used in parameters to convert Pascal's <code>STRING</code> to C's <code>char *</code>.  ", "tags": "", "loc": "al5Base.html#AL_STR"},
     {"title": "al5Base.AL_VOIDptr", "text": " ", "tags": "", "loc": "al5Base.html#AL_VOIDptr"},
     {"title": "al5Base.AL_STRptr", "text": " Used to convert Pascal's <code>STRING</code> to C <code>char *</code>.  ", "tags": "", "loc": "al5Base.html#AL_STRptr"},
     {"title": "al5Base.AL_INTptr", "text": " ", "tags": "", "loc": "al5Base.html#AL_INTptr"},
     {"title": "al5Base.AL_FLOATptr", "text": " ", "tags": "", "loc": "al5Base.html#AL_FLOATptr"},
     {"title": "al5color", "text": "  <p>When converting between certain color spaces, RGB colors are implicitly assumed to mean sRGB.  <p>sRGB is a standard which maps RGB colors to absolute colors. sRGB is very close to RGB values on a monitor which has a gamma value of 2.2. For example when the red component of a color is 0.5, the monitor will use a brightness of pow(0.5, 2.2) or about 22% - and not 50%. The reason is that human eyes can distinguish better between dark colors than between bright colors, and so if a pixel of the monitor is lit up to 22% of its maximum power it already will appear at half brightness to a human eye.  <p>sRGB improves upon simple gamma correction by taking differences between the three color channels into account as well. In general, most monitors nowadays try to be close to the sRGB specification. And so if in an Allegro game you display something with color </p>  <pre class=\"longcode\"> al_map_rgb_f (<span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>);</pre>  <p> then it will appear at about half brightness (even though the actual brightness output of the monitor will be less than half).  ", "tags": "", "loc": "al5color.html"},
     {"title": "al5color.al_get_allegro_color_version", "text": "    ", "tags": "", "loc": "al5color.html#al_get_allegro_color_version"},
     {"title": "al5color.al_color_hsv_to_rgb", "text": "           h Color hue angle in the range 0..360. s Color saturation in the range 0..1. v Color value in the range 0..1. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1.  h Color hue angle in the range 0..360. s Color saturation in the range 0..1. v Color value in the range 0..1. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1.", "tags": "", "loc": "al5color.html#al_color_hsv_to_rgb"},
     {"title": "al5color.al_color_rgb_to_hsl", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_hsl"},
     {"title": "al5color.al_color_rgb_to_hsv", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_hsv"},
     {"title": "al5color.al_color_hsl_to_rgb", "text": "           h Color hue angle in the range 0..360. s Color saturation in the range 0..1. l Color lightness in the range 0..1. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1.  h Color hue angle in the range 0..360. s Color saturation in the range 0..1. l Color lightness in the range 0..1. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1.", "tags": "", "loc": "al5color.html#al_color_hsl_to_rgb"},
     {"title": "al5color.al_color_name_to_rgb", "text": "  <p>The 148 recognized names are:  <p>aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, goldenrod, gold, gray, green, greenyellow, honeydew, hotpink, indianred, indigo, ivory, khaki, lavenderblush, lavender, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, avajowhite, navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple, rebeccapurple, red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna, silver, skyblue, slateblue, slategray, snow, springgreen, steelblue, tan, teal, thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen  <p>They are taken from CSS: <a href=\"https://www.w3.org/TR/css-color-4/\">https://www.w3.org/TR/css-color-4/</a>.  <p>Note that these 9 colors have two names and so there are only 139 distinct colors: aqua = cyan, darkgray = darkgrey, darkslategray = darkslategrey, dimgray = dimgrey, fuchsia = purple, gray = grey, lightgray = lightgrey, lightslategray = lightslategrey, slategray = slategrey         name The lowercase name of the color. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1. <code>True</code> if a name from the list above was passed, else <code>False</code>. name The lowercase name of the color. r Returns the R (red) value in the range 0..1. g Returns the G (green) value in the range 0..1. b Returns the B (blue) value in the range 0..1.", "tags": "", "loc": "al5color.html#al_color_name_to_rgb"},
     {"title": "al5color.al_color_rgb_to_name", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_name"},
     {"title": "al5color.al_color_cmyk_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_cmyk_to_rgb"},
     {"title": "al5color.al_color_rgb_to_cmyk", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_cmyk"},
     {"title": "al5color.al_color_yuv_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_yuv_to_rgb"},
     {"title": "al5color.al_color_rgb_to_yuv", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_yuv"},
     {"title": "al5color.al_color_rgb_to_html", "text": " <code>#00FAFF</code>.  <p>Example:  <p></p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   HTMLstring: <span class=\"pascal_keyword\">STRING</span>; <span class=\"pascal_keyword\">BEGIN</span>   HTMLstring := al_color_rgb_to_html (<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>);</pre>  <p> Now <code>HTMLstring</code> will contain &quot;#ff0000&quot;.      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_html"},
     {"title": "al5color.al_color_html_to_rgb", "text": " <code>#00FAFF</code>) as a color. The only accepted formats are &quot;#RRGGBB&quot; and &quot;RRGGBB&quot; where R, G, B are hexadecimal digits <code>[0-9A-Fa-f]</code>.  <p><b>Note</b>  <p>the behaviour on invalid strings is different from Allegro 5.0.x.      <code>True</code> on success, <code>False</code> on failure. On failure all components are set to zero. ", "tags": "", "loc": "al5color.html#al_color_html_to_rgb"},
     {"title": "al5color.al_color_yuv", "text": "      ", "tags": "", "loc": "al5color.html#al_color_yuv"},
     {"title": "al5color.al_color_cmyk", "text": "      ", "tags": "", "loc": "al5color.html#al_color_cmyk"},
     {"title": "al5color.al_color_hsl", "text": "       h Color hue angle in the range <code>0..360</code>. s Color saturation in the range <code>0..1</code>. l Color lightness in the range <code>0..1</code>.  h Color hue angle in the range <code>0..360</code>. s Color saturation in the range <code>0..1</code>. l Color lightness in the range <code>0..1</code>.", "tags": "", "loc": "al5color.html#al_color_hsl"},
     {"title": "al5color.al_color_hsv", "text": "       h Color hue angle in the range <code>0..360</code>. s Color saturation in the range <code>0..1</code>. v Color value in the range <code>0..1</code>.  h Color hue angle in the range <code>0..360</code>. s Color saturation in the range <code>0..1</code>. v Color value in the range <code>0..1</code>.", "tags": "", "loc": "al5color.html#al_color_hsv"},
     {"title": "al5color.al_color_name", "text": " If the color is not found then black is returned.  <p>See <a class=\"normal\" href=\"al5color.html#al_color_name_to_rgb\">al_color_name_to_rgb</a> for the list of names.    ", "tags": "", "loc": "al5color.html#al_color_name"},
     {"title": "al5color.al_color_html", "text": " <code>#00FAFF</code> as a color. The accepted format is the same as <a class=\"normal\" href=\"al5color.html#al_color_html_to_rgb\">al_color_html_to_rgb</a>.  <p><b>Note</b>  <p>the behaviour on invalid strings is different from Allegro 5.0.x.      the interpreted color, or <code><a class=\"normal\" href=\"Allegro5.html#al_map_rgba\">al_map_rgba</a> (0, 0, 0, 0)</code> if the string could not be parsed. ", "tags": "", "loc": "al5color.html#al_color_html"},
     {"title": "al5color.al_color_xyz_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_xyz_to_rgb"},
     {"title": "al5color.al_color_rgb_to_xyz", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_xyz"},
     {"title": "al5color.al_color_xyz", "text": " The CIE 1931 XYZ color space consists of three components in the range <code>0..1</code>. The Y component corresponds to luminance and the X and Z components define the color.  <p>RGB components are always assumed to be in sRGB space.  <p><b>Note</b>  <p>The XYZ color space can represent more colors than are visible in sRGB and therefore conversion may result in RGB values outside of the <code>0..1</code> range. You can check for that case with <a class=\"normal\" href=\"al5color.html#al_is_color_valid\">al_is_color_valid</a>.      ", "tags": "", "loc": "al5color.html#al_color_xyz"},
     {"title": "al5color.al_color_lab_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_lab_to_rgb"},
     {"title": "al5color.al_color_rgb_to_lab", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_lab"},
     {"title": "al5color.al_color_lab", "text": " The L* component corresponds to luminance from <code>0..1</code>. The a* and b* components are in the range <code>-1..+1</code>.  <p><b>Note</b>  <p>The L*a*b* color space can represent more colors than are visible in sRGB and therefore conversion may result in RGB values outside of the <code>0..1</code> range. You can check for that case with <a class=\"normal\" href=\"al5color.html#al_is_color_valid\">al_is_color_valid</a>.  <p><b>Note</b>  <p>In some literature the range of L* is 0 to 100 and a* and b* are from -100 to +100. In that case divide all components by 100 before passing them to this function.      ", "tags": "", "loc": "al5color.html#al_color_lab"},
     {"title": "al5color.al_color_xyy_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_xyy_to_rgb"},
     {"title": "al5color.al_color_rgb_to_xyy", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_xyy"},
     {"title": "al5color.al_color_xyy", "text": " The Y component in the xyY color space is the same as the Y in XYZ.  <p>However the x and y values are computed from XYZ like this: </p>  <pre class=\"preformatted\"> x = X / (X + Y + Z) y = Y / (X + Y + Z)</pre>  <p>      ", "tags": "", "loc": "al5color.html#al_color_xyy"},
     {"title": "al5color.al_color_distance_ciede2000", "text": " This is a visually uniform color difference, unlike for example the RGB distance.  <p>When using the RGB distance (Euklidean distance between two RGB triplets) there can be color pairs with the same distance, where the colors of one pair appear to be almost the same color, while the colors of the other pair look quite different. This is improved by using the L*a*b* color space which was designed with perceptual uniformity in mind. However it still is not completely uniform. The CIEDE2000 formula contains some additional transformations to fix that.  <p>The returned color distance is roughly in the range 0 (identical color) to 1 (completely different color) - but values greater than one are possible.  <p><b>Note</b>  <p>This function uses <a class=\"normal\" href=\"al5color.html#al_color_lab\">al_color_lab</a> internally which defines the L component to be in the range <code>0..1</code> (and not <code>0..100</code> as is sometimes seen).    ", "tags": "", "loc": "al5color.html#al_color_distance_ciede2000"},
     {"title": "al5color.al_color_lch_to_rgb", "text": "      ", "tags": "", "loc": "al5color.html#al_color_lch_to_rgb"},
     {"title": "al5color.al_color_rgb_to_lch", "text": "      ", "tags": "", "loc": "al5color.html#al_color_rgb_to_lch"},
     {"title": "al5color.al_color_lch", "text": " LCH colors are very similar to HSL, with the same meaning of L and H and C corresponding to S. However LCH is more visually uniform. Furthermore, this function expects the angle for H in radians and not in degree.  <p>The CIE LCH color space is a cylindrical representation of the L*a*b* color space. The L component is the same and C and H are computed like this: </p>  <pre class=\"preformatted\"> C = sqrt (a * a + b * b) H = atan2 (b, a)</pre>  <p>      ", "tags": "", "loc": "al5color.html#al_color_lch"},
     {"title": "al5color.al_is_color_valid", "text": " Some of the color conversions in this addon support color spaces with more colors than can be represented in sRGB and when converted to RGB will result in invalid color components outside the <code>0..1</code> range.    ", "tags": "", "loc": "al5color.html#al_is_color_valid"},
     {"title": "al5font", "text": "  <p><b>See also</b>  <p><a class=\"normal\" href=\"al5ttf.html\">al5ttf</a> ", "tags": "", "loc": "al5font.html"},
     {"title": "al5font.al_init_font_addon", "text": "  <p>Note that if you intend to load bitmap fonts, you will need to initialise <a class=\"normal\" href=\"al5image.html\">al5image</a> separately (unless you are using another library to load images).  <p>Similarly, if you wish to load truetype-fonts, do not forget to also call <a class=\"normal\" href=\"al5ttf.html#al_init_ttf_addon\">al_init_ttf_addon</a>.       <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5font.html#al_init_font_addon"},
     {"title": "al5font.al_shutdown_font_addon", "text": " This is done automatically at program exit, but can be called any time the user wishes as well.     ", "tags": "", "loc": "al5font.html#al_shutdown_font_addon"},
     {"title": "al5font.al_get_allegro_font_version", "text": "    ", "tags": "", "loc": "al5font.html#al_get_allegro_font_version"},
     {"title": "al5font.al_load_bitmap_font", "text": " This is done by first calling <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap_flags\">al_load_bitmap_flags</a> and then <a class=\"normal\" href=\"al5font.html#al_grab_font_from_bitmap\">al_grab_font_from_bitmap</a>.  <p>If you wanted to load an old A4 font, for example, it would be better to load the bitmap yourself in order to call <a class=\"normal\" href=\"Allegro5.html#al_convert_mask_to_alpha\">al_convert_mask_to_alpha</a> on it before passing it to <a class=\"normal\" href=\"al5font.html#al_grab_font_from_bitmap\">al_grab_font_from_bitmap</a>.       ", "tags": "", "loc": "al5font.html#al_load_bitmap_font"},
     {"title": "al5font.al_load_bitmap_font_flags", "text": " The flags parameter is a bitfield containing a combination of the following: </p>  <dl class=\"paragraph_spacing\">   <dt>ALLEGRO_NO_PREMULTIPLIED_ALPHA</dt>   <dd><p>The same meaning as for al_load_bitmap_flags.</p></dd> </dl>  <p>      ", "tags": "", "loc": "al5font.html#al_load_bitmap_font_flags"},
     {"title": "al5font.al_load_font", "text": " This will use <a class=\"normal\" href=\"al5font.html#al_load_bitmap_font_flags\">al_load_bitmap_font_flags</a> if you pass the name of a known bitmap format, or else <a class=\"normal\" href=\"al5ttf.html#al_load_ttf_font\">al_load_ttf_font</a>.  <p>The flags parameter is passed through to either of those functions. Bitmap and TTF fonts are also affected by the current bitmap flags at the time the font is loaded.        ", "tags": "", "loc": "al5font.html#al_load_font"},
     {"title": "al5font.al_grab_font_from_bitmap", "text": " You can delete the bitmap after the function returns as the font will contain a copy for itself.  <p>The bitmap format is as in the following example, which contains three glyphs for 1, 2 and 3. </p>  <pre class=\"preformatted\"> ............. . 1 .222.333. . 1 .  2.  3. . 1 .222.333. . 1 .2  .  3. . 1 .222.333. .............</pre>  <p> In the above illustration, the dot is for pixels having the background color. It is determined by the color of the top left pixel in the bitmap. There should be a border of at least 1 pixel with this color to the bitmap edge and between all glyphs.  <p>Each glyph is inside a rectangle of pixels not containing the background color. The height of all glyph rectangles should be the same, but the width can vary.  <p>The placement of the rectangles does not matter, except that glyphs are scanned from left to right and top to bottom to match them to the specified unicode codepoints.  <p>The glyphs will simply be drawn using <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a>, so usually you will want the rectangles filled with full transparency and the glyphs drawn in opaque white.  <p><b>Examples:</b> </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Ranges: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> AL_INT = (<span class=\"pascal_numeric\">32</span>, <span class=\"pascal_numeric\">126</span>);   TextFont: ALLEGRO_FONTptr; <span class=\"pascal_keyword\">BEGIN</span>   TextFont := al_grab_font_from_bitmap (Bitmap, <span class=\"pascal_numeric\">1</span>, Ranges) <span class=\"pascal_keyword\">END</span>;  <span class=\"pascal_keyword\">VAR</span>   Ranges: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..7] <span class=\"pascal_keyword\">OF</span> AL_INT = (     <span class=\"pascal_hex\">$0020</span>, <span class=\"pascal_hex\">$007F</span>,  <span class=\"pascal_comment\">{ ASCII }</span>     <span class=\"pascal_hex\">$00A1</span>, <span class=\"pascal_hex\">$00FF</span>,  <span class=\"pascal_comment\">{ Latin 1 }</span>     <span class=\"pascal_hex\">$0100</span>, <span class=\"pascal_hex\">$017F</span>,  <span class=\"pascal_comment\">{ Extended-A }</span>     <span class=\"pascal_hex\">$20AC</span>, <span class=\"pascal_hex\">$20AC</span>   <span class=\"pascal_comment\">{ Euro }</span>   );   TextFont: ALLEGRO_FONTptr; <span class=\"pascal_keyword\">BEGIN</span>   TextFont := al_grab_font_from_bitmap (Bitmap, <span class=\"pascal_numeric\">4</span>, Ranges) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The first example will grab glyphs for the 95 standard printable ASCII characters, beginning with the space character (32) and ending with the tilde character (126). The second example will map the first 96 glyphs found in the bitmap to ASCII range, the next 95 glyphs to Latin 1, the next 128 glyphs to Extended-A, and the last glyph to the Euro character. (This is just the characters found in the Allegro 4 font.)      bmp The bitmap with the glyphs drawn onto it. n Number of unicode ranges in the bitmap. ranges <i>n</i> pairs of first and last unicode point to map glyphs to for each range.  bmp The bitmap with the glyphs drawn onto it. n Number of unicode ranges in the bitmap. ranges <i>n</i> pairs of first and last unicode point to map glyphs to for each range.", "tags": "", "loc": "al5font.html#al_grab_font_from_bitmap"},
     {"title": "al5font.al_create_builtin_font", "text": "  <p>This font is primarily intended to be used for displaying information in environments or during early runtime states where no external font data is available or loaded (e.g. for debugging).  <p>The builtin font contains the following unicode character ranges: </p>  <pre class=\"preformatted\"> 0x0020 to 0x007F (ASCII) 0x00A1 to 0x00FF (Latin 1) 0x0100 to 0x017F (Extended A) 0x20AC to 0x20AC (euro currency symbol)</pre>  <p> The font memory must be freed the same way as for any other font, using <a class=\"normal\" href=\"al5font.html#al_destroy_font\">al_destroy_font</a>.      <code>Nil</code> on an error. ", "tags": "", "loc": "al5font.html#al_create_builtin_font"},
     {"title": "al5font.al_draw_ustr", "text": "       ", "tags": "", "loc": "al5font.html#al_draw_ustr"},
     {"title": "al5font.al_draw_text", "text": "  <p>The flags parameter can be 0 or one of the following flags:</p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_ALIGN_LEFT</code></b> - Draw the text left-aligned (same as 0).</p></li>   <li><p><b><code>ALLEGRO_ALIGN_CENTRE</code></b> - Draw the text centered around the given position.</p></li>   <li><p><b><code>ALLEGRO_ALIGN_RIGHT</code></b> - Draw the text right-aligned to the given position.</p></li> </ul>  <p> It can also be combined with this flag:</p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_ALIGN_INTEGER</code></b> - Always draw text aligned to an integer pixel position. This was formerly the default behaviour.</p></li> </ul>  <p> This function does not support newline characters (#10), but you can use <a class=\"normal\" href=\"al5font.html#al_draw_multiline_text\">al_draw_multiline_text</a> for multi line text output.       ", "tags": "", "loc": "al5font.html#al_draw_text"},
     {"title": "al5font.al_draw_justified_text", "text": "  <p>The <code>diff</code> parameter is the maximum amount of horizontal space to allow between words. If justisfying the text would exceed diff pixels, or the string contains less than two words, then the string will be drawn left aligned.  <p>The <code>flags</code> parameter can be 0 or one of the following flags: </p>  <ul class=\"paragraph_spacing\">   <li><p><b>code(ALLEGRO_ALIGN_INTEGER)</b> - Draw text aligned to integer pixel positions.</p></li> </ul>  <p>      ", "tags": "", "loc": "al5font.html#al_draw_justified_text"},
     {"title": "al5font.al_draw_justified_ustr", "text": "      ", "tags": "", "loc": "al5font.html#al_draw_justified_ustr"},
     {"title": "al5font.al_draw_textf", "text": " All parameters have the same meaning as with <a class=\"normal\" href=\"al5font.html#al_draw_text\">al_draw_text</a> otherwise.      ", "tags": "", "loc": "al5font.html#al_draw_textf"},
     {"title": "al5font.al_draw_justified_textf", "text": " All parameters have the same meaning as with <a class=\"normal\" href=\"al5font.html#al_draw_justified_text\">al_draw_justified_text</a> otherwise.      ", "tags": "", "loc": "al5font.html#al_draw_justified_textf"},
     {"title": "al5font.al_get_text_width", "text": "       ", "tags": "", "loc": "al5font.html#al_get_text_width"},
     {"title": "al5font.al_get_ustr_width", "text": "      ", "tags": "", "loc": "al5font.html#al_get_ustr_width"},
     {"title": "al5font.al_get_font_line_height", "text": " For bitmap fonts this is simply the height of all glyph bitmaps. For truetype fonts it is whatever the font file specifies. In particular, some special glyphs may be higher than the height returned here.  <p>If the X is the position you specify to draw text, the meaning of ascent and descent and the line height is like in the figure below. </p>  <pre class=\"preformatted\"> X------------------------     /\\         |        |    /  \\        |        |   /____\\       ascent   |  /      \\      |        | /        \\     |        height ----------------        |                |        |                descent  |                |        | -------------------------</pre>  <p>        ", "tags": "", "loc": "al5font.html#al_get_font_line_height"},
     {"title": "al5font.al_get_font_ascent", "text": "      ", "tags": "", "loc": "al5font.html#al_get_font_ascent"},
     {"title": "al5font.al_get_font_descent", "text": "      ", "tags": "", "loc": "al5font.html#al_get_font_descent"},
     {"title": "al5font.al_destroy_font", "text": " Does nothing if passed <code>Nil</code>.     ", "tags": "", "loc": "al5font.html#al_destroy_font"},
     {"title": "al5font.al_get_ustr_dimensions", "text": "     ", "tags": "", "loc": "al5font.html#al_get_ustr_dimensions"},
     {"title": "al5font.al_get_text_dimensions", "text": "  <p>Returned variables (all in pixels): </p>  <ul class=\"paragraph_spacing\">   <li><p><b>x, y</b> - Offset to upper left corner of bounding box.</p></li>   <li><p><b>w, h</b> - Dimensions of bounding box.</p></li> </ul>  <p> Note that glyphs may go to the left and upwards of the X, in which case <code>x</code> and <code>y</code> will have negative values.       ", "tags": "", "loc": "al5font.html#al_get_text_dimensions"},
     {"title": "al5font.al_get_font_ranges", "text": " Ranges have the same format as with <code>al_grab_font_from_bitmap</code>.      ranges_count Is the maximum number of ranges that will be returned. ranges Should be an array with room for <code>ranges_count * 2</code> elements. The even integers are the first unicode point in a range, the odd integers the last unicode point in a range. The number of ranges contained in the font (even if it is bigger than <code>ranges_count</code>). ranges_count Is the maximum number of ranges that will be returned. ranges Should be an array with room for <code>ranges_count * 2</code> elements. The even integers are the first unicode point in a range, the odd integers the last unicode point in a range.", "tags": "", "loc": "al5font.html#al_get_font_ranges"},
     {"title": "al5font.al_draw_glyph", "text": " If font does not have such a glyph, nothing will be drawn.  <p>To draw a string as left to right horizontal text you will need to use <a class=\"normal\" href=\"al5font.html#al_get_glyph_advance\">al_get_glyph_advance</a> to determine the position of each glyph. For drawing strings in other directions, such as top to down, use <a class=\"normal\" href=\"al5font.html#al_get_glyph_dimensions\">al_get_glyph_dimensions</a> to determine the size and position of each glyph.  <p>If you have to draw many glyphs at the same time, use <a class=\"normal\" href=\"Allegro5.html#al_hold_bitmap_drawing\">al_hold_bitmap_drawing</a> with <code>True</code> as the parameter, before drawing the glyphs, and then call <a class=\"normal\" href=\"Allegro5.html#al_hold_bitmap_drawing\">al_hold_bitmap_drawing</a> again with <code>False</code> as a parameter when done drawing the glyphs to further enhance performance.       ", "tags": "", "loc": "al5font.html#al_draw_glyph"},
     {"title": "al5font.al_get_glyph_width", "text": " Returns zero if the font does not have such a glyph.       ", "tags": "", "loc": "al5font.html#al_get_glyph_width"},
     {"title": "al5font.al_get_glyph_dimensions", "text": "  <p>The function itself returns <code>True</code> if the character was present in font and <code>False</code> if the character was not present in font.  <p>Returned variables (all in pixel):</p>  <ul class=\"paragraph_spacing\">   <li><p><b>bbx, bby</b> - Offset to upper left corner of bounding box.</p></li>   <li><p><b>bbw, bbh</b> - Dimensions of bounding box.</p></li> </ul>  <p> These values are the same as <a class=\"normal\" href=\"al5font.html#al_get_text_dimensions\">al_get_text_dimensions</a> would return for a string of a single character equal to the glyph passed to this function. Note that glyphs may go to the left and upwards of the X, in which case x and y will have negative values.  <p>If you want to draw a string verticallly, for Japanese or as a game effect, then you should leave <code>bby + bbh</code> space between the glyphs in the y direction for a regular placement.  <p>If you want to draw a string horizontally in an extra compact way, then you should leave <code>bbx + bbw</code> space between the glyphs in the x direction for a compact placement.  <p>In the figure below is an example of what <code>bbx</code> and <code>bby</code> may be like for a <code>2</code> glyph, and a <code>g</code> glyph of the same font compared to the result of <code>al_get_glyph_width</code>. </p>  <pre class=\"preformatted\">    al_get_glyph_width ()    al_get_glyph_width ()           __|___                   __|__          /      \\                 /     \\        bbx    bbw                 bbx   bbw         &lt;--&gt;+&lt;------&gt;+           &lt;--&gt;+&lt;-----&gt;+   X baseline     &circ;   |        |           &circ;   |       |    bby |   |        |       bby |   |       |        v   |        |           |   |       |        +---+--------+           |   |       |     &circ;   | *****  |           |   |       |     |   |*    ** |           v   |       | bbh |   |    **  |       bbh +---+-------+     |   |  **    |           &circ;   | ***** |     v   |********|           |   |*     *|     +---+--------+           |   | ***** |                              |   |      *|                              |   | *    *|                              v   |  **** |                              +---+-------+</pre>  <p>        ", "tags": "", "loc": "al5font.html#al_get_glyph_dimensions"},
     {"title": "al5font.al_get_glyph_advance", "text": " This takes into consideration the horizontal advance width of the glyph that corresponds with <code>codepoint1</code> as well as the kerning between the glyphs of <code>codepoint1</code> and <code>codepoint2</code>.  <p>Kerning is the process of adjusting the spacing between glyphs in a font, to obtain a more visually pleasing result. Kerning adjusts the space between two individual glyphs with an offset determined by the author of the font.  <p>If you pass <code>ALLEGRO_NO_KERNING</code> as <code>codepoint1</code> then <code>al_get_glyph_advance</code> will return <code>0</code>. this can be useful when drawing the first character of a string in a loop.  <p>Pass <code>ALLEGRO_NO_KERNING</code> as <code>codepoint2</code> to get the horizontal advance width of the glyph that corresponds to <code>codepoint1</code> without taking any kerning into consideration. This can be used, for example, when drawing the last character of a string in a loop.  <p>This function will return zero if the glyph of <code>codepoint1</code> is not present in the font. If the glyph of <code>codepoint2</code> is not present in the font, the horizontal advance width of the glyph that corresponds to <code>codepoint1</code> without taking any kerning into consideration is returned.  <p>When drawing a string one glyph at the time from the left to the right with kerning, the x position of the glyph should be incremented by the result of <code>al_get_glyph_advance</code> applied to the previous glyph drawn and the next glyph to draw.  <p>Note that the return value of this function is a recommended advance for optimal readability for left to right text determined by the author of the font. However, if you like, you may want to draw the glyphs of the font narrower or wider to each other than what <code>al_get_glyph_advance</code> returns for style or effect.  <p>In the figure below is an example of what the result of <code>al_get_glyph_advance</code> may be like for two glypphs <code>A</code> and <code>l</code> of the same font that has kerning for the <code>&quot;Al&quot;</code> pair, without and with the <code>ALLEGRO_NO_KERNING</code> flag. </p>  <pre class=\"preformatted\"> al_get_glyph_advance (font, ORD ('A'), ORD ('l'))      ___|___     /       \\     -------------         /\\   -|        /  \\   |       /____\\  |      /      \\ |     /        \\ \\_     -------------   al_get_glyph_advance (font, ORD ('A'), ALLEGRO_NO_KERNING)      ____|____     /         \\     ---------------         /\\     -|        /  \\     |       /____\\    |      /      \\   |     /        \\   \\_     ---------------</pre>  <p>       ", "tags": "", "loc": "al5font.html#al_get_glyph_advance"},
     {"title": "al5font.al_draw_multiline_text", "text": " It will break text in lines based on its contents and the max_width parameter. The lines are then layed out vertically depending on the <code>line_height</code> parameter and drawn each as if <a class=\"normal\" href=\"al5font.html#al_draw_text\">al_draw_text</a> was called on them.  <p>A newline <code>#10</code> in the text will cause a <i>&quot;hard&quot;</i> line break after its occurrence in the string. The text after a hard break is placed on a new line. Carriage return <code>#12</code> is not supported, will not cause a line break, and will likely be drawn as a square or a space depending on the font.  <p>The <code>max_width</code> parameter controls the maximum desired width of the lines. This function will try to introduce a <i>&quot;soft&quot;</i> line break after the longest possible series of words that will fit in <code>max_length</code> when drawn with the given font. A <i>&quot;soft&quot;</i> line break can occur either on a space or tab (<code>#7</code>) character.  <p>However, it is possible that <code>max_width</code> is too small, or the words in text are too long to fit <code>max_width</code> when drawn with font. In that case, the word that is too wide will simply be drawn completely on a line by itself. If you don't want the text that overflows <code>max_width</code> to be visible, then use <a class=\"normal\" href=\"Allegro5.html#al_set_clipping_rectangle\">al_set_clipping_rectangle</a> to clip it off and hide it.  <p>The lines <code>str</code> was split into will each be drawn using the <code>font</code>, <code>x</code>, <code>color</code> and <code>flags</code> parameters, vertically starting at <code>y</code> and with a distance of <code>line_height</code> between them. If <code>line_height</code> is zero (<code>0</code>), the value returned by calling <a class=\"normal\" href=\"al5font.html#al_get_font_line_height\">al_get_font_line_height</a> on font will be used as a default instead.  <p>The flags <code>ALLEGRO_ALIGN_LEFT</code>, <code>ALLEGRO_ALIGN_CENTRE</code>, <code>ALLEGRO_ALIGN_RIGHT</code> and <code>ALLEGRO_ALIGN_INTEGER</code> will be honoured by this function.  <p>If you want to calculate the size of what this function will draw without actually drawing it, or if you need a complex and/or custom layout, you can use <a class=\"normal\" href=\"al5font.html#al_do_multiline_text\">al_do_multiline_text</a>.       ", "tags": "", "loc": "al5font.html#al_draw_multiline_text"},
     {"title": "al5font.al_draw_multiline_textf", "text": " All parameters have the same meaning as with <a class=\"normal\" href=\"al5font.html#al_draw_multiline_text\">al_draw_multiline_text</a> otherwise.       ", "tags": "", "loc": "al5font.html#al_draw_multiline_textf"},
     {"title": "al5font.al_draw_multiline_ustr", "text": "       ", "tags": "", "loc": "al5font.html#al_draw_multiline_ustr"},
     {"title": "al5font.al_do_multiline_text", "text": " This is useful for custom drawing of multiline text, or for calculating the size of multiline text ahead of time. See the documentation on <a class=\"normal\" href=\"al5font.html#al_draw_multiline_text\">al_draw_multiline_text</a> for an explanation of the splitting algorithm.  <p>For every line that this function splits text into the callback <code>cb</code> will be called once with the following parameters: </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>line_num</code></b> - the number of the line starting from zero and counting up.</p></li>   <li><p><b><code>line</code></b> - a pointer to the beginning character of the line (see below).</p></li>   <li><p><b><code>size</code></b> - the size of the line (0 for empty lines).</p></li>   <li><p><b><code>extra</code></b> - the same pointer that was passed to <code>al_do_multiline_text</code>.</p></li> </ul>  <p> Note that line is not guaranteed to be a <i>NUL-terminated</i> string (i.e. <code>ANSISTRING</code>), but will merely point to a character within text or to an empty string in case of an empty line. If you need a <i>NUL-terminated</i> string, you will have to copy line to a buffer and <i>NUL-terminate</i> it yourself (TODO: Check if it is done by the compiler when using <code>ANSISTRING</code>). You will also have to make your own copy if you need the contents of line after <code>cb</code> has returned, as line is not guaranteed to be valid after that. Remember that in some cases <code>STRING</code> is <i>reference-counted</i> by Pascal/Delphi.  <p>If the callback <code>cb</code> returns <code>False</code>, <code>al_do_multiline_text</code> will stop immediately, otherwise it will continue on to the next line.     ", "tags": "", "loc": "al5font.html#al_do_multiline_text"},
     {"title": "al5font.al_do_multiline_ustr", "text": "     ", "tags": "", "loc": "al5font.html#al_do_multiline_ustr"},
     {"title": "al5font.al_set_fallback_font", "text": " Can be chained, but make sure there is no loop as that would crash the application! Pass <code>Nil</code> to remove a fallback font again.        ", "tags": "", "loc": "al5font.html#al_set_fallback_font"},
     {"title": "al5font.al_get_fallback_font", "text": "     ", "tags": "", "loc": "al5font.html#al_get_fallback_font"},
     {"title": "al5font.ALLEGRO_FONTptr", "text": " Usually you will create it with <a class=\"normal\" href=\"al5font.html#al_load_font\">al_load_font</a> which supports loading all kinds of TrueType fonts supported by the FreeType library. If you instead pass the filename of a bitmap file, it will be loaded with <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap\">al_load_bitmap</a> and a font in Allegro's bitmap font format will be created from it with <a class=\"normal\" href=\"al5font.html#al_grab_font_from_bitmap\">al_grab_font_from_bitmap</a>. ", "tags": "", "loc": "al5font.html#ALLEGRO_FONTptr"},
     {"title": "al5font.ALFONT_CALLBACK_MULTILINE_TEXT", "text": "    ", "tags": "", "loc": "al5font.html#ALFONT_CALLBACK_MULTILINE_TEXT"},
     {"title": "al5font.ALFONT_CALLBACK_MULTILINE_USTR", "text": "    ", "tags": "", "loc": "al5font.html#ALFONT_CALLBACK_MULTILINE_USTR"},
     {"title": "al5image", "text": "  <p>Some of the format handlers define configuration options for specifying things like compression level or gamma handling. Refer to <a class=\"normal\" href=\"Allegro5.html#al_get_system_config\">al_get_system_config</a> for their documentation. ", "tags": "", "loc": "al5image.html"},
     {"title": "al5image.al_init_image_addon", "text": "    ", "tags": "", "loc": "al5image.html#al_init_image_addon"},
     {"title": "al5image.al_shutdown_image_addon", "text": "    ", "tags": "", "loc": "al5image.html#al_shutdown_image_addon"},
     {"title": "al5image.al_get_allegro_image_version", "text": "    ", "tags": "", "loc": "al5image.html#al_get_allegro_image_version"},
     {"title": "al5memfile", "text": "  <p>The memfile interface allows you to treat a fixed block of contiguous memory as a file that can be used with Allegro's I/O functions. ", "tags": "", "loc": "al5memfile.html"},
     {"title": "al5memfile.al_open_memfile", "text": " All read and write operations act upon the memory directly, so it must not be freed while the file remains open.  <p>The mode can be any combination of <code>'r'</code> (readable) and <code>'w'</code> (writable). Regardless of the mode, the file always opens at position 0. The file size is fixed and cannot be expanded. The file is always read from/written to in binary mode, which means that no newline translation is performed.  <p>It should be closed with <a class=\"normal\" href=\"Allegro5.html#al_fclose\">al_fclose</a>. After the file is closed, you are responsible for freeing the memory (if needed).    ", "tags": "", "loc": "al5memfile.html#al_open_memfile"},
     {"title": "al5memfile.al_get_allegro_memfile_version", "text": "    ", "tags": "", "loc": "al5memfile.html#al_get_allegro_memfile_version"},
     {"title": "al5nativedlg", "text": " This includes message dialogs, file choosers, main menu and more.  <p> You should not use these dialogs if your app is running in full-screen modes.  <p>Note that this isn't integrated with VCL, CLX, LCL nor fpGUI packages. Integration isn't even planned.  <p><h3 id=\"native-menus\">Native menus</h3>  <p>Menus are implemented on Windows, X and OS X. Menus on X are implemented with GTK, and have a special requirement: you must set the <code><a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">ALLEGRO_GTK_TOPLEVEL</a></code> <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">display flag</a> prior to creating the display which will have menus attached.  <p>A menu can be attached to a single display window or popped up as a context menu. If you wish to use the same menu on multiple displays or use a sub-menu as a context menu, you must make a copy via <a class=\"normal\" href=\"al5nativedlg.html#al_clone_menu\">al_clone_menu</a> or <a class=\"normal\" href=\"al5nativedlg.html#al_clone_menu_for_popup\">al_clone_menu_for_popup</a>.  <p>Top level items in a non-popup menu must have at least one sub-item, or the behavior is undefined.  <p>Each menu item can be given an ID of any 16-bit integer greater than zero. When a user clicks on a menu item, an event will be generated only if it has an ID. This ID should be unique per menu; if you duplicate IDs, then there will be no way for you to determine exactly which item generated the event.  <p>There are many functions that take pos as a parameter used for locating a particular menu item. In those cases, it represents one of two things: an ID or a zero-based index. Any value greater than zero will always be treated as an ID. Anything else (including zero) will be considered an index based on the absolute value. In other words, <code>0</code> is the first menu item, <code>-1</code> is the second menu item, <code>-2</code> is the third menu item, and so on.  <p>The event type is <code>ALLEGRO_EVENT_MENU_CLICK</code>. It contains three fields:  <p></p>  <pre class=\"longcode\"> event.user.data1 := id; event.user.data2 := AL_INTPTR_T (display); event.user.data3 := AL_INTPTR_T (menu);</pre>  <p>  <p>The display and menu may be <code>Nil</code> if it was not possible to tell exactly which item generated the event.  <p>A basic example:  <p></p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   FILE_EXIT_ID = <span class=\"pascal_numeric\">1</span>; <span class=\"pascal_keyword\">VAR</span>   Menu, FileMenu: ALLEGRO_MENUptr;   <span class=\"pascal_numeric\"></span>... <span class=\"pascal_keyword\">BEGIN</span>   Menu := al_create_menu;   FileMenu := al_create_menu;   al_append_menu_item (FileMenu, <span class=\"pascal_string\">'Exit'</span>, FILE_EXIT_ID, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>, <span class=\"pascal_keyword\">NIL</span>);   al_append_menu_item (Menu, <span class=\"pascal_string\">'File'</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>, FileMenu);   al_set_display_menu (Display, Menu);   al_register_event_source (Queue, al_get_default_menu_event_source);   <span class=\"pascal_numeric\"></span>...   al_wait_for_event (Queue, Event);   <span class=\"pascal_keyword\">IF</span> Event._type = ALLEGRO_EVENT_MENU_CLICK <span class=\"pascal_keyword\">THEN</span>     <span class=\"pascal_keyword\">IF</span> Event.user.data1 = FILE_EXIT_ID <span class=\"pascal_keyword\">THEN</span>      ExitProgram;   <span class=\"pascal_numeric\"></span>... <span class=\"pascal_keyword\">END</span>;</pre>  <p>  <p>Because there is no <code>DISPLAY_DESTROYED</code> event, you must call <code><a class=\"normal\" href=\"al5nativedlg.html#al_set_display_menu\">al_set_display_menu</a> (Display, NIL)</code> before destroying any display with a menu attached, to avoid leaking resources.  ", "tags": "", "loc": "al5nativedlg.html"},
     {"title": "al5nativedlg.ALLEGRO_MENU_INFO", "text": "  <p>For items, these functions are helpful: </p>  <pre class=\"preformatted\"> ALLEGRO_ITEM_OF_MENU (caption, id, flags, icon) ALLEGRO_MENU_SEPARATOR ALLEGRO_END_OF_MENU</pre>  <p> A well-defined menu will contain one or more menu items, and end with <a class=\"normal\" href=\"al5nativedlg.html#ALLEGRO_END_OF_MENU\">ALLEGRO_END_OF_MENU</a>. A menu may contain sub-menus. An example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   MenuInfo: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..12] <span class=\"pascal_keyword\">OF</span> ALLEGRO_MENU_INFO;   Menu: ALLEGRO_MENUptr; <span class=\"pascal_keyword\">BEGIN</span>   MenuInfo[ <span class=\"pascal_numeric\">0</span>] := ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'&amp;File-&gt;'</span>, <span class=\"pascal_numeric\">1</span>);   MenuInfo[ <span class=\"pascal_numeric\">1</span>] :=   ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'&amp;Open'</span>, <span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>);   MenuInfo[ <span class=\"pascal_numeric\">2</span>] :=   ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'Open &amp;Recent...-&gt;'</span>, <span class=\"pascal_numeric\">3</span>);   MenuInfo[ <span class=\"pascal_numeric\">3</span>] :=     ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'Recent 1'</span>, <span class=\"pascal_numeric\">4</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>);   MenuInfo[ <span class=\"pascal_numeric\">4</span>] :=     ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'Recent 2'</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>);   MenuInfo[ <span class=\"pascal_numeric\">5</span>] :=     ALLEGRO_END_OF_MENU;   MenuInfo[ <span class=\"pascal_numeric\">6</span>] :=   ALLEGRO_MENU_SEPARATOR;   MenuInfo[ <span class=\"pascal_numeric\">7</span>] :=   ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'E&amp;xit'</span>, <span class=\"pascal_numeric\">6</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>);   MenuInfo[ <span class=\"pascal_numeric\">8</span>] :=   ALLEGRO_END_OF_MENU;   MenuInfo[ <span class=\"pascal_numeric\">9</span>] := ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'&amp;Help-&gt;'</span>, <span class=\"pascal_numeric\">7</span>);   MenuInfo[<span class=\"pascal_numeric\">10</span>] :=   ALLEGRO_ITEM_OF_MENU (<span class=\"pascal_string\">'&amp;About'</span>, <span class=\"pascal_numeric\">8</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_keyword\">NIL</span>);   MenuInfo[<span class=\"pascal_numeric\">11</span>] :=   ALLEGRO_END_OF_MENU;   MenuInfo[<span class=\"pascal_numeric\">12</span>] := ALLEGRO_END_OF_MENU;    Menu := al_build_menu (MenuInfo) <span class=\"pascal_keyword\">END</span>;</pre>  <p> If you prefer, you can build the menu without the structure by using <a class=\"normal\" href=\"al5nativedlg.html#al_create_menu\">al_create_menu</a> and <a class=\"normal\" href=\"al5nativedlg.html#al_insert_menu_item\">al_insert_menu_item</a>.  ", "tags": "", "loc": "al5nativedlg.ALLEGRO_MENU_INFO.html"},
     {"title": "al5nativedlg.ALLEGRO_MENU_INFO.caption", "text": " ", "tags": "", "loc": "al5nativedlg.ALLEGRO_MENU_INFO.html#caption"},
     {"title": "al5nativedlg.ALLEGRO_MENU_INFO.id", "text": " ", "tags": "", "loc": "al5nativedlg.ALLEGRO_MENU_INFO.html#id"},
     {"title": "al5nativedlg.ALLEGRO_MENU_INFO.flags", "text": " ", "tags": "", "loc": "al5nativedlg.ALLEGRO_MENU_INFO.html#flags"},
     {"title": "al5nativedlg.ALLEGRO_MENU_INFO.icon", "text": " ", "tags": "", "loc": "al5nativedlg.ALLEGRO_MENU_INFO.html#icon"},
     {"title": "al5nativedlg.ALLEGRO_ITEM_OF_MENU", "text": "     ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_ITEM_OF_MENU"},
     {"title": "al5nativedlg.ALLEGRO_MENU_SEPARATOR", "text": "     ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_MENU_SEPARATOR"},
     {"title": "al5nativedlg.ALLEGRO_END_OF_MENU", "text": "     ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_END_OF_MENU"},
     {"title": "al5nativedlg.al_init_native_dialog_addon", "text": "  <p><b>Note</b>  <p>Prior to Allegro 5.1.0 native dialog functions could be called without explicit initialisation, but that is now deprecated. Future functionality may require explicit initialisation. An exception is <a class=\"normal\" href=\"al5nativedlg.html#al_show_native_message_box\">al_show_native_message_box</a>, which may be useful to show an error message if Allegro fails to initialise.     <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5nativedlg.html#al_init_native_dialog_addon"},
     {"title": "al5nativedlg.al_shutdown_native_dialog_addon", "text": "     ", "tags": "", "loc": "al5nativedlg.html#al_shutdown_native_dialog_addon"},
     {"title": "al5nativedlg.al_create_native_file_dialog", "text": " You should only have one such dialog opened at a time.       initial_path The initial search path and filename. To start with a blank file name the string should end with a directory separator (this should be the common case). title Title of the dialog. patterns A list of semi-colon separated patterns to match. This should not contain any whitespace characters. If a pattern contains the '/' character, then it is treated as a MIME type (e.g. <code>'image/png'</code>). Not all platforms support file patterns. If the native dialog does not provide support, this parameter is ignored. mode 0, or a combination (<code>OR</code>) of the following flags: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_FILECHOOSER_FILE_MUST_EXIST</code></b></dt>   <dd><p>If supported by the native dialog, it will not allow entering new names, but just allow existing files to be selected. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_SAVE</code></b></dt>   <dd><p>If the native dialog system has a different dialog for saving (for example one which allows creating new directories), it is used. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_FOLDER</code></b></dt>   <dd><p>If there is support for a separate dialog to select a folder instead of a file, it will be used.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_PICTURES</code></b></dt>   <dd><p>If a different dialog is available for selecting pictures, it is used. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_SHOW_HIDDEN</code></b></dt>   <dd><p>If the platform supports it, also hidden files will be shown.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_MULTIPLE</code></b></dt>   <dd><p>If supported, allow selectingmultiple files.</p></dd> </dl>  <p> A handle to the dialog which you can pass to <a class=\"normal\" href=\"al5nativedlg.html#al_show_native_file_dialog\">al_show_native_file_dialog</a> to display it, and from which youthen can query the results using <a class=\"normal\" href=\"al5nativedlg.html#al_get_native_file_dialog_count\">al_get_native_file_dialog_count</a> and <a class=\"normal\" href=\"al5nativedlg.html#al_get_native_file_dialog_path\">al_get_native_file_dialog_path</a>. When you are done, call <a class=\"normal\" href=\"al5nativedlg.html#al_destroy_native_file_dialog\">al_destroy_native_file_dialog</a> on it.  <p>If a dialog window could not be created then this function returns <code>Nil</code>. initial_path The initial search path and filename. To start with a blank file name the string should end with a directory separator (this should be the common case). title Title of the dialog. patterns A list of semi-colon separated patterns to match. This should not contain any whitespace characters. If a pattern contains the '/' character, then it is treated as a MIME type (e.g. <code>'image/png'</code>). Not all platforms support file patterns. If the native dialog does not provide support, this parameter is ignored. mode 0, or a combination (<code>OR</code>) of the following flags: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_FILECHOOSER_FILE_MUST_EXIST</code></b></dt>   <dd><p>If supported by the native dialog, it will not allow entering new names, but just allow existing files to be selected. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_SAVE</code></b></dt>   <dd><p>If the native dialog system has a different dialog for saving (for example one which allows creating new directories), it is used. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_FOLDER</code></b></dt>   <dd><p>If there is support for a separate dialog to select a folder instead of a file, it will be used.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_PICTURES</code></b></dt>   <dd><p>If a different dialog is available for selecting pictures, it is used. Else it is ignored.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_SHOW_HIDDEN</code></b></dt>   <dd><p>If the platform supports it, also hidden files will be shown.</p></dd>   <dt><b><code>ALLEGRO_FILECHOOSER_MULTIPLE</code></b></dt>   <dd><p>If supported, allow selectingmultiple files.</p></dd> </dl>  <p>", "tags": "", "loc": "al5nativedlg.html#al_create_native_file_dialog"},
     {"title": "al5nativedlg.al_show_native_file_dialog", "text": " The display may be <code>Nil</code>, otherwise the given display is treated as the parent if possible.  <p>This function blocks the calling thread until it returns, so you may want to spawn a thread and call it from inside that thread.     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5nativedlg.html#al_show_native_file_dialog"},
     {"title": "al5nativedlg.al_get_native_file_dialog_count", "text": "      ", "tags": "", "loc": "al5nativedlg.html#al_get_native_file_dialog_count"},
     {"title": "al5nativedlg.al_get_native_file_dialog_path", "text": " The index should range from <code>0</code> to the return value of <code><a class=\"normal\" href=\"al5nativedlg.html#al_get_native_file_dialog_count\">al_get_native_file_dialog_count</a> (d) - 1</code>.      ", "tags": "", "loc": "al5nativedlg.html#al_get_native_file_dialog_path"},
     {"title": "al5nativedlg.al_destroy_native_file_dialog", "text": "    ", "tags": "", "loc": "al5nativedlg.html#al_destroy_native_file_dialog"},
     {"title": "al5nativedlg.al_show_native_message_box", "text": " This can be used for example to display an error message if creation of an initial display fails. The display may be <code>Nil</code>, otherwise the given display is treated as the parent if possible.  <p>The message box will have a single &quot;OK&quot; button and use the style informative dialog boxes usually have on the native system. If the <code>buttons</code> parameter is not an empty string, you can instead specify the button text in a string, with buttons separated by a vertical bar (|).  <p><b>Note</b> <code>buttons</code> parameter is currently unimplemented on Windows.  <p>The flags available are: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_MESSAGEBOX_WARN</code></b></dt>   <dd><p>The message is a warning. This may cause a different icon (or other effects).</p></dd>   <dt><b><code>ALLEGRO_MESSAGEBOX_ERROR</code></b></dt>   <dd><p>The message is an error.</p></dd>   <dt><b><code>ALLEGRO_MESSAGEBOX_QUESTION</code></b></dt>   <dd><p>The message is a question.</p></dd>   <dt><b><code>ALLEGRO_MESSAGEBOX_OK_CANCEL</code></b></dt>   <dd><p>Display a cancel button alongside the &quot;OK&quot; button. Ignored if <code>buttons</code> is not an empty string.</p></dd>   <dt><b><code>ALLEGRO_MESSAGEBOX_YES_NO</code></b></dt>   <dd><p>Display Yes/No buttons instead of the &quot;OK&quot; button. Ignored if <code>buttons</code> is not an empty string.</p></dd> </dl>  <p> <code>al_show_native_message_box</code> may be called without Allegro being installed. This is useful to report an error during initialisation of Allegro itself.  <p><b>Example</b> </p>  <pre class=\"longcode\"> Button := al_show_native_message_box (   Display,   <span class=\"pascal_string\">'Warning'</span>,   <span class=\"pascal_string\">'Are you sure?'</span>,   <span class=\"pascal_string\">'If you click yes then you are confirming that &quot;Yes&quot; '</span>+   <span class=\"pascal_string\">'is your response to the query which you have '</span>+   <span class=\"pascal_string\">'generated by the action you took to open this '</span>+   <span class=\"pascal_string\">'message box.'</span>,   <span class=\"pascal_string\">''</span>,   ALLEGRO_MESSAGEBOX_YES_NO ); <span class=\"pascal_keyword\">CASE</span> Button <span class=\"pascal_keyword\">OF</span> <span class=\"pascal_numeric\">1</span>: <span class=\"pascal_comment\">{ &quot;Yes&quot; pressed }</span>  <span class=\"pascal_numeric\"></span>... 2: <span class=\"pascal_comment\">{ &quot;No&quot; pressed }</span>  <span class=\"pascal_numeric\"></span>... <span class=\"pascal_keyword\">ELSE</span> <span class=\"pascal_comment\">{ Error }</span>  <span class=\"pascal_numeric\"></span>... <span class=\"pascal_keyword\">END</span>;</pre>  <p>     </p>  <ul class=\"paragraph_spacing\">   <li><p><code><b>0</b></code> if the dialog window was closed without activating a button.</p></li>   <li><p><code><b>1</b></code> if the OK or Yes button was pressed.</p></li>   <li><p><code><b>2</b></code> if the Cancel or No button was pressed</p></li> </ul>  <p> If <code>buttons</code> is not an empty string, the number of the pressed button is returned, starting with 1.  <p>If a message box could not be created then this returns 0, as if the window was dismissed without activating a button.  ", "tags": "", "loc": "al5nativedlg.html#al_show_native_message_box"},
     {"title": "al5nativedlg.al_open_native_text_log", "text": " This can be useful for debugging if you don't want to depend on a console being available.  <p>Use <a class=\"normal\" href=\"al5nativedlg.html#al_close_native_text_log\">al_close_native_text_log</a> to close the window again.       title Title of the dialog. flags One of: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_TEXTLOG_NO_CLOSE</code></b></dt>   <dd><p>Prevent the window from having a close button. Otherwise, if the close button is pressed, an event is generated; see <a class=\"normal\" href=\"al5nativedlg.html#al_get_native_text_log_event_source\">al_get_native_text_log_event_source</a>.</p></dd>   <dt><b><code>ALLEGRO_TEXTLOG_MONOSPACE</code></b></dt>   <dd><p>Use a monospace font to display the text.</p></dd> </dl>  <p> <code>Nil</code> if there was an error opening the window, or if text log windows are not implemented on the platform. title Title of the dialog. flags One of: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_TEXTLOG_NO_CLOSE</code></b></dt>   <dd><p>Prevent the window from having a close button. Otherwise, if the close button is pressed, an event is generated; see <a class=\"normal\" href=\"al5nativedlg.html#al_get_native_text_log_event_source\">al_get_native_text_log_event_source</a>.</p></dd>   <dt><b><code>ALLEGRO_TEXTLOG_MONOSPACE</code></b></dt>   <dd><p>Use a monospace font to display the text.</p></dd> </dl>  <p>", "tags": "", "loc": "al5nativedlg.html#al_open_native_text_log"},
     {"title": "al5nativedlg.al_close_native_text_log", "text": "  <p>Does nothing if passed <code>Nil</code>.     ", "tags": "", "loc": "al5nativedlg.html#al_close_native_text_log"},
     {"title": "al5nativedlg.al_append_native_text_log", "text": " A line is continued until you add a newline character.  <p>If the window is <code>Nil</code> then this function will fall back to calling <code>Write</code>. This makes it convenient to support logging to a window or a terminal.    ", "tags": "", "loc": "al5nativedlg.html#al_append_native_text_log"},
     {"title": "al5nativedlg.al_get_native_text_log_event_source", "text": " The possible events are: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE</code></b></dt>   <dd><p>The window was requested to be closed, either by pressing the close button or pressing Escape on the keyboard. The <code>user.data1</code> field will hold a pointer to the <code>ALLEGRO_TEXTLOG</code> which generated the event. The <code>user.data2</code> field will be <code>1</code> if the event was generated as a result of a key press; otherwise it will be zero.</p></dd> </dl>  <p>    ", "tags": "", "loc": "al5nativedlg.html#al_get_native_text_log_event_source"},
     {"title": "al5nativedlg.al_create_menu", "text": "       Pointer to the menu struct or <code>Nil</code> on failure. ", "tags": "", "loc": "al5nativedlg.html#al_create_menu"},
     {"title": "al5nativedlg.al_create_popup_menu", "text": " Only the root (outermost) menu should be created with this function. Sub menus of popups should be created with <a class=\"normal\" href=\"al5nativedlg.html#al_create_menu\">al_create_menu</a>.       Pointer to the menu struct or <code>Nil</code> on failure. ", "tags": "", "loc": "al5nativedlg.html#al_create_popup_menu"},
     {"title": "al5nativedlg.al_build_menu", "text": "       A pointer to the root <code>ALLEGRO_MENU</code>, or <code>Nil</code> on failure. To gain access to the other menus and items, you will need to search for them using <a class=\"normal\" href=\"al5nativedlg.html#al_find_menu_item\">al_find_menu_item</a>. ", "tags": "", "loc": "al5nativedlg.html#al_build_menu"},
     {"title": "al5nativedlg.al_append_menu_item", "text": " See <a class=\"normal\" href=\"al5nativedlg.html#al_insert_menu_item\">al_insert_menu_item</a> for more information.      ", "tags": "", "loc": "al5nativedlg.html#al_append_menu_item"},
     {"title": "al5nativedlg.al_insert_menu_item", "text": " See the introductory text for a detailed explanation of how the <code>pos</code> parameter is interpreted.         parent Can be a popup menu or a regular menu. To underline one character in the title, prefix it with an ampersand. flags Can be any combination (<code>OR</code>) of: </p>  <dl class=\"paragraph_spacing\">   <dt><code><b>ALLEGRO_MENU_ITEM_DISABLED</b></code></dt>   <dd><p>The item is <i>&quot;grayed out&quot;</i> and cannot be selected.</p></dd>   <dt><code><b>ALLEGRO_MENU_ITEM_CHECKBOX</b></code></dt>   <dd><p>The item is a check box. This flag can only be set at the time the menu is created. If a check box is clicked, it will automatically be toggled.</p></dd>   <dt><code><b>ALLEGRO_MENU_ITEM_CHECKED</b></code></dt>   <dd><p>The item is checked. If set, <code>ALLEGRO_MENU_ITEM_CHECKBOX</code> will automatically be set as well.</p></dd> </dl>  <p> icon Not yet supported. submenu Indicates that this item contains a child menu. The child menu must have previously been created with <a class=\"normal\" href=\"al5nativedlg.html#al_create_menu\">al_create_menu</a>, and not be associated with any other menu. <code>True</code> on success. parent Can be a popup menu or a regular menu. To underline one character in the title, prefix it with an ampersand. flags Can be any combination (<code>OR</code>) of: </p>  <dl class=\"paragraph_spacing\">   <dt><code><b>ALLEGRO_MENU_ITEM_DISABLED</b></code></dt>   <dd><p>The item is <i>&quot;grayed out&quot;</i> and cannot be selected.</p></dd>   <dt><code><b>ALLEGRO_MENU_ITEM_CHECKBOX</b></code></dt>   <dd><p>The item is a check box. This flag can only be set at the time the menu is created. If a check box is clicked, it will automatically be toggled.</p></dd>   <dt><code><b>ALLEGRO_MENU_ITEM_CHECKED</b></code></dt>   <dd><p>The item is checked. If set, <code>ALLEGRO_MENU_ITEM_CHECKBOX</code> will automatically be set as well.</p></dd> </dl>  <p> icon Not yet supported. submenu Indicates that this item contains a child menu. The child menu must have previously been created with <a class=\"normal\" href=\"al5nativedlg.html#al_create_menu\">al_create_menu</a>, and not be associated with any other menu.", "tags": "", "loc": "al5nativedlg.html#al_insert_menu_item"},
     {"title": "al5nativedlg.al_remove_menu_item", "text": " If the item contains a sub-menu, it too is destroyed. Any references to it are invalidated. If you want to preserve that sub-menu, you should first make a copy with <a class=\"normal\" href=\"al5nativedlg.html#al_clone_menu\">al_clone_menu</a>.  <p>This is safe to call on a menu that is currently being displayed.       <code>True</code> if an item was removed. ", "tags": "", "loc": "al5nativedlg.html#al_remove_menu_item"},
     {"title": "al5nativedlg.al_clone_menu", "text": " The menu being cloned can be anything: a regular menu, a popup menu, or a sub-menu.     The cloned menu. ", "tags": "", "loc": "al5nativedlg.html#al_clone_menu"},
     {"title": "al5nativedlg.al_clone_menu_for_popup", "text": "    ", "tags": "", "loc": "al5nativedlg.html#al_clone_menu_for_popup"},
     {"title": "al5nativedlg.al_destroy_menu", "text": " Any references to it or a sub-menu are no longer valid. It is safe to call this on a menu that is currently being displayed.     ", "tags": "", "loc": "al5nativedlg.html#al_destroy_menu"},
     {"title": "al5nativedlg.al_get_menu_item_caption", "text": " It is valid as long as the caption is not modified.  <p>Returns <code>Nil</code> if the item was not found.     ", "tags": "", "loc": "al5nativedlg.html#al_get_menu_item_caption"},
     {"title": "al5nativedlg.al_set_menu_item_caption", "text": " This will invalidate any previous calls to <a class=\"normal\" href=\"al5nativedlg.html#al_get_menu_item_caption\">al_get_menu_item_caption</a>.     ", "tags": "", "loc": "al5nativedlg.html#al_set_menu_item_caption"},
     {"title": "al5nativedlg.al_get_menu_item_flags", "text": " See <a class=\"normal\" href=\"al5nativedlg.html#al_insert_menu_item\">al_insert_menu_item</a> for a description of the available flags.  <p>Returns <code>-1</code> if the item was not found.     ", "tags": "", "loc": "al5nativedlg.html#al_get_menu_item_flags"},
     {"title": "al5nativedlg.al_set_menu_item_flags", "text": " See <a class=\"normal\" href=\"al5nativedlg.html#al_insert_menu_item\">al_insert_menu_item</a> for a description of the available flags.     ", "tags": "", "loc": "al5nativedlg.html#al_set_menu_item_flags"},
     {"title": "al5nativedlg.al_get_menu_item_icon", "text": " It is safe to draw to the returned bitmap, but you must call <a class=\"normal\" href=\"al5nativedlg.html#al_set_menu_item_icon\">al_set_menu_item_icon</a> in order for the changes to be applied.  <p>Returns <code>Nil</code> if the item was not found or if it has no icon.     ", "tags": "", "loc": "al5nativedlg.html#al_get_menu_item_icon"},
     {"title": "al5nativedlg.al_set_menu_item_icon", "text": " The menu assumes ownership of the <code>ALLEGRO_BITMAP</code> and may invalidate the pointer, so you must clone it if you wish to continue using it.  <p>If a video bitmap is passed, it will automatically be converted to a memory bitmap, so it is preferrable to pass a memory bitmap.      ", "tags": "", "loc": "al5nativedlg.html#al_set_menu_item_icon"},
     {"title": "al5nativedlg.al_toggle_menu_item_flags", "text": " See <a class=\"normal\" href=\"al5nativedlg.html#al_insert_menu_item\">al_insert_menu_item</a> for a description of the available flags.   <p><b>Unstable API:</b> Redundant with <code>al_get/set_menu_item_flags</code>.     A bitfield of only the specified flags that are set after the toggle. A flag that was not toggled will not be returned, even if it is set. Returns <code>-1</code> if the <code>id</code> is invalid. ", "tags": "", "loc": "al5nativedlg.html#al_toggle_menu_item_flags"},
     {"title": "al5nativedlg.al_find_menu", "text": " (Note that this only represents a literal ID, and cannot be used as an index.)     The menu, if found. Otherwise returns <code>Nil</code>. ", "tags": "", "loc": "al5nativedlg.html#al_find_menu"},
     {"title": "al5nativedlg.al_find_menu_item", "text": " (Note that this only represents a literal ID, and cannot be used as an index.)  <p>If <code>menu</code> and <code>index</code> are not <code>Nil</code>, they will be set as the parent menu containing the item and the zero-based (positive) index of the item. (If the menu item was not found, then their values are undefined.)     <code>True</code> if the menu item was found. ", "tags": "", "loc": "al5nativedlg.html#al_find_menu_item"},
     {"title": "al5nativedlg.al_get_default_menu_event_source", "text": " If a menu was not given its own event source via <a class=\"normal\" href=\"al5nativedlg.html#al_enable_menu_event_source\">al_enable_menu_event_source</a>, then it will use this default source.       ", "tags": "", "loc": "al5nativedlg.html#al_get_default_menu_event_source"},
     {"title": "al5nativedlg.al_enable_menu_event_source", "text": " It and all of its sub-menus will use this event source. (It is safe to call this multiple times on the same menu.)       The event source. ", "tags": "", "loc": "al5nativedlg.html#al_enable_menu_event_source"},
     {"title": "al5nativedlg.al_disable_menu_event_source", "text": "      ", "tags": "", "loc": "al5nativedlg.html#al_disable_menu_event_source"},
     {"title": "al5nativedlg.al_get_display_menu", "text": "     ", "tags": "", "loc": "al5nativedlg.html#al_get_display_menu"},
     {"title": "al5nativedlg.al_set_display_menu", "text": " If there was a previous menu associated with the display, it will be destroyed. If you don't want that to happen, you should first remove the menu with <a class=\"normal\" href=\"al5nativedlg.html#al_remove_display_menu\">al_remove_display_menu</a>.  <p>If the menu is already attached to a display, it will not be attached to the new display. If <code>menu</code> is <code>Nil</code>, the current menu will still be destroyed.  <p><b>Note</b>  <p>Attaching a menu may cause the window as available to your application to be resized! You should listen for a resize event, check how much space was lost, and resize the window accordingly if you want to maintain your window's prior size.      <code>True</code> if successful. ", "tags": "", "loc": "al5nativedlg.html#al_set_display_menu"},
     {"title": "al5nativedlg.al_popup_menu", "text": " The menu must have been created with <a class=\"normal\" href=\"al5nativedlg.html#al_create_popup_menu\">al_create_popup_menu</a>. It generates events just like a regular display menu does. It is possible that the menu will be canceled without any selection being made.     display Indicates which window the menu is associated with (when you process the menu click event), but does not actually affect where the menu is located on the screen. <code>True</code> if the context menu was displayed. display Indicates which window the menu is associated with (when you process the menu click event), but does not actually affect where the menu is located on the screen.", "tags": "", "loc": "al5nativedlg.html#al_popup_menu"},
     {"title": "al5nativedlg.al_remove_display_menu", "text": " The menu can then be used on a different display.  <p>If you simply want to destroy the active menu, you can call <a class=\"normal\" href=\"al5nativedlg.html#al_set_display_menu\">al_set_display_menu</a> with a <code>Nil</code> menu.     ", "tags": "", "loc": "al5nativedlg.html#al_remove_display_menu"},
     {"title": "al5nativedlg.al_get_allegro_native_dialog_version", "text": "    ", "tags": "", "loc": "al5nativedlg.html#al_get_allegro_native_dialog_version"},
     {"title": "al5nativedlg.ALLEGRO_FILECHOOSERptr", "text": "  ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_FILECHOOSERptr"},
     {"title": "al5nativedlg.ALLEGRO_TEXTLOGptr", "text": "  ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_TEXTLOGptr"},
     {"title": "al5nativedlg.ALLEGRO_MENUptr", "text": " Each of the menu items may optionally include a sub-menu. ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_MENUptr"},
     {"title": "al5nativedlg.ALLEGRO_MENUptrptr", "text": "  ", "tags": "", "loc": "al5nativedlg.html#ALLEGRO_MENUptrptr"},
     {"title": "al5opengl", "text": "  <p>You can disable the detection of any OpenGL extension by Allegro with a section like this in allegro5.cfg: </p>  <pre class=\"preformatted\"> [opengl_disabled_extensions]   GL_ARB_texture_non_power_of_two=0   GL_EXT_framebuffer_object=0</pre>  <p> Any extension which appears in the section is treated as not available (it does not matter if you set it to 0 or any other value). ", "tags": "", "loc": "al5opengl.html"},
     {"title": "al5opengl.al_get_opengl_version", "text": " &quot;1.0&quot; is returned as <code>$01000000</code>, &quot;1.2.1&quot; is returned as <code>$01020100</code>, and &quot;1.2.2&quot; as <code>$01020200</code> ,etc.  <p>A valid OpenGL context must exist for this function to work, which means you may not call it before <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a>.     ", "tags": "", "loc": "al5opengl.html#al_get_opengl_version"},
     {"title": "al5opengl.al_have_opengl_extension", "text": "  <p><b>Example</b> </p>  <pre class=\"longcode\"> packedpixels := al_have_opengl_extension (<span class=\"pascal_string\">'GL_EXT_packed_pixels'</span>);</pre>  <p> If <i>packedpixels</i> is <code>True</code> then you can safely use the constants related to the packed pixels extension.     <code>True</code> if the extension is available; <code>False</code> otherwise. ", "tags": "", "loc": "al5opengl.html#al_have_opengl_extension"},
     {"title": "al5opengl.al_get_opengl_proc_address", "text": "  <p><b>Example</b>  <p>How to get the function <code>glMultiTexCoord3fARB</code> that comes with ARB's Multitexture extension: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">TYPE</span> <span class=\"pascal_comment\">{ Define the type of the function. }</span>   MULTI_TEX_FUNC: <span class=\"pascal_keyword\">PROCEDURE</span> (a: GLenum; b, c, d: GLfloat); <span class=\"pascal_keyword\">CDECL</span>; <span class=\"pascal_keyword\">VAR</span> <span class=\"pascal_comment\">{ Declare the function pointer. }</span>   glMultiTexCoord3fARB: MULTI_TEX_FUNC; <span class=\"pascal_keyword\">BEGIN</span> <span class=\"pascal_comment\">{ get the address of the function. }</span>   glMultiTexCoord3fARB := MULTI_TEX_FUNC (al_get_opengl_proc_address (<span class=\"pascal_string\">'glMultiTexCoord3fARB'</span>)) <span class=\"pascal_keyword\">END</span>;</pre>  <p> If <code>glMultiTexCoord3fARB</code> is not <code>Nil</code> then it can be used as if it has been defined in the OpenGL core library.     name The name of the symbol you want to link to. A pointer to the symbol if available or <code>Nil</code> otherwise. name The name of the symbol you want to link to.", "tags": "", "loc": "al5opengl.html#al_get_opengl_proc_address"},
     {"title": "al5opengl.al_get_opengl_texture", "text": "  <p><b>Example</b> </p>  <pre class=\"longcode\"> Bitmap := al_load_bitmap (<span class=\"pascal_string\">'my_texture.png'</span>); Texture := al_get_opengl_texture (Bitmap); <span class=\"pascal_keyword\">IF</span> texture &lt;&gt; <span class=\"pascal_keyword\">NIL</span> <span class=\"pascal_keyword\">THEN</span> glBindTexture (GL_TEXTURE_2D, Texture);</pre>  <p>    ", "tags": "", "loc": "al5opengl.html#al_get_opengl_texture"},
     {"title": "al5opengl.al_remove_opengl_fbo", "text": " Usually you do not need to worry about freeing FBOs, unless you use al_get_opengl_fbo.  <p>     ", "tags": "", "loc": "al5opengl.html#al_remove_opengl_fbo"},
     {"title": "al5opengl.al_get_opengl_fbo", "text": " No attempt will be made to create an FBO if the bitmap is not owned by the current display.  <p>The FBO returned by this function will only be freed when the bitmap is destroyed, or if you call <a class=\"normal\" href=\"al5opengl.html#al_remove_opengl_fbo\">al_remove_opengl_fbo</a> on the bitmap.  <p><b>Note:</b> In Allegro 5.0.0 this function only returned an FBO which had previously been created by calling <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a>. It would not attempt to create an FBO itself. This has since been changed.      ", "tags": "", "loc": "al5opengl.html#al_get_opengl_fbo"},
     {"title": "al5opengl.al_get_opengl_texture_size", "text": " This can be different from the bitmap size if OpenGL only supports power-of-two sizes or if it is a sub-bitmap.     <code>True</code> on success, <code>False</code> on failure. Zero width and height are returned if the bitmap is not an OpenGL bitmap. ", "tags": "", "loc": "al5opengl.html#al_get_opengl_texture_size"},
     {"title": "al5opengl.al_get_opengl_texture_position", "text": "     ", "tags": "", "loc": "al5opengl.html#al_get_opengl_texture_position"},
     {"title": "al5opengl.al_get_opengl_program_object", "text": " Otherwise, returns <code>0</code>.    ", "tags": "", "loc": "al5opengl.html#al_get_opengl_program_object"},
     {"title": "al5opengl.al_set_current_opengl_context", "text": " If there is a current target bitmap which belongs to a different OpenGL context, the target bitmap will be changed to <code>Nil</code>.  <p>Normally you do not need to use this function, as the context will be made current when you call <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a> or <a class=\"normal\" href=\"Allegro5.html#al_set_target_backbuffer\">al_set_target_backbuffer</a>. You might need it if you created an OpenGL &quot;forward compatible&quot; context. Then <a class=\"normal\" href=\"Allegro5.html#al_get_backbuffer\">al_get_backbuffer</a> only returns <code>Nil</code>, so it would not work to pass that to <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a>.    ", "tags": "", "loc": "al5opengl.html#al_set_current_opengl_context"},
     {"title": "al5opengl.al_get_opengl_variant", "text": " This function can be called before creating a display or setting properties for new displays. Possible values are: </p>  <dl class=\"paragraph_spacing\">   <dt><code><b>ALLEGRO_DESKTOP_OPENGL</b></code></dt>   <dd><p>Regular OpenGL as seen on desktop/laptop computers.</p></dd>   <dt><code><b>ALLEGRO_OPENGL_ES</b></code></dt>   <dd><p>Trimmed down version of OpenGL used on many small consumer electronic devices such as handheld (and sometimes full size) consoles.</p></dd> </dl>  <p>     ", "tags": "", "loc": "al5opengl.html#al_get_opengl_variant"},
     {"title": "al5primitives", "text": "  <p><b>High level drawing routines</b>  <p>High level drawing routines encompass the most common usage of this addon: to draw geometric primitives, both smooth (variations on the circle theme) and piecewise linear. Outlined primitives support the concept of thickness with two distinct modes of output: hairline lines and thick lines. Hairline lines are specifically designed to be exactly a pixel wide, and are commonly used for drawing outlined figures that need to be a pixel wide. Hairline thickness is designated as thickness less than or equal to 0. Unfortunately, the exact rasterization rules for drawing these hairline lines vary from one video card to another, and sometimes leave gaps where the lines meet. If that matters to you, then you should use thick lines. In many cases, having a thickness of 1 will produce 1 pixel wide lines that look better than hairline lines. Obviously, hairline lines cannot replicate thicknesses greater than 1. Thick lines grow symmetrically around the generating shape as thickness is increased.  <p><b>Low level drawing routines</b>  <p>Low level drawing routines allow for more advanced usage of the addon, allowing you to pass arbitrary sequences of vertices to draw to the screen. These routines also support using textures on the primitives with the following restrictions:  <p>For maximum portability, you should only use textures that have dimensions that are a power of two, as not every videocard supports textures of different sizes completely. This warning is relaxed, however, if the texture coordinates never exit the boundaries of a single bitmap (i.e. you are not having the texture repeat/tile). As long as that is the case, any texture can be used safely. Sub-bitmaps work as textures, but cannot be tiled.  <p>Some platforms also dictate a minimum texture size, which means that textures smaller than that size will not tile properly. The minimum size that will work on all platforms is 32 by 32.  <p>A note about pixel coordinates. In OpenGL the texture coordinate (0, 0) refers to the top left corner of the pixel. This confuses some drivers, because due to rounding errors the actual pixel sampled might be the pixel to the top and/or left of the (0, 0) pixel. To make this error less likely it is advisable to offset the texture coordinates you pass to the al_draw_prim by (0.5, 0.5) if you need precise pixel control. E.g. to refer to pixel (5, 10) you'd set the u and v to 5.5 and 10.5 respectively.  <p><b>Pixel-precise output</b>  <p>While normally you should not be too concerned with which pixels are displayed when the high level primitives are drawn, it is nevertheless possible to control that precisely by carefully picking the coordinates at which you draw those primitives.  <p>To be able to do that, however, it is critical to understand how GPU cards convert shapes to pixels. Pixels are not the smallest unit that can be addressed by the GPU. Because the GPU deals with floating point coordinates, it can in fact assign different coordinates to different parts of a single pixel. To a GPU, thus, a screen is composed of a grid of squares that have width and length of 1. The top left corner of the top left pixel is located at (0, 0). Therefore, the center of that pixel is at (0.5, 0.5). The basic rule that determines which pixels are associated with which shape is then as follows: a pixel is treated to belong to a shape if the pixel's center is located in that shape. The figure below illustrates the above concepts:  <p><figure>  <img src=\"images/primitives1.png\" width=\"100%\" title=\"Pixel output calculation\" alt=\"[-]\" />  <figcaption>Diagram showing a how pixel output is calculated by the GPU given the mathematical description of several shapes.</figcaption> </figure>  <p>This figure depicts three shapes drawn at the top left of the screen: an orange and green rectangles and a purple circle. On the left are the mathematical descriptions of pixels on the screen and the shapes to be drawn. On the right is the screen output. Only a single pixel has its center inside the circle, and therefore only a single pixel is drawn on the screen. Similarly, two pixels are drawn for the orange rectangle. Since there are no pixels that have their centers inside the green rectangle, the output image has no green pixels.  <p>Here is a more practical example. The image below shows the output of this code: </p>  <pre class=\"longcode\"> <span class=\"pascal_comment\">{ blue vertical line }</span> al_draw_line (<span class=\"pascal_float\">0.5</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_numeric\">6</span>, ColorBlue, <span class=\"pascal_numeric\">1</span>); <span class=\"pascal_comment\">{ red horizontal line }</span> al_draw_line (<span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">6</span>, <span class=\"pascal_numeric\">1</span>, ColorRed, <span class=\"pascal_numeric\">2</span>); <span class=\"pascal_comment\">{ green filled rectangle }</span> al_draw_filled_rectangle (<span class=\"pascal_numeric\">3</span>, <span class=\"pascal_numeric\">4</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">5</span>, ColorGreen); <span class=\"pascal_comment\">{ purple outlined rectangle }</span> al_draw_rectangle (<span class=\"pascal_float\">2.5</span>, <span class=\"pascal_float\">3.5</span>, <span class=\"pascal_float\">5.5</span>, <span class=\"pascal_float\">5.5</span>, ColorPurple, <span class=\"pascal_numeric\">1</span>);</pre>  <p>  <p><figure>  <img src=\"images/primitives2.png\" width=\"100%\" title=\"Pixel perfect\" alt=\"[-]\" />  <figcaption>Diagram showing a practical example of pixel output resulting from the invocation of several primitives addon functions.</figcaption> </figure>  <p>It can be seen that lines are generated by making a rectangle based on the dashed line between the two endpoints. The thickness causes the rectangle to grow symmetrically about that generating line, as can be seen by comparing the red and blue lines. Note that to get proper pixel coverage, the coordinates passed to the al_draw_line had to be offset by 0.5 in the appropriate dimensions.  <p>Filled rectangles are generated by making a rectangle between the endpoints passed to the <a class=\"normal\" href=\"al5primitives.html#al_draw_filled_rectangle\">al_draw_filled_rectangle</a>.  <p>Outlined rectangles are generated by symmetrically expanding an outline of a rectangle. With a thickness of 1, as depicted in the diagram, this means that an offset of 0.5 is needed for both sets of endpoint coordinates to exactly line up with the pixels of the display raster.  <p>The above rules only apply when multisampling is turned off. When multisampling is turned on, the area of a pixel that is covered by a shape is taken into account when choosing what color to draw there. This also means that shapes no longer have to contain the pixel's center to affect its color. For example, the green rectangle in the first diagram may in fact be drawn as two (or one) semi-transparent pixels. The advantages of multisampling is that slanted shapes will look smoother because they will not have jagged edges. A disadvantage of multisampling is that it may make vertical and horizontal edges blurry. While the exact rules for multisampling are unspecified, and may vary from GPU to GPU, it is usually safe to assume that as long as a pixel is either completely covered by a shape or completely not covered, then the shape edges will be sharp. The offsets used in the second diagram were chosen so that this is the case: if you use those offsets, your shapes (if they are oriented the same way as they are on the diagram) should look the same whether multisampling is turned on or off.  ", "tags": "", "loc": "al5primitives.html"},
     {"title": "al5primitives.ALLEGRO_VERTEX_ELEMENT", "text": " E.g. the position of the vertex, or its color. These structures are used by the <a class=\"normal\" href=\"al5primitives.html#al_create_vertex_decl\">al_create_vertex_decl</a> function to create the vertex declaration. For that they generally occur in an array. The last element of such an array should have the <code>attribute</code> field equal to <code>0</code>, to signify that it is the end of the array. Here is an example code that would create a declaration describing the <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX.html\">ALLEGRO_VERTEX</a> structure (passing this as vertex declaration to <a class=\"normal\" href=\"al5primitives.html#al_draw_prim\">al_draw_prim</a> would be identical to passing <code>Nil</code>): </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   Elements: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> ALLEGRO_VERTEX_ELEMENT = (     (attribute: ALLEGRO_PRIM_POSITION,        storage: ALLEGRO_PRIM_FLOAT_3,      offset: <span class=\"pascal_numeric\">0</span>),     (attribute: ALLEGRO_PRIM_TEX_COORD_PIXEL, storage: ALLEGRO_PRIM_FLOAT_2,      offset: SIZEOF (AL_FLOAT) * <span class=\"pascal_numeric\">3</span>),     (attribute: ALLEGRO_PRIM_COLOR_ATTR,      storage: ALLEGRO_PRIM_STORAGE_NONE, offset: SIZEOF (AL_FLOAT) * <span class=\"pascal_numeric\">5</span>),     (attribute: ALLEGRO_PRIM_ATTR_NONE,       storage: ALLEGRO_PRIM_STORAGE_NONE, offset: <span class=\"pascal_numeric\">0</span>)   );   Declaration: ALLEGRO_VERTEX_DECLptr; <span class=\"pascal_keyword\">BEGIN</span>   Declaration := al_create_vertex_decl (Elements, SIZEOF (ALLEGRO_VERTEX));</pre>  <p>        ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX_ELEMENT.html"},
     {"title": "al5primitives.ALLEGRO_VERTEX_ELEMENT.attribute", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX_ELEMENT.html#attribute"},
     {"title": "al5primitives.ALLEGRO_VERTEX_ELEMENT.storage", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX_ELEMENT.html#storage"},
     {"title": "al5primitives.ALLEGRO_VERTEX_ELEMENT.offset", "text": " The C function offsetof is very useful here. ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX_ELEMENT.html#offset"},
     {"title": "al5primitives.ALLEGRO_VERTEX", "text": " Note that at this time, the software driver for this addon cannot render 3D primitives. If you want a 2D only primitive, set <code>z</code> to <code>0</code>. Note that you must initialize all members of this struct when you're using it. One exception to this rule are the <code>u</code> and <code>v</code> variables which can be left uninitialized when you are not using textures.  ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html"},
     {"title": "al5primitives.ALLEGRO_VERTEX.x", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#x"},
     {"title": "al5primitives.ALLEGRO_VERTEX.y", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#y"},
     {"title": "al5primitives.ALLEGRO_VERTEX.z", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#z"},
     {"title": "al5primitives.ALLEGRO_VERTEX.u", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#u"},
     {"title": "al5primitives.ALLEGRO_VERTEX.v", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#v"},
     {"title": "al5primitives.ALLEGRO_VERTEX.color", "text": " ", "tags": "", "loc": "al5primitives.ALLEGRO_VERTEX.html#color"},
     {"title": "al5primitives.ALLEGRO_PRIM_STORAGE_NONE", "text": "  ", "tags": "", "loc": "al5primitives.html#ALLEGRO_PRIM_STORAGE_NONE"},
     {"title": "al5primitives.ALLEGRO_LINE_JOIN_MITRE", "text": " ", "tags": "", "loc": "al5primitives.html#ALLEGRO_LINE_JOIN_MITRE"},
     {"title": "al5primitives.ALLEGRO_VERTEX_CACHE_SIZE", "text": " If you pass less than this many vertices to the primitive rendering functions you will get a speed boost. This also defines the size of the cache vertex buffer, used for the high-level primitives. This corresponds to the maximum number of line segments that will be used to form them. ", "tags": "", "loc": "al5primitives.html#ALLEGRO_VERTEX_CACHE_SIZE"},
     {"title": "al5primitives.al_get_allegro_primitives_version", "text": "    ", "tags": "", "loc": "al5primitives.html#al_get_allegro_primitives_version"},
     {"title": "al5primitives.al_init_primitives_addon", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5primitives.html#al_init_primitives_addon"},
     {"title": "al5primitives.al_shutdown_primitives_addon", "text": " This is done automatically at program exit, but can be called any time the user wishes as well.     ", "tags": "", "loc": "al5primitives.html#al_shutdown_primitives_addon"},
     {"title": "al5primitives.al_draw_prim", "text": "  <p>For example to draw a textured triangle you could use: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   v: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..2] <span class=\"pascal_keyword\">OF</span> ALLEGRO_VERTEX = (     (x: <span class=\"pascal_numeric\">128</span>, y: <span class=\"pascal_numeric\">0</span>,   z: <span class=\"pascal_numeric\">0</span>, color: white, u: <span class=\"pascal_numeric\">128</span>, v: <span class=\"pascal_numeric\">0</span>),     (x: <span class=\"pascal_numeric\">0</span>,   y: <span class=\"pascal_numeric\">256</span>, z: <span class=\"pascal_numeric\">0</span>, color: white, u: <span class=\"pascal_numeric\">0</span>,   v: <span class=\"pascal_numeric\">256</span>),     (x: <span class=\"pascal_numeric\">256</span>, y: <span class=\"pascal_numeric\">256</span>, z: <span class=\"pascal_numeric\">0</span>, color: white, u: <span class=\"pascal_numeric\">256</span>, v: <span class=\"pascal_numeric\">256</span>)   ); <span class=\"pascal_keyword\">BEGIN</span>   al_draw_prim (v, Texture, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">3</span>, ALLEGRO_PRIM_TRIANGLE_LIST) <span class=\"pascal_keyword\">END</span>;</pre>  <p>            vtxs Pointer to an array of vertices. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex array to draw. end One past the last index of the subset of the vertex array to draw. Number of primitives drawn. vtxs Pointer to an array of vertices. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex array to draw. end One past the last index of the subset of the vertex array to draw.", "tags": "", "loc": "al5primitives.html#al_draw_prim"},
     {"title": "al5primitives.al_draw_prim_ex", "text": "              vtxs Pointer to an array of vertices. decl Pointer to a vertex declaration. If set to <code>Nil</code>, the <code>vtx</code> are assumed to be of the <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX.html\">ALLEGRO_VERTEX</a> type. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex array to draw. end One past the last index of the subset of the vertex array to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Number of primitives drawn. vtxs Pointer to an array of vertices. decl Pointer to a vertex declaration. If set to <code>Nil</code>, the <code>vtx</code> are assumed to be of the <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX.html\">ALLEGRO_VERTEX</a> type. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex array to draw. end One past the last index of the subset of the vertex array to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw.", "tags": "", "loc": "al5primitives.html#al_draw_prim_ex"},
     {"title": "al5primitives.al_draw_indexed_prim", "text": " This function uses an index array to specify which vertices to use.             vtxs Pointer to an array of vertices. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. indices An array of indices into the vertex array. num_vtx Number of indices from the indices array you want to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Number of primitives drawn. vtxs Pointer to an array of vertices. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. indices An array of indices into the vertex array. num_vtx Number of indices from the indices array you want to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw.", "tags": "", "loc": "al5primitives.html#al_draw_indexed_prim"},
     {"title": "al5primitives.al_draw_indexed_prim_ex", "text": "              vtxs Pointer to an array of vertices. decl Pointer to a vertex declaration. If set to <code>Nil</code>, the <code>vtxs</code> are assumed to be of the <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX.html\">ALLEGRO_VERTEX</a> type. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. indices An array of indices into the vertex array. num_vtx Number of indices from the indices array you want to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Number of primitives drawn. vtxs Pointer to an array of vertices. decl Pointer to a vertex declaration. If set to <code>Nil</code>, the <code>vtxs</code> are assumed to be of the <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX.html\">ALLEGRO_VERTEX</a> type. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. indices An array of indices into the vertex array. num_vtx Number of indices from the indices array you want to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw.", "tags": "", "loc": "al5primitives.html#al_draw_indexed_prim_ex"},
     {"title": "al5primitives.al_draw_vertex_buffer", "text": " The vertex buffer must not be locked. Additionally, to draw onto memory bitmaps or with memory bitmap textures the vertex buffer must support reading (i.e. it must be created with the <code>ALLEGRO_PRIM_BUFFER_READWRITE</code>).          vertex_buffer Vertex buffer to draw. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex buffer to draw. end One past the last index of the subset of the vertex buffer to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Number of primitives drawn. vertex_buffer Vertex buffer to draw. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. start Start index of the subset of the vertex buffer to draw. end One past the last index of the subset of the vertex buffer to draw. atype A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw.", "tags": "", "loc": "al5primitives.html#al_draw_vertex_buffer"},
     {"title": "al5primitives.al_draw_indexed_buffer", "text": " This function uses an index buffer to specify which vertices to use. Both buffers must not be locked. Additionally, to draw onto memory bitmaps or with memory bitmap textures both buffers must support reading (i.e. they must be created with the <code>ALLEGRO_PRIM_BUFFER_READWRITE</code>).            vertex_buffer Vertex buffer to draw. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. index_buffer Index buffer to use. start Start index of the subset of the vertex buffer to draw. end One past the last index of the subset of the vertex buffer to draw. type A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Note that <code>ALLEGRO_PRIM_LINE_LOOP</code> and <code>ALLEGRO_PRIM_POINT_LIST</code> are not supported. Number of primitives drawn. vertex_buffer Vertex buffer to draw. texture Texture to use, pass <code>Nil</code> to use only color shaded primitves. index_buffer Index buffer to use. start Start index of the subset of the vertex buffer to draw. end One past the last index of the subset of the vertex buffer to draw. type A member of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_TYPE\">ALLEGRO_PRIM_TYPE</a> enumeration, specifying what kind of primitive to draw. Note that <code>ALLEGRO_PRIM_LINE_LOOP</code> and <code>ALLEGRO_PRIM_POINT_LIST</code> are not supported.", "tags": "", "loc": "al5primitives.html#al_draw_indexed_buffer"},
     {"title": "al5primitives.al_create_vertex_decl", "text": "        elements An array of <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX_ELEMENT.html\">ALLEGRO_VERTEX_ELEMENT</a> structures. stride Size of the custom vertex structure. Newly created vertex declaration. elements An array of <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX_ELEMENT.html\">ALLEGRO_VERTEX_ELEMENT</a> structures. stride Size of the custom vertex structure.", "tags": "", "loc": "al5primitives.html#al_create_vertex_decl"},
     {"title": "al5primitives.al_destroy_vertex_decl", "text": "      decl Vertex declaration to destroy.  decl Vertex declaration to destroy.", "tags": "", "loc": "al5primitives.html#al_destroy_vertex_decl"},
     {"title": "al5primitives.al_create_vertex_buffer", "text": " Can return <code>Nil</code> if the buffer could not be created (e.g. the system only supports write-only buffers).  <p><b>Note</b>  <p>This is an advanced feature, often unsupported on lower-end video cards. Be extra mindful of this function failing and make arrangements for fallback drawing functionality or a nice error message for users with such lower-end cards.       initial_data Memory buffer to copy from to initialize the vertex buffer. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.  initial_data Memory buffer to copy from to initialize the vertex buffer. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.", "tags": "", "loc": "al5primitives.html#al_create_vertex_buffer"},
     {"title": "al5primitives.al_create_vertex_buffer_ex", "text": "         decl Vertex type that this buffer will hold. <code>Nil</code> implies that this buffer will hold ALLEGRO_VERTEX vertices. initial_data Memory buffer to copy from to initialize the vertex buffer. Can be <code>Nil</code>, in which case the buffer is uninitialized. num_vertices Number of vertices the buffer will hold. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.  decl Vertex type that this buffer will hold. <code>Nil</code> implies that this buffer will hold ALLEGRO_VERTEX vertices. initial_data Memory buffer to copy from to initialize the vertex buffer. Can be <code>Nil</code>, in which case the buffer is uninitialized. num_vertices Number of vertices the buffer will hold. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.", "tags": "", "loc": "al5primitives.html#al_create_vertex_buffer_ex"},
     {"title": "al5primitives.al_destroy_vertex_buffer", "text": " Does nothing if passed <code>Nil</code>.      ", "tags": "", "loc": "al5primitives.html#al_destroy_vertex_buffer"},
     {"title": "al5primitives.al_lock_vertex_buffer", "text": " Will return <code>Nil</code> if the parameters are invalid, if reading is requested from a write only buffer, or if the buffer is already locked.        buffer Vertex buffer to lock. offset Vertex index of the start of the locked range. length How many vertices to lock. flags <code>ALLEGRO_LOCK_READONLY</code>, <code>ALLEGRO_LOCK_WRITEONLY</code> or <code>ALLEGRO_LOCK_READWRITE</code>.  buffer Vertex buffer to lock. offset Vertex index of the start of the locked range. length How many vertices to lock. flags <code>ALLEGRO_LOCK_READONLY</code>, <code>ALLEGRO_LOCK_WRITEONLY</code> or <code>ALLEGRO_LOCK_READWRITE</code>.", "tags": "", "loc": "al5primitives.html#al_lock_vertex_buffer"},
     {"title": "al5primitives.al_unlock_vertex_buffer", "text": "      ", "tags": "", "loc": "al5primitives.html#al_unlock_vertex_buffer"},
     {"title": "al5primitives.al_get_vertex_buffer_size", "text": "     ", "tags": "", "loc": "al5primitives.html#al_get_vertex_buffer_size"},
     {"title": "al5primitives.al_create_index_buffer", "text": " Can return <code>Nil</code> if the buffer could not be created (e.g. the system only supports write-only buffers).  <p><b>Note</b>  <p>This is an advanced feature, often unsupported on lower-end video cards. Be extra mindful of this function failing and make arrangements for fallback drawing functionality or a nice error message for users with such lower-end cards.        index_size Size of the index in bytes. Supported sizes are 2 for short integers and 4 for integers. initial_data Memory buffer to copy from to initialize the index buffer. Can be <code>Nil</code>, in which case the buffer is uninitialized. num_indices Number of indices the buffer will hold. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.  index_size Size of the index in bytes. Supported sizes are 2 for short integers and 4 for integers. initial_data Memory buffer to copy from to initialize the index buffer. Can be <code>Nil</code>, in which case the buffer is uninitialized. num_indices Number of indices the buffer will hold. flags A combination of the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS\">ALLEGRO_PRIM_BUFFER_FLAGS</a> flags specifying how this buffer will be created.", "tags": "", "loc": "al5primitives.html#al_create_index_buffer"},
     {"title": "al5primitives.al_destroy_index_buffer", "text": " Does nothing if passed <code>Nil</code>.      ", "tags": "", "loc": "al5primitives.html#al_destroy_index_buffer"},
     {"title": "al5primitives.al_lock_index_buffer", "text": " Will return <code>Nil</code> if the parameters are invalid, if reading is requested from a write only buffer and if the buffer is already locked.        buffer Index buffer to lock. offset Element index of the start of the locked range. length How many indices to lock. flags <code>ALLEGRO_LOCK_READONLY</code>, <code>ALLEGRO_LOCK_WRITEONLY</code> or <code>ALLEGRO_LOCK_READWRITE</code>.  buffer Index buffer to lock. offset Element index of the start of the locked range. length How many indices to lock. flags <code>ALLEGRO_LOCK_READONLY</code>, <code>ALLEGRO_LOCK_WRITEONLY</code> or <code>ALLEGRO_LOCK_READWRITE</code>.", "tags": "", "loc": "al5primitives.html#al_lock_index_buffer"},
     {"title": "al5primitives.al_unlock_index_buffer", "text": "      ", "tags": "", "loc": "al5primitives.html#al_unlock_index_buffer"},
     {"title": "al5primitives.al_get_index_buffer_size", "text": "    ", "tags": "", "loc": "al5primitives.html#al_get_index_buffer_size"},
     {"title": "al5primitives.al_triangulate_polygon", "text": " The holes cannot touch or intersect with the outline of the main polygon. Simple means the polygon does not have to be convex but must not be self-overlapping.         vertices Interleaved array of (x, y) vertex coordinates for each of the polygons, including holes. vertex_stride Distance (in bytes) between successive pairs of vertices in the array. vertex_counts Number of vertices for each polygon. The number of vertices in the main polygon is given by vertex_counts[0] and must be at least three. Subsequent elements indicate the number of vertices in each hole. The array must be terminated with an element with value zero. emit_triangle A function to be called for every set of three points that form a triangle. The function is passed the indices of the points in <code>vertices</code> and <code>userdata</code>. userdata Arbitrary data to be passed to emit_triangle.  vertices Interleaved array of (x, y) vertex coordinates for each of the polygons, including holes. vertex_stride Distance (in bytes) between successive pairs of vertices in the array. vertex_counts Number of vertices for each polygon. The number of vertices in the main polygon is given by vertex_counts[0] and must be at least three. Subsequent elements indicate the number of vertices in each hole. The array must be terminated with an element with value zero. emit_triangle A function to be called for every set of three points that form a triangle. The function is passed the indices of the points in <code>vertices</code> and <code>userdata</code>. userdata Arbitrary data to be passed to emit_triangle.", "tags": "", "loc": "al5primitives.html#al_triangulate_polygon"},
     {"title": "al5primitives.al_draw_soft_triangle", "text": " For help in understanding what these functions do, see the implementation of the various shading routines in <code>addons/primitives/tri_soft.c</code>. The triangle is drawn in two segments, from top to bottom. The segments are deliniated by the vertically middle vertex of the triangle. One of the two segments may be absent if two vertices are horizontally collinear.  <p><b>Parámetros sin terminar de describir.</b> Alguna explicación habrá que ponerla en la descripción del tipo de parámetro.           v1 The first vertex of the triangle. v2 The second vertex of the triangle. v3 The third vertex of the triangle. state A pointer to a user supplied struct, this struct will be passed to all the pixel functions. init Called once per call before any drawing is done. The three points passed to it may be altered by clipping. first Called twice per call, once per triangle segment. step Called once per scanline. The last parameter is set to 1 if the step is a minor step, and 0 if it is a major step. draw Called once per scanline.  v1 The first vertex of the triangle. v2 The second vertex of the triangle. v3 The third vertex of the triangle. state A pointer to a user supplied struct, this struct will be passed to all the pixel functions. init Called once per call before any drawing is done. The three points passed to it may be altered by clipping. first Called twice per call, once per triangle segment. step Called once per scanline. The last parameter is set to 1 if the step is a minor step, and 0 if it is a major step. draw Called once per scanline.", "tags": "", "loc": "al5primitives.html#al_draw_soft_triangle"},
     {"title": "al5primitives.al_draw_soft_line", "text": " For help in understanding what these functions do, see the implementation of the various shading routines in <code>addons/primitives/line_soft.c</code>. The line is drawn top to bottom.         v1 Initial vertex of the line. v2 Final vertex of the line. state A pointer to a user supplied struct, this struct will be passed to all the pixel functions. first Called before drawing the first pixel of the line. step Called once per pixel. The second parameter is set to 1 if the step is a minor step, and 0 if this step is a major step. Minor steps are taken only either in x or y directions. Major steps are taken in both directions diagonally. In all cases, the absolute value of the change in coordinate is at most 1 in either direction. draw Called once per pixel.  v1 Initial vertex of the line. v2 Final vertex of the line. state A pointer to a user supplied struct, this struct will be passed to all the pixel functions. first Called before drawing the first pixel of the line. step Called once per pixel. The second parameter is set to 1 if the step is a minor step, and 0 if this step is a major step. Minor steps are taken only either in x or y directions. Major steps are taken in both directions diagonally. In all cases, the absolute value of the change in coordinate is at most 1 in either direction. draw Called once per pixel.", "tags": "", "loc": "al5primitives.html#al_draw_soft_line"},
     {"title": "al5primitives.al_draw_line", "text": "         x1 X start point of the line. y1 Y start point of the line. x2 X end point of the line. y2 Y end point of the line. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines.  x1 X start point of the line. y1 Y start point of the line. x2 X end point of the line. y2 Y end point of the line. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines.", "tags": "", "loc": "al5primitives.html#al_draw_line"},
     {"title": "al5primitives.al_draw_triangle", "text": "  x1 X coordinate of the first vertex. y1 Y coordinate of the first vertex. x2 X coordinate of the second vertex. y2 Y coordinate of the second vertex. x3 X coordinate of the third vertex. y3 Y coordinate of the third vertex. color Color of the triangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.  x1 X coordinate of the first vertex. y1 Y coordinate of the first vertex. x2 X coordinate of the second vertex. y2 Y coordinate of the second vertex. x3 X coordinate of the third vertex. y3 Y coordinate of the third vertex. color Color of the triangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.", "tags": "", "loc": "al5primitives.html#al_draw_triangle"},
     {"title": "al5primitives.al_draw_rectangle", "text": "          x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. color Color of the rectangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.  x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. color Color of the rectangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.", "tags": "", "loc": "al5primitives.html#al_draw_rectangle"},
     {"title": "al5primitives.al_draw_rounded_rectangle", "text": "            x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. rx Horizontal radius of the round. ry Vertical radius of the round. color Color of the rectangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.  x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. rx Horizontal radius of the round. ry Vertical radius of the round. color Color of the rectangle. thickness Thickness of the lines, pass &lt;= 0 to draw hairline lines.", "tags": "", "loc": "al5primitives.html#al_draw_rounded_rectangle"},
     {"title": "al5primitives.al_calculate_arc", "text": " When <code>thickness &gt; 0</code> this function computes two sets of points, obtained as follows: the first set is obtained by taking the points computed in the <code>thickness &lt;= 0</code> case and shifting them by <code>thickness / 2</code> outward, in a direction perpendicular to the arc curve. The second set is the same, but shifted <code>thickness / 2</code> inward relative to the arc. The two sets of points are interleaved in the destination buffer (i.e. the first pair of points will be collinear with the arc center, the first point of the pair will be farther from the center than the second point; the next pair will also be collinear, but at a different angle and so on).  <p>The destination buffer dest is interpreted as a set of regularly spaced pairs of floats, each pair holding the coordinates of the corresponding point on the arc. The two floats in the pair are adjacent, and the distance (in bytes) between the addresses of the first float in two successive pairs is <code>stride</code>. For example, if you have a tightly packed array of floats with no spaces between pairs, then stride will be exactly <code>2 * sizeof (float)</code>.  <p>Example with <code>thickness &lt;= 0</code>: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   NumPoints = <span class=\"pascal_numeric\">4</span>; <span class=\"pascal_keyword\">VAR</span>   Points: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..NumPoints-<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> AL_FLOAT; <span class=\"pascal_keyword\">BEGIN</span>   al_calculate_arc (     Points,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>,			<span class=\"pascal_comment\">{ Center }</span>     <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_numeric\">10</span>,			<span class=\"pascal_comment\">{ Radii  }</span>     <span class=\"pascal_numeric\">0</span>, ALLEGRO_PI / <span class=\"pascal_numeric\">2</span>,		<span class=\"pascal_comment\">{ Angles }</span>     <span class=\"pascal_numeric\">0</span>   ); <span class=\"pascal_keyword\">END</span>;</pre>  <p> Example with <code>thickness &gt; 0</code>: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   NumPoints = <span class=\"pascal_numeric\">4</span>; <span class=\"pascal_keyword\">VAR</span>   Points: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..(NumPoints * <span class=\"pascal_numeric\">2</span>)-<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> AL_FLOAT; <span class=\"pascal_keyword\">BEGIN</span>   al_calculate_arc (     Points,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>,			<span class=\"pascal_comment\">{ Center }</span>     <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_numeric\">10</span>,			<span class=\"pascal_comment\">{ Radii  }</span>     <span class=\"pascal_numeric\">0</span>, ALLEGRO_PI / <span class=\"pascal_numeric\">2</span>,		<span class=\"pascal_comment\">{ Angles }</span>     <span class=\"pascal_numeric\">2</span>   ); <span class=\"pascal_keyword\">END</span>;</pre>  <p>              dest The destination buffer. cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). thickness Thickness of the arc.  dest The destination buffer. cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). thickness Thickness of the arc.", "tags": "", "loc": "al5primitives.html#al_calculate_arc"},
     {"title": "al5primitives.al_calculate_arc_ex", "text": "  <p>Example with <code>thickness &lt;= 0</code>: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   NumPoints = <span class=\"pascal_numeric\">4</span>; <span class=\"pascal_keyword\">VAR</span>   Points: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..NumPoints-<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> AL_FLOAT; <span class=\"pascal_keyword\">BEGIN</span>   al_calculate_arc_ex (     @points[<span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>],     <span class=\"pascal_numeric\">2</span> * sizeof (AL_FLOAT),     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>,			<span class=\"pascal_comment\">{ Center }</span>     <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_numeric\">10</span>,			<span class=\"pascal_comment\">{ Radii  }</span>     <span class=\"pascal_numeric\">0</span>, ALLEGRO_PI / <span class=\"pascal_numeric\">2</span>,		<span class=\"pascal_comment\">{ Angles }</span>     <span class=\"pascal_numeric\">0</span>,     NumPoints   ); <span class=\"pascal_keyword\">END</span>;</pre>  <p> Example with <code>thickness &gt; 0</code>: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   NumPoints = <span class=\"pascal_numeric\">4</span>; <span class=\"pascal_keyword\">VAR</span>   Points: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..(NumPoints * <span class=\"pascal_numeric\">2</span>)-<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>..1] <span class=\"pascal_keyword\">OF</span> AL_FLOAT; <span class=\"pascal_keyword\">BEGIN</span>   al_calculate_arc_ex (     @points[<span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>],     <span class=\"pascal_numeric\">2</span> * sizeof (AL_FLOAT),     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>,			<span class=\"pascal_comment\">{ Center }</span>     <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_numeric\">10</span>,			<span class=\"pascal_comment\">{ Radii  }</span>     <span class=\"pascal_numeric\">0</span>, ALLEGRO_PI / <span class=\"pascal_numeric\">2</span>,		<span class=\"pascal_comment\">{ Angles }</span>     <span class=\"pascal_numeric\">2</span>,     NumPoints   ); <span class=\"pascal_keyword\">END</span>;</pre>  <p>                dest The destination buffer. stride Distance (in bytes) between starts of successive pairs of points. cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). thickness Thickness of the arc. num_points The number of points to calculate.  dest The destination buffer. stride Distance (in bytes) between starts of successive pairs of points. cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). thickness Thickness of the arc. num_points The number of points to calculate.", "tags": "", "loc": "al5primitives.html#al_calculate_arc_ex"},
     {"title": "al5primitives.al_draw_circle", "text": "         cx X coordinate of the center of the circle. cy Y coordinate of the center of the circle. r Radius of the circle. color Color of the circle. thickness Thickness of the circle, pass &lt;= 0 to draw a hairline circle.  cx X coordinate of the center of the circle. cy Y coordinate of the center of the circle. r Radius of the circle. color Color of the circle. thickness Thickness of the circle, pass &lt;= 0 to draw a hairline circle.", "tags": "", "loc": "al5primitives.html#al_draw_circle"},
     {"title": "al5primitives.al_draw_ellipse", "text": "          cx X coordinate of the center of the ellipse. cy Y coordinate of the center of the ellipse. rx Horizontal radius of the ellipse. ry Vertical radius of the ellipse. color Color of the ellipse. thickness Thickness of the ellipse, pass &lt;= 0 to draw a hairline circle.  cx X coordinate of the center of the ellipse. cy Y coordinate of the center of the ellipse. rx Horizontal radius of the ellipse. ry Vertical radius of the ellipse. color Color of the ellipse. thickness Thickness of the ellipse, pass &lt;= 0 to draw a hairline circle.", "tags": "", "loc": "al5primitives.html#al_draw_ellipse"},
     {"title": "al5primitives.al_draw_arc", "text": "           cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. r Radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the arc. thickness Thickness of the circle, pass &lt;= 0 to draw a hairline circle.  cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. r Radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the arc. thickness Thickness of the circle, pass &lt;= 0 to draw a hairline circle.", "tags": "", "loc": "al5primitives.html#al_draw_arc"},
     {"title": "al5primitives.al_draw_elliptical_arc", "text": "            cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the arc. thickness Thickness of the arc, pass &lt;= 0 to draw a hairline circle.  cx X coordinate of the center of the arc. cy Y coordinate of the center of the arc. rx Horizontal radius of the arc. ry Vertical radius of the arc. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the arc. thickness Thickness of the arc, pass &lt;= 0 to draw a hairline circle.", "tags": "", "loc": "al5primitives.html#al_draw_elliptical_arc"},
     {"title": "al5primitives.al_draw_pieslice", "text": "          cx X coordinate of the center of the pieslice. cy Y coordinate of the center of the pieslice. r Radius of the pieslice. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the pieslice. thickness Thickness of the pieslice, pass &lt;= 0 to draw a hairline circle.  cx X coordinate of the center of the pieslice. cy Y coordinate of the center of the pieslice. r Radius of the pieslice. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the pieslice. thickness Thickness of the pieslice, pass &lt;= 0 to draw a hairline circle.", "tags": "", "loc": "al5primitives.html#al_draw_pieslice"},
     {"title": "al5primitives.al_calculate_spline", "text": " If <code>thickness &lt;= 0</code>, then num_segments of points are required in the destination, otherwise twice as many are needed. The destination buffer should consist of regularly spaced (by distance of <code>stride</code> bytes) doublets of floats, corresponding to x and y coordinates of the vertices.           dest The destination buffer. stride Distance (in bytes) between starts of successive pairs of coordinates. points An array of 4 pairs of coordinates of the 4 control points. thickness Thickness of the spline ribbon. num_segments The number of points to calculate.  dest The destination buffer. stride Distance (in bytes) between starts of successive pairs of coordinates. points An array of 4 pairs of coordinates of the 4 control points. thickness Thickness of the spline ribbon. num_segments The number of points to calculate.", "tags": "", "loc": "al5primitives.html#al_calculate_spline"},
     {"title": "al5primitives.al_draw_spline", "text": "      points An array of 4 pairs of coordinates of the 4 control points. color Color of the spline. thickness Thickness of the spline, pass &lt;= 0 to draw a hairline spline.  points An array of 4 pairs of coordinates of the 4 control points. color Color of the spline. thickness Thickness of the spline, pass &lt;= 0 to draw a hairline spline.", "tags": "", "loc": "al5primitives.html#al_draw_spline"},
     {"title": "al5primitives.al_calculate_ribbon", "text": " The ribbon will go through all of the passed points. If <code>thickness &lt;= 0</code>, then <code>num_segments</code> of points are required in the destination buffer, otherwise twice as many are needed. The destination and the points buffer should consist of regularly spaced doublets of floats, corresponding to x and y coordinates of the vertices.            dest Pointer to the destination buffer. dest_stride Distance (in bytes) between starts of successive pairs of coordinates in the destination buffer. points An array of pairs of coordinates for each point. points_stride Distance (in bytes) between starts of successive pairs of coordinates in the points buffer. thickness Thickness of the spline ribbon. num_segments The number of points to calculate.  dest Pointer to the destination buffer. dest_stride Distance (in bytes) between starts of successive pairs of coordinates in the destination buffer. points An array of pairs of coordinates for each point. points_stride Distance (in bytes) between starts of successive pairs of coordinates in the points buffer. thickness Thickness of the spline ribbon. num_segments The number of points to calculate.", "tags": "", "loc": "al5primitives.html#al_calculate_ribbon"},
     {"title": "al5primitives.al_draw_ribbon", "text": " The ribbon will go through all of the passed points. The points buffer should consist of regularly spaced doublets of floats, corresponding to x and y coordinates of the vertices.        points An array of coordinate pairs (x and y) for each point. points_stride Distance (in bytes) between starts of successive pairs of coordinates in the points buffer. color Color of the spline. thickness Thickness of the spline, pass &lt;= 0 to draw hairline spline. num_segments The number of segments.  points An array of coordinate pairs (x and y) for each point. points_stride Distance (in bytes) between starts of successive pairs of coordinates in the points buffer. color Color of the spline. thickness Thickness of the spline, pass &lt;= 0 to draw hairline spline. num_segments The number of segments.", "tags": "", "loc": "al5primitives.html#al_draw_ribbon"},
     {"title": "al5primitives.al_draw_filled_triangle", "text": "          x1 X coordinate of the first vertex. y1 Y coordinate of the first vertex. x2 X coordinate of the second vertex. y2 Y coordinate of the second vertex. x3 X coordinate of the third vertex. y3 Y coordinate of the third vertex. color Color of the triangle.  x1 X coordinate of the first vertex. y1 Y coordinate of the first vertex. x2 X coordinate of the second vertex. y2 Y coordinate of the second vertex. x3 X coordinate of the third vertex. y3 Y coordinate of the third vertex. color Color of the triangle.", "tags": "", "loc": "al5primitives.html#al_draw_filled_triangle"},
     {"title": "al5primitives.al_draw_filled_rectangle", "text": "         x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. color Color of the rectangle.  x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. color Color of the rectangle.", "tags": "", "loc": "al5primitives.html#al_draw_filled_rectangle"},
     {"title": "al5primitives.al_draw_filled_ellipse", "text": "         cx X coordinate of the center of the ellipse. cy Y coordinate of the center of the ellipse. rx Horizontal radius of the ellipse. ry Vertical radius of the ellipse. color Color of the ellipse.  cx X coordinate of the center of the ellipse. cy Y coordinate of the center of the ellipse. rx Horizontal radius of the ellipse. ry Vertical radius of the ellipse. color Color of the ellipse.", "tags": "", "loc": "al5primitives.html#al_draw_filled_ellipse"},
     {"title": "al5primitives.al_draw_filled_circle", "text": "        cx X coordinate of the center of the circle. cy Y coordinate of the center of the circle. r Radius of the circle. color Color of the circle.  cx X coordinate of the center of the circle. cy Y coordinate of the center of the circle. r Radius of the circle. color Color of the circle.", "tags": "", "loc": "al5primitives.html#al_draw_filled_circle"},
     {"title": "al5primitives.al_draw_filled_pieslice", "text": "         cx X coordinate of the center of the pieslice. cy Y coordinate of the center of the pieslice. r Radius of the pieslice. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the pieslice.  cx X coordinate of the center of the pieslice. cy Y coordinate of the center of the pieslice. r Radius of the pieslice. start_theta The initial angle from which the arc is calculated in radians. delta_theta Angular span of the arc in radians (pass a negative number to switch direction). color Color of the pieslice.", "tags": "", "loc": "al5primitives.html#al_draw_filled_pieslice"},
     {"title": "al5primitives.al_draw_filled_rounded_rectangle", "text": "           x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. rx Horizontal radius of the round. ry Vertical radius of the round. color Color of the rectangle.  x1 Left side of the rectangle. y1 Top side of the rectangle. x2 Right side of the rectangle. y2 Bottom side of the rectangle. rx Horizontal radius of the round. ry Vertical radius of the round. color Color of the rectangle.", "tags": "", "loc": "al5primitives.html#al_draw_filled_rounded_rectangle"},
     {"title": "al5primitives.al_draw_polyline", "text": "           vertices Interleaved array of (x, y) vertex coordinates. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. cap_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_CAP\">ALLEGRO_LINE_CAP</a> specifying how to render the end caps. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.  vertices Interleaved array of (x, y) vertex coordinates. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. cap_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_CAP\">ALLEGRO_LINE_CAP</a> specifying how to render the end caps. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.", "tags": "", "loc": "al5primitives.html#al_draw_polyline"},
     {"title": "al5primitives.al_draw_polyline_ex", "text": "  <p>The stride is normally <code>2 * sizeof (float)</code> but may be more if the vertex coordinates are in an array of some structure type, e.g. </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">TYPE</span>   VertexInfo = <span class=\"pascal_keyword\">RECORD</span>     x, y: AL_FLOAT;     id: INTEGER;   <span class=\"pascal_keyword\">END</span>;  <span class=\"pascal_keyword\">PROCEDURE</span> MyDraw (Verts: <span class=\"pascal_keyword\">ARRAY</span> <span class=\"pascal_keyword\">OF</span> VertexInfo; Clr: ALLEGRO_COLOR); <span class=\"pascal_keyword\">BEGIN</span>   al_draw_polyline_ex (     POINTER (@Verts[<span class=\"pascal_numeric\">0</span>]),     SIZEOF (VertexInfo),     Length (Verts),     ALLEGRO_LINE_JOIN_NONE,     ALLEGRO_LINE_CAP_NONE,     Clr,     <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>   ) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The stride may also be negative if the vertices are stored in reverse order.             vertices Interleaved array of (x, y) vertex coordinates. vertex_stride the number of bytes between pairs of vertices (the stride). vertex_count Number of vertices in the array. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. cap_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_CAP\">ALLEGRO_LINE_CAP</a> specifying how to render the end caps. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.  vertices Interleaved array of (x, y) vertex coordinates. vertex_stride the number of bytes between pairs of vertices (the stride). vertex_count Number of vertices in the array. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. cap_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_CAP\">ALLEGRO_LINE_CAP</a> specifying how to render the end caps. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.", "tags": "", "loc": "al5primitives.html#al_draw_polyline_ex"},
     {"title": "al5primitives.al_draw_polygon", "text": " This is the same as passing <code>ALLEGRO_LINE_CAP</code> to <a class=\"normal\" href=\"al5primitives.html#al_draw_polyline\">al_draw_polyline</a>.          vertex Interleaved array of (x, y) vertex coordinates. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.  vertex Interleaved array of (x, y) vertex coordinates. join_style Member of <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> specifying how to render the joins between line segments. color Color of the line. thickness Thickness of the line, pass &lt;= 0 to draw hairline lines. miter_limit Parameter for miter join style.", "tags": "", "loc": "al5primitives.html#al_draw_polygon"},
     {"title": "al5primitives.al_draw_filled_polygon", "text": " Simple means it does not have to be convex but must not be self-overlapping.  <p>When the y-axis is facing downwards (the usual), the coordinates must be ordered anti-clockwise.      vertices Interleaved array of (x, y) vertex coordinates. color Color of the filled polygon.  vertices Interleaved array of (x, y) vertex coordinates. color Color of the filled polygon.", "tags": "", "loc": "al5primitives.html#al_draw_filled_polygon"},
     {"title": "al5primitives.al_draw_filled_polygon_with_holes", "text": " The holes cannot touch or intersect with the outline of the filled polygon.  <p>All hole vertices must use the opposite order (clockwise with y down) of the polygon vertices. All hole vertices must be inside the main polygon and no hole may overlap the main polygon.  <p>For example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Vertices: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..13] <span class=\"pascal_keyword\">OF</span> AL_FLOAT = (       <span class=\"pascal_numeric\">0</span>,   <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_comment\">{ Filled polygon, upper left corner. }</span>       <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">100</span>, <span class=\"pascal_comment\">{ Filled polygon, lower left corner. }</span>     <span class=\"pascal_numeric\">100</span>, <span class=\"pascal_numeric\">100</span>, <span class=\"pascal_comment\">{ Filled polygon, lower right corner. }</span>     <span class=\"pascal_numeric\">100</span>,   <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_comment\">{ Filled polygon, upper right corner. }</span>      <span class=\"pascal_numeric\">10</span>,  <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_comment\">{ Hole, upper left. }</span>      <span class=\"pascal_numeric\">90</span>,  <span class=\"pascal_numeric\">10</span>, <span class=\"pascal_comment\">{ Hole, upper right. }</span>      <span class=\"pascal_numeric\">90</span>,  <span class=\"pascal_numeric\">90</span>  <span class=\"pascal_comment\">{ Hole, lower right. }</span>   );   VertexCounts: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..2] <span class=\"pascal_keyword\">OF</span> AL_INT = (     <span class=\"pascal_numeric\">4</span>, <span class=\"pascal_comment\">{ number of vertices for filled polygon. }</span>     <span class=\"pascal_numeric\">3</span>, <span class=\"pascal_comment\">{ number of vertices for hole. }</span>     <span class=\"pascal_numeric\">0</span>  <span class=\"pascal_comment\">{ terminator. }</span>   );</pre>  <p> There are 7 vertices: four for an outer square from (0, 0) to (100, 100) in anti-clockwise order, and three more for an inner triangle in clockwise order. The outer main polygon uses vertices 0 to 3 (inclusive) and the hole uses vertices 4 to 6 (inclusive).        vertices Interleaved array of (x, y) vertex coordinates for each of the polygons, including holes. vertex_counts Number of vertices for each polygon. The number of vertices in the filled polygon is given by <code>vertex_counts[0]</code> and must be at least three. Subsequent elements indicate the number of vertices in each hole. The array must be terminated with an element with value zero. color Color of the filled polygon.  vertices Interleaved array of (x, y) vertex coordinates for each of the polygons, including holes. vertex_counts Number of vertices for each polygon. The number of vertices in the filled polygon is given by <code>vertex_counts[0]</code> and must be at least three. Subsequent elements indicate the number of vertices in each hole. The array must be terminated with an element with value zero. color Color of the filled polygon.", "tags": "", "loc": "al5primitives.html#al_draw_filled_polygon_with_holes"},
     {"title": "al5primitives.ALLEGRO_PRIM_TYPE", "text": "         ALLEGRO_PRIM_LINE_LIST A list of lines, sequential pairs of vertices define disjointed lines.   ALLEGRO_PRIM_LINE_STRIP A strip of lines, sequential vertices define a strip of lines.   ALLEGRO_PRIM_LINE_LOOP Like a line strip, except at the end the first and the last vertices are also connected by a line.   ALLEGRO_PRIM_TRIANGLE_LIST A list of triangles, sequential triplets of vertices define disjointed triangles.   ALLEGRO_PRIM_TRIANGLE_STRIP A strip of triangles, sequential vertices define a strip of triangles.   ALLEGRO_PRIM_TRIANGLE_FAN A fan of triangles, all triangles share the first vertex.   ALLEGRO_PRIM_POINT_LIST A list of points, each vertex defines a point.   ALLEGRO_PRIM_NUM_TYPES   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_PRIM_TYPE"},
     {"title": "al5primitives.ALLEGRO_PRIM_ATTR", "text": "         ALLEGRO_PRIM_ATTR_NONE    ALLEGRO_PRIM_POSITION Position information, can be stored only in <code>ALLEGRO_PRIM_SHORT_2</code>, <code>ALLEGRO_PRIM_FLOAT_2</code> and <code>ALLEGRO_PRIM_FLOAT_3</code>.   ALLEGRO_PRIM_COLOR_ATTR Color information, stored in an <a class=\"normal\" href=\"Allegro5.ALLEGRO_COLOR.html\">ALLEGRO_COLOR</a>.  The storage field of <a class=\"normal\" href=\"al5primitives.ALLEGRO_VERTEX_ELEMENT.html\">ALLEGRO_VERTEX_ELEMENT</a> is ignored.  ALLEGRO_PRIM_TEX_COORD Texture coordinate information, can be stored only in <code>ALLEGRO_PRIM_FLOAT_2</code> and <code>ALLEGRO_PRIM_SHORT_2</code>.  These coordinates are normalized by the width and height of the texture, meaning that the bottom-right corner has texture coordinates of <code>(1, 1)</code>.  ALLEGRO_PRIM_TEX_COORD_PIXEL Texture coordinate information, can be stored only in <code>ALLEGRO_PRIM_FLOAT_2</code> and <code>ALLEGRO_PRIM_SHORT_2</code>.  These coordinates are measured in pixels.  ALLEGRO_PRIM_USER_ATTR A user specified attribute.  You can use any storage for this attribute. You may have at most 10 of these that you can specify by adding an index to the identifier, e.g. the first user attribute is <code>ALLEGRO_PRIM_USER_ATTR</code>, the second is <code>ALLEGRO_PRIM_USER_ATTR2</code> and so on.  <p>To access these custom attributes from GLSL shaders you need to declare attributes that follow this nomenclature: <code>user_attr_#</code> where <code>#</code> is the index of the attribute.  <p>To access these custom attributes from HLSL you need to declare a parameter with the following semantics: <code>TEXCOORD{# + 2}</code> where <code>#</code> is the index of the attribute. E.g. the first attribute can be accessed via TEXCOORD2, second via TEXCOORD3 and so on.  ALLEGRO_PRIM_USER_ATTR2    ALLEGRO_PRIM_USER_ATTR3    ALLEGRO_PRIM_USER_ATTR4    ALLEGRO_PRIM_USER_ATTR5    ALLEGRO_PRIM_USER_ATTR6    ALLEGRO_PRIM_USER_ATTR7    ALLEGRO_PRIM_USER_ATTR8    ALLEGRO_PRIM_USER_ATTR9    ALLEGRO_PRIM_USER_ATTR10    ALLEGRO_PRIM_ATTR_NUM   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_PRIM_ATTR"},
     {"title": "al5primitives.ALLEGRO_PRIM_STORAGE", "text": " Many of these can only be used for <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_PRIM_USER_ATTR\">ALLEGRO_PRIM_USER_ATTR</a> attributes and can only be accessed via shaders. Usually no matter what the storage is specified the attribute gets converted to single precision floating point when the shader is run. Despite that, it may be advantageous to use more dense storage formats (e.g. <code>ALLEGRO_PRIM_NORMALIZED_UBYTE_4</code> instead of <code>ALLEGRO_PRIM_FLOAT_4</code>) when bandwidth (amount of memory sent to the GPU) is an issue but precision is not.                  ALLEGRO_PRIM_FLOAT_2 A doublet of floats.   ALLEGRO_PRIM_FLOAT_3 A triplet of floats.   ALLEGRO_PRIM_SHORT_2 A doublet of shorts.   ALLEGRO_PRIM_FLOAT_1 A single float.   ALLEGRO_PRIM_FLOAT_4 A quad of floats.   ALLEGRO_PRIM_UBYTE_4 A quad of unsigned bytes.   ALLEGRO_PRIM_SHORT_4 A quad of shorts.   ALLEGRO_PRIM_NORMALIZED_UBYTE_4 A quad of unsigned bytes.  Before being sent to the shader, each component is divided by 255. Each component of the resultant float quad ranges between 0.0 and 1.0.  ALLEGRO_PRIM_NORMALIZED_SHORT_2 A doublet of shorts.  Before being sent to the shader, each component is divided by 32767. Each component of the resultant float doublet ranges between -1.0 and 1.0.  ALLEGRO_PRIM_NORMALIZED_SHORT_4 A quad of shorts.  Before being sent to the shader, each component is divided by 32767. Each component of the resultant float quad ranges between -1.0 and 1.0.  ALLEGRO_PRIM_NORMALIZED_USHORT_2 A doublet of unsigned shorts.  Before being sent to the shader, each component is divided by 65535. Each component of the resultant float doublet ranges between 0.0 and 1.0.  ALLEGRO_PRIM_NORMALIZED_USHORT_4 A quad of unsigned shorts.  Before being sent to the shader, each component is divided by 65535. Each component of the resultant float quad ranges between 0.0 and 1.0.  ALLEGRO_PRIM_HALF_FLOAT_2 A doublet of half-precision floats.  Note that this storage format is not supported on all platforms. <a class=\"normal\" href=\"al5primitives.html#al_create_vertex_decl\">al_create_vertex_decl</a> will return <code>Nil</code> if you use it on those platforms.  ALLEGRO_PRIM_HALF_FLOAT_4 A quad of half-precision floats.  Note that this storage format is not supported on all platforms. <a class=\"normal\" href=\"al5primitives.html#al_create_vertex_decl\">al_create_vertex_decl</a> will return <code>Nil</code> if you use it on those platforms. ", "tags": "", "loc": "al5primitives.html#ALLEGRO_PRIM_STORAGE"},
     {"title": "al5primitives.ALLEGRO_LINE_JOIN", "text": " <figure>  <img src=\"images/line_join.png\" width=\"100%\" title=\"Line joins\" alt=\"[-]\" />  <figcaption>ALLEGRO_LINE_JOIN styles.</figcaption> </figure> The maximum miter length (relative to the line width) can be specified as parameter to the polygon functions.    ALLEGRO_LINE_JOIN_NONE    ALLEGRO_LINE_JOIN_BEVEL    ALLEGRO_LINE_JOIN_ROUND    ALLEGRO_LINE_JOIN_MITER   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_LINE_JOIN"},
     {"title": "al5primitives.ALLEGRO_LINE_CAP", "text": " <figure>  <img src=\"images/line_cap.png\" width=\"100%\" title=\"Line cap\" alt=\"[-]\" />  <figcaption>ALLEGRO_LINE_CAP styles.</figcaption> </figure> <code>ALLEGRO_LINE_CAP_CLOSED</code> is different from the others - it causes the polygon to have no caps. (And the <a class=\"normal\" href=\"al5primitives.html#ALLEGRO_LINE_JOIN\">ALLEGRO_LINE_JOIN</a> style will determine how the vertex looks.)   ALLEGRO_LINE_CAP_NONE    ALLEGRO_LINE_CAP_SQUARE    ALLEGRO_LINE_CAP_ROUND    ALLEGRO_LINE_CAP_TRIANGLE    ALLEGRO_LINE_CAP_CLOSED   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_LINE_CAP"},
     {"title": "al5primitives.ALLEGRO_PRIM_BUFFER_FLAGS", "text": "        ALLEGRO_PRIM_BUFFER_NONE    ALLEGRO_PRIM_BUFFER_STREAM Hints to the driver that the buffer is written to often, but used only a few times per frame.   ALLEGRO_PRIM_BUFFER_STATIC Hints to the driver that the buffer is written to once and is used often.   ALLEGRO_PRIM_BUFFER_DYNAMIC Hints to the driver that the buffer is written to often and is used often.   ALLEGRO_PRIM_BUFFER_READWRITE Specifies that you want to be able read from this buffer.  By default this is disabled for performance. Some platforms (like OpenGL ES) do not support reading from vertex buffers, so if you pass this flag to <a class=\"normal\" href=\"al5primitives.html#al_create_vertex_buffer\">al_create_vertex_buffer</a> or <a class=\"normal\" href=\"al5primitives.html#al_create_index_buffer\">al_create_index_buffer</a> the call will fail. ", "tags": "", "loc": "al5primitives.html#ALLEGRO_PRIM_BUFFER_FLAGS"},
     {"title": "al5primitives.ALLEGRO_VERTEX_ELEMENTptr", "text": " ", "tags": "", "loc": "al5primitives.html#ALLEGRO_VERTEX_ELEMENTptr"},
     {"title": "al5primitives.ALLEGRO_VERTEX_DECLptr", "text": " This opaque structure is responsible for describing the format and layout of a user defined custom vertex. It is created and destroyed by specialized functions.    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_VERTEX_DECLptr"},
     {"title": "al5primitives.ALLEGRO_VERTEXptr", "text": " ", "tags": "", "loc": "al5primitives.html#ALLEGRO_VERTEXptr"},
     {"title": "al5primitives.ALLEGRO_VERTEX_BUFFERptr", "text": "   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_VERTEX_BUFFERptr"},
     {"title": "al5primitives.ALLEGRO_INDEX_BUFFERptr", "text": "   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_INDEX_BUFFERptr"},
     {"title": "al5primitives.ALLEGRO_EMIT_TRIANGLE_PROC", "text": "      a Index of the first triangle vertex. b Index of the first triangle vertex. c Index of the first triangle vertex. p Pointer to user data.  a Index of the first triangle vertex. b Index of the first triangle vertex. c Index of the first triangle vertex. p Pointer to user data.", "tags": "", "loc": "al5primitives.html#ALLEGRO_EMIT_TRIANGLE_PROC"},
     {"title": "al5primitives.ALLEGRO_INIT_TRIANGLE_PROC", "text": "      state Pointer to a user suplied struct. v1 First vertex of the triangle. v2 Second vertex of the triangle. v3 third vertex of the triangle.  state Pointer to a user suplied struct. v1 First vertex of the triangle. v2 Second vertex of the triangle. v3 third vertex of the triangle.", "tags": "", "loc": "al5primitives.html#ALLEGRO_INIT_TRIANGLE_PROC"},
     {"title": "al5primitives.ALLEGRO_FIRST_TRIANGLE_PROC", "text": "  <p>It is passed 4 parameters, the first two are the coordinates of the initial pixel drawn in the segment. The second two are the left minor and the left major steps, respectively. They represent the sizes of two steps taken by the rasterizer as it walks on the left side of the triangle. From then on, each step will either be classified as a minor or a major step, corresponding to the above values.    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_FIRST_TRIANGLE_PROC"},
     {"title": "al5primitives.ALLEGRO_DRAW_TRIANGLE_PROC", "text": "  <p>The function is expected to draw the scanline starting with a point specified by the first two parameters (<code>x1</code>, <code>y</code>) going to the right until it reaches the value of the third parameter (<code>x2</code>). All coordinates are inclusive.    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_DRAW_TRIANGLE_PROC"},
     {"title": "al5primitives.ALLEGRO_FIRST_LINE_PROC", "text": "  <p>It is passed the coordinates of this pixel, as well as the two vertices above. The passed vertices may have been altered by clipping.    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_FIRST_LINE_PROC"},
     {"title": "al5primitives.ALLEGRO_DRAW_LINE_PROC", "text": "  <p>The function is expected to draw the pixel at the coordinates passed to it.    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_DRAW_LINE_PROC"},
     {"title": "al5primitives.ALLEGRO_STEP_PROC", "text": "    ", "tags": "", "loc": "al5primitives.html#ALLEGRO_STEP_PROC"},
     {"title": "al5primitives.ALLEGRO_SPLINE_CONTROL_POINTS", "text": "   ", "tags": "", "loc": "al5primitives.html#ALLEGRO_SPLINE_CONTROL_POINTS"},
     {"title": "al5strings", "text": " Also implements Allegro's UNICODE support.  <p><b>About string manipulation</b>  <p>By default, Delphi RTL libraries defines <code>STRING</code> as <code>UNICODESTRING</code>. Since Allegro expects <code>ANSISTRING</code> this means you should use convert funcions as <code>UTFToString</code> and <code>UTF8Encode</code> to work properly, wich makes such operations non compatible with Free Pascal.  <p>This unit defines a collection of functions and procedures that works like RTL string manipulation ones (i.e. <code>SysUtils</code> and <code>Strings</code> unit) but using the <code>AL_STR</code> type, ensuring your code will work both Delphi and Free Pascal without changes. It includes a few conversion functions as well if you need them.   <p><b>About UTF-8 string routines</b>  <p>Some parts of the Allegro API, such as the font rountines, expect Unicode strings encoded in UTF-8. The UTF8 basic routines are provided to help you work with UTF-8 strings, however it does <i>not</i> mean you need to use them.  <p>Briefly, Unicode is a standard consisting of a large character set of over 100,000 characters, and rules, such as how to sort strings. A code point is the integer value of a character, but not all code points are characters, as some code points have other uses. Unlike legacy character sets, the set of code points is open ended and more are assigned with time.  <p>Clearly it is impossible to represent each code point with a 8-bit byte (limited to 256 code points) or even a 16-bit integer (limited to 65536 code points). It is possible to store code points in a 32-bit integers but it is space inefficient, and not actually that useful (at least, when handling the full complexity of Unicode; Allegro only does the very basics). There exist different Unicode Transformation Formats for encoding code points into smaller code units. The most important transformation formats are UTF-8 and UTF-16.  <p>UTF-8 is a <i>variable-length</i> encoding which encodes each code point to between one and four 8-bit bytes each. UTF-8 has many nice properties, but the main advantages are that it is backwards compatible with C strings, and ASCII characters (code points in the range 0-127) are encoded in UTF-8 exactly as they would be in ASCII.  <p>UTF-16 is another variable-length encoding, but encodes each code point to one or two 16-bit words each. It is, of course, not compatible with traditional C strings. Allegro does not generally use UTF-16 strings.  <p>Here is a diagram of the representation of the word &quot;ål&quot;, with a NUL terminator, in both UTF-8 and UTF-16.  <p></p>  <table class=\"table_tag\">   <tr class=\"head\">     <th><p>String</p></th>     <th><p>å</p></th>     <th><p>l</p></th>     <th><p>NUL</p></th>   </tr>   <tr class=\"odd\">     <td><p>Code points</p></td>     <td><p>U+00E5 (229)</p></td>     <td><p>U+006C (108)</p></td>     <td><p>U+0000 (0)</p></td>   </tr>   <tr class=\"even\">     <td><p>UTF-8 bytes</p></td>     <td><p>0xC3, 0xA5</p></td>     <td><p>0x6C</p></td>     <td><p>0x00</p></td>   </tr>   <tr class=\"odd\">     <td><p>UTF-16LE bytes</p></td>     <td><p>0xE5, 0x00</p></td>     <td><p>0x6C, 0x00</p></td>     <td><p>0x00, 0x00</p></td>   </tr> </table>  <p>  <p>You can see the aforementioned properties of UTF-8. The first code point U+00E5 (&quot;å&quot;) is outside of the ASCII range (0-127) so is encoded to multiple code units &ndash; it requires two bytes. U+006C (&quot;l&quot;) and U+0000 (NUL) both exist in the ASCII range so take exactly one byte each, as in a pure ASCII string. A zero byte never appears except to represent the NUL character, so many functions which expect C-style strings will work with UTF-8 strings without modification.  <p>On the other hand, UTF-16 represents each code point by either one or two 16-bit code units (two or four bytes). The representation of each 16-bit code unit depends on the byte order; here we have demonstrated little endian.  <p>Both UTF-8 and UTF-16 are self-synchronising. Starting from any offset within a string, it is efficient to find the beginning of the previous or next code point.  <p>Not all sequences of bytes or 16-bit words are valid UTF-8 and UTF-16 strings respectively. UTF-8 also has an additional problem of overlong forms, where a code point value is encoded using more bytes than is strictly necessary. This is invalid and needs to be guarded against.  <p>In the &quot;ustr&quot; functions, be careful whether a function takes code unit (byte) or code point indices. In general, all position parameters are in code unit offsets. This may be surprising, but if you think about it, it is required for good performance. (It also means some functions will work even if they do not contain UTF-8, since they only care about storing bytes, so you may actually store arbitrary data in the ALLEGRO_USTRs.)  <p>For actual text processing, where you want to specify positions with code point indices, you should use <a class=\"normal\" href=\"al5strings.html#al_ustr_offset\">al_ustr_offset</a> to find the code unit offset position. However, most of the time you would probably just work with byte offsets.  ", "tags": "", "loc": "al5strings.html"},
     {"title": "al5strings.al_string_to_str", "text": "    ", "tags": "", "loc": "al5strings.html#al_string_to_str"},
     {"title": "al5strings.al_string_to_str", "text": "    ", "tags": "", "loc": "al5strings.html#al_string_to_str"},
     {"title": "al5strings.al_string_to_str", "text": "    ", "tags": "", "loc": "al5strings.html#al_string_to_str"},
     {"title": "al5strings.al_str_to_string", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_string"},
     {"title": "al5strings.al_str_to_string", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_string"},
     {"title": "al5strings.al_str_to_shortstring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_shortstring"},
     {"title": "al5strings.al_str_to_shortstring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_shortstring"},
     {"title": "al5strings.al_str_to_ansistring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_ansistring"},
     {"title": "al5strings.al_str_to_ansistring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_ansistring"},
     {"title": "al5strings.al_str_to_unicodestring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_unicodestring"},
     {"title": "al5strings.al_str_to_unicodestring", "text": "    ", "tags": "", "loc": "al5strings.html#al_str_to_unicodestring"},
     {"title": "al5strings.al_str_format", "text": "  <p>It works exactly like RTL <code>SysUtils.Format</code> but using <a class=\"normal\" href=\"al5Base.html#AL_STR\">AL_STR</a> instead of <code>STRING</code>.    ", "tags": "", "loc": "al5strings.html#al_str_format"},
     {"title": "al5strings.al_ustr_new", "text": " The string must eventually be freed with <a class=\"normal\" href=\"al5strings.html#al_ustr_free\">al_ustr_free</a>.       ", "tags": "", "loc": "al5strings.html#al_ustr_new"},
     {"title": "al5strings.al_ustr_new_from_buffer", "text": " The string must eventually be freed with <a class=\"normal\" href=\"al5strings.html#al_ustr_free\">al_ustr_free</a>.     ", "tags": "", "loc": "al5strings.html#al_ustr_new_from_buffer"},
     {"title": "al5strings.al_ustr_free", "text": " Does nothing if the argument is <code>Nil</code>.      ", "tags": "", "loc": "al5strings.html#al_ustr_free"},
     {"title": "al5strings.al_cstr", "text": " This pointer will only be valid while the <code>ALLEGRO_USTR</code> object is not modified and not destroyed. The pointer may be passed to functions expecting C-style strings, with the following caveats:</p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_USTR</code>s are allowed to contain embedded <code>NUL</code> (<code>$00</code>) bytes. That means <code>al_ustr_size (u)</code> and <code>Length (al_cstr (u))</code> may not agree.</p></li>   <li><p>An <code>ALLEGRO_USTR</code> may be created in such a way that it is not <code>NUL</code> terminated. A string which is dynamically allocated will always be <code>NUL</code> terminated, but a string which references the middle of another string or region of memory will not be <code>NUL</code> terminated.</p></li>   <li><p>If the <code>ALLEGRO_USTR</code> references another string, the returned C string will point into the referenced string. Again, no <code>NUL</code> terminator will be added to the referenced string.</p></li> </ul>  <p>       ", "tags": "", "loc": "al5strings.html#al_cstr"},
     {"title": "al5strings.al_ustr_to_buffer", "text": " The result will always be <code>NUL</code> terminated, so a maximum of <code>size - 1</code> bytes will be copied.      ", "tags": "", "loc": "al5strings.html#al_ustr_to_buffer"},
     {"title": "al5strings.al_cstr_dup", "text": " Any embedded <code>NUL</code> bytes will still be presented in the returned string. The new string must eventually be freed with <code>al_free</code>.  <p>If an error occurs <code>Nil</code> is returned.       ", "tags": "", "loc": "al5strings.html#al_cstr_dup"},
     {"title": "al5strings.al_ustr_dup", "text": " The new string will need to be freed with <code>al_ustr_free</code>.      ", "tags": "", "loc": "al5strings.html#al_ustr_dup"},
     {"title": "al5strings.al_ustr_dup_substr", "text": " The new string will be <code>NUL</code> terminated and will need to be freed with <code>al_ustr_free</code>.  <p>If necessary, use <a class=\"normal\" href=\"al5strings.html#al_ustr_offset\">al_ustr_offset</a> to find the byte offsets for a given code point that you are interested in.    <p><b>Note</b>  <p>This is used because the way the C language works. I didn't test if Pascal do need this kind of stuff. Future versions of Allegro.pas would not include this function, so don't use it unless your really need to (and tell me if you really need it to remove this warning from documentation).    ", "tags": "", "loc": "al5strings.html#al_ustr_dup_substr"},
     {"title": "al5strings.al_ustr_empty_string", "text": " The string is read only and must not be freed.    ", "tags": "", "loc": "al5strings.html#al_ustr_empty_string"},
     {"title": "al5strings.al_ref_cstr", "text": " The information about the string (e.g. its size) is stored in the <code>info</code> parameter. The string will not have any other storage allocated of its own, so if you allocate the info structure on the stack then no explicit &quot;free&quot; operation is required.  <p>The string is valid until the underlying C string disappears.  <p>Example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Info: ALLEGRO_USTR_INFO;   us: ALLEGRO_USTRptr; <span class=\"pascal_keyword\">BEGIN</span>   us := al_ref_cstr (Info, <span class=\"pascal_string\">'my string'</span>) <span class=\"pascal_keyword\">END</span>;</pre>  <p>      ", "tags": "", "loc": "al5strings.html#al_ref_cstr"},
     {"title": "al5strings.al_ref_buffer", "text": " The size of the buffer is given in bytes. You can use it to reference only part of a string or an arbitrary region of memory.  <p>The string is valid while the underlying memory buffer is valid.      ", "tags": "", "loc": "al5strings.html#al_ref_buffer"},
     {"title": "al5strings.al_ref_ustr", "text": " The information about the string (e.g. its size) is stored in the structure pointed to by the <code>info</code> parameter. The new string will not have any other storage allocated of its own, so if you allocate the info structure on the stack then no explicit &quot;free&quot; operation is required.  <p>The referenced interval is <code>[start_pos, end_pos)</code>. Both are byte offsets.  <p>The string is valid until the underlying string is modified or destroyed.  <p>If you need a range of code-points instead of bytes, use <a class=\"normal\" href=\"al5strings.html#al_ustr_offset\">al_ustr_offset</a> to find the byte offsets.      ", "tags": "", "loc": "al5strings.html#al_ref_ustr"},
     {"title": "al5strings.al_ustr_size", "text": " This is equal to the number of code points in the string if the string is empty or contains only 7-bit ASCII characters.     ", "tags": "", "loc": "al5strings.html#al_ustr_size"},
     {"title": "al5strings.al_ustr_length", "text": "      ", "tags": "", "loc": "al5strings.html#al_ustr_length"},
     {"title": "al5strings.al_ustr_offset", "text": " A zero index parameter will return the first character of the string. If <code>index</code> is negative, it counts backward from the end of the string, so an index of -1 will return an offset to the last code point.  <p>If the <code>index</code> is past the end of the string, returns the offset of the end of the string.     ", "tags": "", "loc": "al5strings.html#al_ustr_offset"},
     {"title": "al5strings.al_ustr_next", "text": " <code>aPos</code> does not have to be at the beginning of a code point.  <p>This function just looks for an appropriate byte; it doesn't check if found offset is the beginning of a valid code point. If you are working with possibly invalid UTF-8 strings then it could skip over some invalid bytes.     <code>True</code> on success, and <code>aPos</code> will be updated to the found offset. Otherwise returns <code>False</code> if <code>aPos</code> was already at the end of the string, and <code>aPos</code> is unmodified. ", "tags": "", "loc": "al5strings.html#al_ustr_next"},
     {"title": "al5strings.al_ustr_prev", "text": " <code>aPos</code> does not have to be at the beginning of a code point.  <p>This function just looks for an appropriate byte; it doesn't check if found offset is the beginning of a valid code point. If you are working with possibly invalid UTF-8 strings then it could skip over some invalid bytes.     <code>True</code> on success, and <code>aPos</code> will be updated to the found offset. Otherwise returns <code>False</code> if <code>aPos</code> was already at the end of the string, and <code>aPos</code> is unmodified. ", "tags": "", "loc": "al5strings.html#al_ustr_prev"},
     {"title": "al5strings.al_ustr_insert_chr", "text": " <code>aPos</code> cannot be less than 0. If <code>aPos</code> is past the end of us then the space between the end of the string and <code>aPos</code> will be padded with <code>NUL</code> (<code>'\\0'</code>) bytes.      The number of bytes inserted, or 0 on error. ", "tags": "", "loc": "al5strings.html#al_ustr_insert_chr"},
     {"title": "al5strings.al_ustr_remove_chr", "text": "  <p>Use <a class=\"normal\" href=\"al5strings.html#al_ustr_offset\">al_ustr_offset</a> to find the byte offset for a code-points offset.      <code>True</code> on success. If <code>apos</code> is out of range or <code>apos</code> is not the beginning of a valid code point, returns <code>False</code> leaving the string unmodified. ", "tags": "", "loc": "al5strings.html#al_ustr_remove_chr"},
     {"title": "al5strings.al_ustr_assign", "text": "     <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5strings.html#al_ustr_assign"},
     {"title": "al5strings.al_ustr_assign_cstr", "text": "     <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "al5strings.html#al_ustr_assign_cstr"},
     {"title": "al5strings.al_ustr_equal", "text": " This function is more efficient than <a class=\"normal\" href=\"al5strings.html#al_ustr_compare\">al_ustr_compare</a> so is preferable if ordering is not important.     ", "tags": "", "loc": "al5strings.html#al_ustr_equal"},
     {"title": "al5strings.al_ustr_compare", "text": " It returns zero if the strings are equal, a positive number if <code>us1</code> comes after <code>us2</code>, else a negative number.  <p>This does not take into account locale-specific sorting rules. For that you will need to use another library.      ", "tags": "", "loc": "al5strings.html#al_ustr_compare"},
     {"title": "al5strings.al_ustr_ncompare", "text": " It returns zero if the strings are equal, a positive number if <code>us1</code> comes after <code>us2</code>, else a negative number.  <p>This does not take into account locale-specific sorting rules. For that you will need to use another library.      ", "tags": "", "loc": "al5strings.html#al_ustr_ncompare"},
     {"title": "al5strings.al_utf8_width", "text": " This is between 1 and 4 bytes for legal code point values. Otherwise returns 0.    ", "tags": "", "loc": "al5strings.html#al_utf8_width"},
     {"title": "al5strings.ALLEGRO_USTRptr", "text": " ", "tags": "", "loc": "al5strings.html#ALLEGRO_USTRptr"},
     {"title": "al5strings.ALLEGRO_USTR", "text": " <code>ALLEGRO_USTR</code>s normally contain UTF-8 encoded strings, but they may be used to hold any byte sequences, including <code>Nil</code>. ", "tags": "", "loc": "al5strings.html#ALLEGRO_USTR"},
     {"title": "al5strings.ALLEGRO_USTR_INFOptr", "text": " ", "tags": "", "loc": "al5strings.html#ALLEGRO_USTR_INFOptr"},
     {"title": "al5strings.ALLEGRO_USTR_INFO", "text": "    ", "tags": "", "loc": "al5strings.html#ALLEGRO_USTR_INFO"},
     {"title": "al5ttf", "text": " ", "tags": "", "loc": "al5ttf.html"},
     {"title": "al5ttf.al_init_ttf_addon", "text": " Call this after <a class=\"normal\" href=\"al5font.html#al_init_font_addon\">al_init_font_addon</a> to make <a class=\"normal\" href=\"al5font.html#al_load_font\">al_load_font</a> recognize &quot;.ttf&quot; and other formats supported by <a class=\"normal\" href=\"al5ttf.html#al_load_ttf_font\">al_load_ttf_font</a>.    <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "al5ttf.html#al_init_ttf_addon"},
     {"title": "al5ttf.al_shutdown_ttf_addon", "text": " You normally don't need to call this.    ", "tags": "", "loc": "al5ttf.html#al_shutdown_ttf_addon"},
     {"title": "al5ttf.al_get_allegro_ttf_version", "text": "    ", "tags": "", "loc": "al5ttf.html#al_get_allegro_ttf_version"},
     {"title": "al5ttf.al_load_ttf_font", "text": " Quoting from the FreeType FAQ this means support for many different font formats:  <p><i>TrueType, OpenType, Type1, CID, CFF, Windows FON/FNT, X11 PCF, and others</i>  <p>The <code>size</code> parameter determines the size the font will be rendered at, specified in pixels. The standard font size is measured in <i>units per EM</i>, if you instead want to specify the size as the total height of glyphs in pixels, pass it as a negative value.  <p><b>Note</b>  <p>If you want to display text at multiple sizes, load the font multiple times with different size parameters.  <p>The following flags are supported: </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_TTF_NO_KERNING</code> - Do not use any kerning even if the font file supports it.</p></li>   <li><p><code>ALLEGRO_TTF_MONOCHROME</code> - Load as a monochrome font (which means no anti-aliasing of the font is done).</p></li>   <li><p><code>ALLEGRO_TTF_NO_AUTOHINT</code> - Disable the Auto Hinter which is enabled by default in newer versions of FreeType.</p></li> </ul>  <p>      ", "tags": "", "loc": "al5ttf.html#al_load_ttf_font"},
     {"title": "al5ttf.al_load_ttf_font_f", "text": " The <code>filename</code> is only used to find possible additional files next to a font file.  <p><b>Note</b>  <p>The file handle is owned by the returned <code>ALLEGRO_FONTptr</code> object and must not be freed by the caller, as FreeType expects to be able to read from it at a later time.    ", "tags": "", "loc": "al5ttf.html#al_load_ttf_font_f"},
     {"title": "al5ttf.al_load_ttf_font_stretch", "text": "  <p>If the height is a positive value, and the width zero or positive, then font will be stretched according to those parameters. The width must not be negative if the height is positive.  <p>As with <a class=\"normal\" href=\"al5ttf.html#al_load_ttf_font\">al_load_ttf_font</a>, the height may be a negative value to specify the total height in pixels. Then the width must also be a negative value, or zero.      <code>Nil</code> if the height is positive while width is negative, or if the height is negative while the width is positive. ", "tags": "", "loc": "al5ttf.html#al_load_ttf_font_stretch"},
     {"title": "al5ttf.al_load_ttf_font_stretch_f", "text": " The <code>filename</code> is only used to find possible additional files next to a font file.  <p><b>Note</b>  <p>The file handle is owned by the returned <code>ALLEGRO_FONTptr</code> object and must not be freed by the caller, as FreeType expects to be able to read from it at a later time.     ", "tags": "", "loc": "al5ttf.html#al_load_ttf_font_stretch_f"},
     {"title": "al5video", "text": "  <p>Currently we have an Ogg backend (Theora + Vorbis). See <a  href=\"http://xiph.org/\">http://xiph.org/</a> for installation instructions, licensing information and supported video formats.. ", "tags": "", "loc": "al5video.html"},
     {"title": "al5video.ALLEGRO_EVENT_VIDEO_FRAME_SHOW", "text": " Once you receive this event, you can draw the current frame (as returned by <a class=\"normal\" href=\"al5video.html#al_get_video_frame\">al_get_video_frame</a>). <code>al_get_video_frame</code> will continue returning the same frame until the next <code>ALLEGRO_EVENT_VIDEO_FRAME_SHOW</code> is sent.  <p><code>user.data1</code> will contain a pointer to the video which generated the event. ", "tags": "", "loc": "al5video.html#ALLEGRO_EVENT_VIDEO_FRAME_SHOW"},
     {"title": "al5video.ALLEGRO_EVENT_VIDEO_FINISHED", "text": " Depending on the backend, it may be possible to seek to an earlier part of the video and set the video to play to resume playback.  <p><code>user.data1</code> will contain a pointer to the video which generated the event. ", "tags": "", "loc": "al5video.html#ALLEGRO_EVENT_VIDEO_FINISHED"},
     {"title": "al5video.al_init_video_addon", "text": "    ", "tags": "", "loc": "al5video.html#al_init_video_addon"},
     {"title": "al5video.al_shutdown_video_addon", "text": " This is done automatically at program exit, but can be called any time the user wishes as well.    ", "tags": "", "loc": "al5video.html#al_shutdown_video_addon"},
     {"title": "al5video.al_get_allegro_video_version", "text": "    ", "tags": "", "loc": "al5video.html#al_get_allegro_video_version"},
     {"title": "al5video.al_open_video", "text": " This does not start streaming yet but reads the meta info so you can query e.g. the size or audio rate.      ", "tags": "", "loc": "al5video.html#al_open_video"},
     {"title": "al5video.al_close_video", "text": " The video pointer is invalid after the function returns.     ", "tags": "", "loc": "al5video.html#al_close_video"},
     {"title": "al5video.al_start_video", "text": "        ", "tags": "", "loc": "al5video.html#al_start_video"},
     {"title": "al5video.al_start_video_with_voice", "text": "    ", "tags": "", "loc": "al5video.html#al_start_video_with_voice"},
     {"title": "al5video.al_get_video_event_source", "text": " The possible events are <a class=\"normal\" href=\"al5video.html#ALLEGRO_EVENT_VIDEO_FRAME_SHOW\">ALLEGRO_EVENT_VIDEO_FRAME_SHOW</a> and <a class=\"normal\" href=\"al5video.html#ALLEGRO_EVENT_VIDEO_FINISHED\">ALLEGRO_EVENT_VIDEO_FINISHED</a>.    ", "tags": "", "loc": "al5video.html#al_get_video_event_source"},
     {"title": "al5video.al_set_video_playing", "text": "     ", "tags": "", "loc": "al5video.html#al_set_video_playing"},
     {"title": "al5video.al_is_video_playing", "text": "    ", "tags": "", "loc": "al5video.html#al_is_video_playing"},
     {"title": "al5video.al_get_video_audio_rate", "text": "    ", "tags": "", "loc": "al5video.html#al_get_video_audio_rate"},
     {"title": "al5video.al_get_video_fps", "text": " Often this will not be an integer value.    ", "tags": "", "loc": "al5video.html#al_get_video_fps"},
     {"title": "al5video.al_get_video_scaled_width", "text": " Videos often do not use square pixels, so this will may return a value larger than the width of the frame bitmap.     ", "tags": "", "loc": "al5video.html#al_get_video_scaled_width"},
     {"title": "al5video.al_get_video_scaled_height", "text": " Videos often do not use square pixels, so this will may return a value larger than the height of the frame bitmap.     ", "tags": "", "loc": "al5video.html#al_get_video_scaled_height"},
     {"title": "al5video.al_get_video_frame", "text": " The bitmap is owned by the video so do not attempt to free it. The bitmap will stay valid until the next call to <code>al_get_video_frame</code>.  <p>Videos often do not use square pixels so the recommended way to draw a video frame would be using code like this: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">CONST</span>   Scale: <span class=\"pascal_float\">1.0</span>; <span class=\"pascal_comment\">{ Adjust this to fit your target bitmap dimensions. }</span> <span class=\"pascal_keyword\">VAR</span>   Frame: ALLEGRO_BITMAPptr;   sw, sh, dw, dh: REAL; <span class=\"pascal_keyword\">BEGIN</span>   frame = al_get_video_frame (Video);   sw = al_get_bitmap_width (Frame);   sh = al_get_bitmap_height (Frame);   dw = Scale * al_get_video_scaled_width (Video);   dh = Scale * al_get_video_scaled_height (Video);   al_draw_scaled_bitmap (Frame, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, sw, sh, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, dw, dh, <span class=\"pascal_numeric\">0</span>); <span class=\"pascal_keyword\">END</span>;</pre>  <p>      ", "tags": "", "loc": "al5video.html#al_get_video_frame"},
     {"title": "al5video.al_get_video_position", "text": " The parameter is one of the <a class=\"normal\" href=\"al5video.html#ALLEGRO_VIDEO_POSITION_TYPE\">ALLEGRO_VIDEO_POSITION_TYPE</a> constants.    ", "tags": "", "loc": "al5video.html#al_get_video_position"},
     {"title": "al5video.al_seek_video", "text": " Currently only seeking to the beginning of the video is supported.    ", "tags": "", "loc": "al5video.html#al_seek_video"},
     {"title": "al5video.ALLEGRO_VIDEO_POSITION_TYPE", "text": " If these get out of sync, audio and video may be out of sync in the display of the video.     ALLEGRO_VIDEO_POSITION_ACTUAL The amount of time the video has been playing.  If the video has audio then this value can be ahead of ALLEGRO_VIDEO_POSITION_VIDEO_DECODE when video decoding lags.  ALLEGRO_VIDEO_POSITION_VIDEO_DECODE The amount of video that has been decoded.  This may lag behind the &quot;actual&quot; and audio positions if decoding is slower than realtime.  ALLEGRO_VIDEO_POSITION_AUDIO_DECODE The amount of audio that has been decoded.  This may be the same as ALLEGRO_VIDEO_POSITION_ACTUAL if audio decode is driving the position, which is common to keep audio and video in sync. ", "tags": "", "loc": "al5video.html#ALLEGRO_VIDEO_POSITION_TYPE"},
     {"title": "al5video.ALLEGRO_VIDEOptr", "text": " ", "tags": "", "loc": "al5video.html#ALLEGRO_VIDEOptr"},
     {"title": "Allegro5", "text": "  <p>This unit defines core functions, procedures and data types, that aren't in add-ons.  <p><b>See also:</b> <a class=\"normal\" href=\"introduction.html#getst\">Getting started</a> ", "tags": "", "loc": "Allegro5.html"},
     {"title": "Allegro5.ALLEGRO_TIMEOUT", "text": "  <p>The size of the structure is known so it can be statically allocated. The contents are private.  ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMEOUT.html"},
     {"title": "Allegro5.ALLEGRO_COLOR", "text": " Use <a class=\"normal\" href=\"Allegro5.html#al_map_rgb\">al_map_rgb</a> et al. and <a class=\"normal\" href=\"Allegro5.html#al_unmap_rgb\">al_unmap_rgb</a> et al. to translate from and to various color representations. ", "tags": "", "loc": "Allegro5.ALLEGRO_COLOR.html"},
     {"title": "Allegro5.ALLEGRO_COLOR.r", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_COLOR.html#r"},
     {"title": "Allegro5.ALLEGRO_COLOR.g", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_COLOR.html#g"},
     {"title": "Allegro5.ALLEGRO_COLOR.b", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_COLOR.html#b"},
     {"title": "Allegro5.ALLEGRO_COLOR.a", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_COLOR.html#a"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE", "text": " See the full discussion in <a class=\"normal\" href=\"Allegro5.html#al_set_new_file_interface\">al_set_new_file_interface</a>.  <p>The <code>fi_open</code> function must allocate memory for whatever userdata structure it needs. The pointer to that memory must be returned; it will then be associated with the file. The other functions can access that data by calling <a class=\"normal\" href=\"Allegro5.html#al_get_file_userdata\">al_get_file_userdata</a> on the file handle. If <code>fi_open</code> returns <code>Nil</code> then <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a> will also return <code>Nil</code>.  <p>The <code>fi_fclose</code> function must clean up and free the userdata, but Allegro will free the <code>ALLEGRO_FILEptr</code> handle.  <p>If <code>fi_fungetc</code> is <code>Nil</code>, then Allegro's default implementation of a 16 char long buffer will be used.    ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_open", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_open"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fclose", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fclose"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fread", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fread"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fwrite", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fwrite"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fflush", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fflush"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_ftell", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_ftell"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fseek", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fseek"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_feof", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_feof"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_ferror", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_ferror"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_ferrmsg", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_ferrmsg"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fclearerr", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fclearerr"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fungetc", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fungetc"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACE.fi_fsize", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_FILE_INTERFACE.html#fi_fsize"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGION", "text": " The <code>ALLEGRO_LOCKED_REGION</code> structure represents the locked region of the bitmap. This call will work with any bitmap, including memory bitmaps.         ", "tags": "", "loc": "Allegro5.ALLEGRO_LOCKED_REGION.html"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGION.data", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_LOCKED_REGION.html#data"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGION.format", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_LOCKED_REGION.html#format"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGION.pitch", "text": " The pitch may be greater than <code>width * pixel_size</code> due to padding; this is not uncommon. It is also not uncommon for the pitch to be negative (the bitmap may be upside down). For blocked bitmaps, 'row' refers to the row of blocks, not of pixels. ", "tags": "", "loc": "Allegro5.ALLEGRO_LOCKED_REGION.html#pitch"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGION.pixel_size", "text": " For most formats (and historically, this used to be true for all formats), this is just the size of a single pixel, but for blocked pixel formats this value is different. ", "tags": "", "loc": "Allegro5.ALLEGRO_LOCKED_REGION.html#pixel_size"},
     {"title": "Allegro5.ALLEGRO_EVENT_SOURCE", "text": " For example, an <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_DISPLAYptr\">ALLEGRO_DISPLAYptr</a> can generate events, and you can get the <code>ALLEGRO_EVENT_SOURCE</code> pointer from an <code>ALLEGRO_DISPLAYptr</code> with <a class=\"normal\" href=\"Allegro5.html#al_get_display_event_source\">al_get_display_event_source</a>.  <p>You may create your own &quot;user&quot; event sources that emit custom events.    ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT_SOURCE.html"},
     {"title": "Allegro5.ALLEGRO_ANY_EVENT", "text": "  ", "tags": "", "loc": "Allegro5.ALLEGRO_ANY_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_ANY_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_ANY_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_ANY_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_ANY_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_ANY_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_ANY_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT", "text": "      ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.x", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#x"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.y", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#y"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.width", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#width"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.height", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#height"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_EVENT.orientation", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_EVENT.html#orientation"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT", "text": "    ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.id", "text": " This is not the same as the event source. ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#id"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.stick", "text": " Axes on a joystick are grouped into &quot;sticks&quot;. ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#stick"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.axis", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#axis"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.pos", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#pos"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_EVENT.button", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_EVENT.html#button"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT", "text": "    ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.display", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#display"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.keycode", "text": " See the <a class=\"normal\" href=\"introduction.html#keyboard\">Keyboard</a> section for the list of <code>ALLEGRO_KEY_* </code> constants. ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#keycode"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.unichar", "text": " This may be zero or negative if the event was generated for a non-visible &quot;character&quot;, such as an arrow or Function key. In that case you can act upon the keycode field.  <p>Some special keys will set the unichar field to their standard ASCII values: Tab=9, Return=13, Escape=27. In addition if you press the Control key together with A to Z the unichar field will have the values 1 to 26. For example Ctrl-A will set unichar to 1 and Ctrl-H will set it to 8.  <p>As of Allegro 5.0.2 there are some inconsistencies in the treatment of Backspace (8 or 127) and Delete (127 or 0) keys on different platforms. These can be worked around by checking the keycode field. ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#unichar"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.modifiers", "text": " See <a class=\"normal\" href=\"introduction.html#keyboard\">modifier flags</a> for the constants. ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#modifiers"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_EVENT.frepeat", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_EVENT.html#frepeat"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT", "text": "          ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.display", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#display"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.x", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#x"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.y", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#y"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.z", "text": " This usually means the vertical axis of a mouse wheel, where up is positive and down is negative. ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#z"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.w", "text": " This usually means the horizontal axis of a mouse wheel. ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#w"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.dx", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#dx"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.dy", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#dy"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.dz", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#dz"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.dw", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#dw"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.button", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#button"},
     {"title": "Allegro5.ALLEGRO_MOUSE_EVENT.pressure", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_EVENT.html#pressure"},
     {"title": "Allegro5.ALLEGRO_TIMER_EVENT", "text": "  ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMER_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_TIMER_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMER_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_TIMER_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMER_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_TIMER_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMER_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_TIMER_EVENT.count", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TIMER_EVENT.html#count"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT", "text": "   ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.display", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#display"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.id", "text": " If supported by the device it will stay the same for events from the same finger until the touch ends. ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#id"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.x", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#x"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.y", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#y"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.dx", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#dx"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.dy", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#dy"},
     {"title": "Allegro5.ALLEGRO_TOUCH_EVENT.primary", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TOUCH_EVENT.html#primary"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT", "text": " These are the public fields: </p>  <pre class=\"longcode\"> source: ALLEGRO_EVENT_SOURCE; data1: AL_DATA_INTPTR_T; data2: AL_DATA_INTPTR_T; data3: AL_DATA_INTPTR_T; data4: AL_DATA_INTPTR_T;</pre>  <p> Like all other event types this structure is a part of the <a class=\"normal\" href=\"Allegro5.ALLEGRO_EVENT.html\">ALLEGRO_EVENT</a> union. To access the fields in an <code>ALLEGRO_EVENT</code> variable <code>ev</code>, you would use: </p>  <pre class=\"preformatted\"> ev.user.source ev.user.data1 ev.user.data2 ev.user.data3 ev.user.data4</pre>  <p> To create a new user event you would do this: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   MyEventSource: ALLEGRO_EVENT_SOURCE;   MyEvent: ALLEGRO_EVENT;   SomeVar: REAL; <span class=\"pascal_keyword\">BEGIN</span>   al_init_user_event_source (MyEventSource);   MyEvent.user.ftype := ALLEGRO_GET_EVENT_TYPE (<span class=\"pascal_string\">'MINE'</span>);   MyEvent.user.data1.int_value := <span class=\"pascal_numeric\">1</span>;   MyEvent.user.data2.ptr_value := @SomeVar;   al_emit_user_event (MyEventSource, MyEvent, <span class=\"pascal_keyword\">NIL</span>) <span class=\"pascal_keyword\">END</span>;</pre>  <p> Event type identifiers for user events are assigned by the user. Please see the documentation for <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_GET_EVENT_TYPE\">ALLEGRO_GET_EVENT_TYPE</a> for the rules you should follow when assigning identifiers.    ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.source", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#source"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.timestamp", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#timestamp"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.data1", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#data1"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.data2", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#data2"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.data3", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#data3"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT.data4", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_USER_EVENT.html#data4"},
     {"title": "Allegro5.ALLEGRO_EVENT", "text": " it is an object large enough to hold the data of any event type. All events have the following fields in common: </p>  <ul class=\"paragraph_spacing\">   <li><p><code><b>ftype (<a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TYPE\">ALLEGRO_EVENT_TYPE</a>)</b></code> Indicates the type of event.</p></li>   <li><p><code><b>any.source (ALLEGRO_EVENT_SOURCEptr)</b></code> The event source which generated the event.</p></li>   <li><p><code><b>any.timestamp (DOUBLE)</b></code> When the event was generated.</p></li> </ul>  <p> By examining the type field you can then access type-specific fields. The <code>any.source</code> field tells you which event source generated that particular event. The <code>any.timestamp</code> field tells you when the event was generated. The time is referenced to the same starting point as <a class=\"normal\" href=\"Allegro5.html#al_get_time\">al_get_time</a>.  <p>Each event is of one of the following types, with the usable fields given. </p>  <ul class=\"paragraph_spacing\">   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_JOYSTICK_AXIS\">ALLEGRO_EVENT_JOYSTICK_AXIS</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN\">ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_JOYSTICK_BUTTON_UP\">ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_JOYSTICK_CONFIGURATION\">ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_KEY_DOWN\">ALLEGRO_EVENT_KEY_DOWN</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_KEY_UP\">ALLEGRO_EVENT_KEY_UP</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_KEY_CHAR\">ALLEGRO_EVENT_KEY_CHAR</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_AXES\">ALLEGRO_EVENT_MOUSE_AXES</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_BUTTON_DOWN\">ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_BUTTON_UP\">ALLEGRO_EVENT_MOUSE_BUTTON_UP</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_WARPED\">ALLEGRO_EVENT_MOUSE_WARPED</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY\">ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY\">ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_BEGIN\">ALLEGRO_EVENT_TOUCH_BEGIN</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_END\">ALLEGRO_EVENT_TOUCH_END</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_MOVE\">ALLEGRO_EVENT_TOUCH_MOVE</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_CANCEL\">ALLEGRO_EVENT_TOUCH_CANCEL</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TIMER\">ALLEGRO_EVENT_TIMER</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_EXPOSE\">ALLEGRO_EVENT_DISPLAY_EXPOSE</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_RESIZE\">ALLEGRO_EVENT_DISPLAY_RESIZE</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_CLOSE\">ALLEGRO_EVENT_DISPLAY_CLOSE</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_LOST\">ALLEGRO_EVENT_DISPLAY_LOST</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_FOUND\">ALLEGRO_EVENT_DISPLAY_FOUND</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_OUT\">ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_IN\">ALLEGRO_EVENT_DISPLAY_SWITCH_IN</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_ORIENTATION\">ALLEGRO_EVENT_DISPLAY_ORIENTATION</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_HALT_DRAWING\">ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING\">ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</a></p></li>   <li><p><a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_DISCONNECTED\">ALLEGRO_EVENT_DISPLAY_DISCONNECTED</a></p></li> </ul>  <p>  ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html"},
     {"title": "Allegro5.ALLEGRO_EVENT.ftype", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#ftype"},
     {"title": "Allegro5.ALLEGRO_EVENT.any", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#any"},
     {"title": "Allegro5.ALLEGRO_EVENT.display", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#display"},
     {"title": "Allegro5.ALLEGRO_EVENT.joystick", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#joystick"},
     {"title": "Allegro5.ALLEGRO_EVENT.keyboard", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#keyboard"},
     {"title": "Allegro5.ALLEGRO_EVENT.mouse", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#mouse"},
     {"title": "Allegro5.ALLEGRO_EVENT.timer", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#timer"},
     {"title": "Allegro5.ALLEGRO_EVENT.touch", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#touch"},
     {"title": "Allegro5.ALLEGRO_EVENT.user", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_EVENT.html#user"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODE", "text": " Contains information about a supported fullscreen modes.      ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_MODE.html"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODE.width", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_MODE.html#width"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODE.height", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_MODE.html#height"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODE.format", "text": " For an explanation of what does it mean, see <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_PIXEL_FORMAT\">ALLEGRO_PIXEL_FORMAT</a>. ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_MODE.html#format"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODE.refresh_rate", "text": " It may be zero if unknown. ", "tags": "", "loc": "Allegro5.ALLEGRO_DISPLAY_MODE.html#refresh_rate"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_STATE", "text": " All fields public and read-only.  ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_STATE.html"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_STATE.stick", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_STATE.html#stick"},
     {"title": "Allegro5.ALLEGRO_JOYSTICK_STATE.button", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_JOYSTICK_STATE.html#button"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_STATE", "text": "  <p>You cannot read the state of keys directly. Use the function <a class=\"normal\" href=\"Allegro5.html#al_key_down\">al_key_down</a>.   ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_STATE.html"},
     {"title": "Allegro5.ALLEGRO_KEYBOARD_STATE.display", "text": " If no display was focused, this points to <code>Nil</code>. ", "tags": "", "loc": "Allegro5.ALLEGRO_KEYBOARD_STATE.html#display"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE", "text": " Fields are read-only.           ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.x", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#x"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.y", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#y"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.z", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#z"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.w", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#w"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.buttons", "text": " The zeroth bit is set if the primary mouse button is held down, the first bit is set if the secondary mouse button is held down, and so on. ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#buttons"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.pressure", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#pressure"},
     {"title": "Allegro5.ALLEGRO_MOUSE_STATE.display", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MOUSE_STATE.html#display"},
     {"title": "Allegro5.ALLEGRO_MEMORY_INTERFACE", "text": "  ", "tags": "", "loc": "Allegro5.ALLEGRO_MEMORY_INTERFACE.html"},
     {"title": "Allegro5.ALLEGRO_MEMORY_INTERFACE.mi_malloc", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MEMORY_INTERFACE.html#mi_malloc"},
     {"title": "Allegro5.ALLEGRO_MEMORY_INTERFACE.mi_free", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MEMORY_INTERFACE.html#mi_free"},
     {"title": "Allegro5.ALLEGRO_MEMORY_INTERFACE.mi_realloc", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MEMORY_INTERFACE.html#mi_realloc"},
     {"title": "Allegro5.ALLEGRO_MEMORY_INTERFACE.mi_calloc", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MEMORY_INTERFACE.html#mi_calloc"},
     {"title": "Allegro5.ALLEGRO_MONITOR_INFO", "text": " <code>x1, y1</code> will be <code>0, 0</code> on the primary display. Other monitors can have negative values if they are to the left or above the primary display. <code>x2, y2</code> are the coordinates one beyond the bottom right pixel, so that <code>x2 - x1</code> gives the width and <code>y2 - y1</code> gives the height of the display.  ", "tags": "", "loc": "Allegro5.ALLEGRO_MONITOR_INFO.html"},
     {"title": "Allegro5.ALLEGRO_MONITOR_INFO.x1", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MONITOR_INFO.html#x1"},
     {"title": "Allegro5.ALLEGRO_MONITOR_INFO.y1", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MONITOR_INFO.html#y1"},
     {"title": "Allegro5.ALLEGRO_MONITOR_INFO.x2", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MONITOR_INFO.html#x2"},
     {"title": "Allegro5.ALLEGRO_MONITOR_INFO.y2", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_MONITOR_INFO.html#y2"},
     {"title": "Allegro5.ALLEGRO_TRANSFORM", "text": " 2D transforms use only a small subsection of this matrix, namely the top left 2x2 matrix, and the right most 2x1 matrix, for a total of 6 values.  ", "tags": "", "loc": "Allegro5.ALLEGRO_TRANSFORM.html"},
     {"title": "Allegro5.ALLEGRO_TRANSFORM.m", "text": " ", "tags": "", "loc": "Allegro5.ALLEGRO_TRANSFORM.html#m"},
     {"title": "Allegro5.ALLEGRO_STATE", "text": "  <p>The various state kept internally by Allegro can be displayed like this: </p>  <pre class=\"preformatted\"> global     active system driver         current config per thread     new bitmap params     new display params     active file interface     errno     current blending mode     current display         deferred drawing     current target bitmap         current transformation         current projection transformation         current clipping rectangle         bitmap locking         current shader</pre>  <p> In general, the only real global state is the active system driver. All other global state is per-thread, so if your application has multiple separate threads they never will interfere with each other. (Except if there are objects accessed by multiple threads of course. Usually you want to minimize that though and for the remaining cases use synchronization primitives described in the threads section or events described in the events section to control inter-thread communication.) ", "tags": "", "loc": "Allegro5.ALLEGRO_STATE.html"},
     {"title": "Allegro5.ALLEGRO_VERSION", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_VERSION"},
     {"title": "Allegro5.ALLEGRO_SUB_VERSION", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SUB_VERSION"},
     {"title": "Allegro5.ALLEGRO_WIP_VERSION", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_WIP_VERSION"},
     {"title": "Allegro5.ALLEGRO_RELEASE_NUMBER", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_RELEASE_NUMBER"},
     {"title": "Allegro5.ALLEGRO_PAS_VERSION_STR", "text": "     ", "tags": "", "loc": "Allegro5.html#ALLEGRO_PAS_VERSION_STR"},
     {"title": "Allegro5.ALLEGRO_DATE_STR", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_DATE_STR"},
     {"title": "Allegro5.ALLEGRO_DATE", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_DATE"},
     {"title": "Allegro5.ALLEGRO_VERSION_INT", "text": "        ", "tags": "", "loc": "Allegro5.html#ALLEGRO_VERSION_INT"},
     {"title": "Allegro5.ALLEGRO_IS_ALPHA", "text": "  <p>Alpha versions are Work In Progress releases for evaluation. API is not fixed and my change in later versions.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IS_ALPHA"},
     {"title": "Allegro5.ALLEGRO_IS_BETA", "text": "  <p>Beta versions are mostly for evaluation. API is assumed as stable but some small changes may be make in later versions.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IS_BETA"},
     {"title": "Allegro5.ALLEGRO_PI", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_PI"},
     {"title": "Allegro5.ALLEGRO_TAU", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_TAU"},
     {"title": "Allegro5.AL_EOF", "text": " Returned by some file functions. ", "tags": "", "loc": "Allegro5.html#AL_EOF"},
     {"title": "Allegro5.ALLEGRO_SEEK_SET", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SEEK_SET"},
     {"title": "Allegro5.ALLEGRO_SEEK_CUR", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SEEK_CUR"},
     {"title": "Allegro5.ALLEGRO_SEEK_END", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SEEK_END"},
     {"title": "Allegro5.ALLEGRO_EVENT_JOYSTICK_AXIS", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>joystick.id</code></b> Pointer to the joystick which generated the event. This is not the same as the event source <code>joystick.source</code>.</p></li>   <li><p><b><code>joystick.stick</code></b> The stick number, counting from zero. Axes on a joystick are grouped into &quot;sticks&quot;.</p></li>   <li><p><b><code>joystick.axis</code></b> The axis number on the stick, counting from zero.</p></li>   <li><p><b><code>joystick.pos</code></b> The axis position, from -1.0 to +1.0.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_JOYSTICK_AXIS"},
     {"title": "Allegro5.ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>joystick.id</code></b> Pointer to the joystick which generated the event. This is not the same as the event source <code>joystick.source</code>.</p></li>   <li><p><b><code>joystick.button</code></b> The button which was pressed, counting from zero.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN"},
     {"title": "Allegro5.ALLEGRO_EVENT_JOYSTICK_BUTTON_UP", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>joystick.id</code></b> Pointer to the joystick which generated the event. This is not the same as the event source <code>joystick.source</code>.</p></li>   <li><p><b><code>joystick.button</code></b> The button which was released, counting from zero.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_JOYSTICK_BUTTON_UP"},
     {"title": "Allegro5.ALLEGRO_EVENT_JOYSTICK_CONFIGURATION", "text": " See <a class=\"normal\" href=\"Allegro5.html#al_reconfigure_joysticks\">al_reconfigure_joysticks</a> for details. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_JOYSTICK_CONFIGURATION"},
     {"title": "Allegro5.ALLEGRO_EVENT_KEY_DOWN", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>keyboard.keycode</code></b> The code corresponding to the physical key which was pressed. See the Key codes section for the list of <code>ALLEGRO_KEY_*</code> constants.</p></li>   <li><p><b><code>keyboard.display</code></b> The display which had keyboard focus when the event occurred.</p></li> </ul>  <p> <b>Note</b>  <p>this event is about the physical keys being pressed on the keyboard. Look for <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_KEY_CHAR\">ALLEGRO_EVENT_KEY_CHAR</a> events for character input. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_KEY_DOWN"},
     {"title": "Allegro5.ALLEGRO_EVENT_KEY_CHAR", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>keyboard.keycode</code></b> The code corresponding to the physical key which was last pressed. See the Key codes section for the list of <code>ALLEGRO_KEY_*</code> constants.</p></li>   <li><p><b><code>keyboard.unichar</code></b> A Unicode code point (character). This may be zero or negative if the event was generated for a non-visible &quot;character&quot;, such as an arrow or Function key. In that case you can act upon the <code>keycode</code> field.  <p>Some special keys will set the unichar field to their standard ASCII values: Tab=9, Return=13, Escape=27. In addition if you press the Control key together with A to Z the unichar field will have the values 1 to 26. For example Ctrl-A will set unichar to 1 and Ctrl-H will set it to 8.  <p>As of Allegro 5.0.2 there are some inconsistencies in the treatment of Backspace (8 or 127) and Delete (127 or 0) keys on different platforms. These can be worked around by checking the keycode field.</p></li>   <li><p><b><code>keyboard.modifiers</code></b> This is a bitfield of the modifier keys which were pressed when the event occurred. See <a href=\"introduction.html#kbdmodifiers\">\"Keyboard modifier flags\"</a> for the constants.</p></li>   <li><p><b><code>keyboard.repeat</code></b> Indicates if this is a repeated character.</p></li>   <li><p><b><code>keyboard.display</code></b> The display which had keyboard focus when the event occurred.</p></li> </ul>  <p>  <p><b>Note</b>  <p>in many input methods, characters are not entered one-for-one with physical key presses. Multiple key presses can combine to generate a single character, e.g. apostrophe + e may produce 'é'. Fewer key presses can also generate more characters, e.g. macro sequences expanding to common phrases. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_KEY_CHAR"},
     {"title": "Allegro5.ALLEGRO_EVENT_KEY_UP", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>keyboard.keycode</code></b> The code corresponding to the physical key which was released. See the Key codes section for the list of <code>ALLEGRO_KEY_*</code> constants.</p></li>   <li><p><b><code>keyboard.display</code></b> The display which had keyboard focus when the event occurred.</p></li> </ul>  <p> <b>Seealso:</b> <a href=\"introduction.html#keycodes\">Key codes</a> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_KEY_UP"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_AXES", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>mouse.x</code></b> x-coordinate.</p></li>   <li><p><b><code>mouse.y</code></b> y-coordinate.</p></li>   <li><p><b><code>mouse.z</code></b> z-coordinate. This usually means the vertical axis of a mouse wheel, where up is positive and down is negative.</p></li>   <li><p><b><code>mouse.w</code></b> w-coordinate. This usually means the horizontal axis of a mouse wheel.</p></li>   <li><p><b><code>mouse.dx</code></b> Change in the x-coordinate value since the previous <code>ALLEGRO_EVENT_MOUSE_AXES</code> event.</p></li>   <li><p><b><code>mouse.dy</code></b> Change in the y-coordinate value since the previous <code>ALLEGRO_EVENT_MOUSE_AXES</code> event.</p></li>   <li><p><b><code>mouse.dz</code></b> Change in the z-coordinate value since the previous <code>ALLEGRO_EVENT_MOUSE_AXES</code> event.</p></li>   <li><p><b><code>mouse.dw</code></b> Change in the w-coordinate value since the previous <code>ALLEGRO_EVENT_MOUSE_AXES</code> event.</p></li>   <li><p><b><code>mouse.pressure</code></b> Pressure, ranging from 0.0 to 1.0.</p></li>   <li><p><b><code>mouse.display</code></b> The display which had mouse focus.</p></li> </ul>  <p> <b>Note</b>  <p>Calling <a class=\"normal\" href=\"Allegro5.html#al_set_mouse_xy\">al_set_mouse_xy</a> also will result in a change of axis values, but such a change is reported with <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_WARPED\">ALLEGRO_EVENT_MOUSE_WARPED</a> events instead which are identical except for their type.  <p><b>Note</b>  <p>currently mouse.display may be <code>Nil</code> if an event is generated in response to <a class=\"normal\" href=\"Allegro5.html#al_set_mouse_axis\">al_set_mouse_axis</a>. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_AXES"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_BUTTON_DOWN", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>mouse.x</code></b> x-coordinate.</p></li>   <li><p><b><code>mouse.y</code></b> y-coordinate.</p></li>   <li><p><b><code>mouse.z</code></b> z-coordinate.</p></li>   <li><p><b><code>mouse.w</code></b> w-coordinate.</p></li>   <li><p><b><code>mouse.button</code></b> The mouse button which was pressed, numbering from 1.</p></li>   <li><p><b><code>mouse.pressure</code></b> Pressure, ranging from 0.0 to 1.0.</p></li>   <li><p><b><code>mouse.display</code></b> The display which had mouse focus.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_BUTTON_DOWN"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_BUTTON_UP", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>mouse.x</code></b> x-coordinate.</p></li>   <li><p><b><code>mouse.y</code></b> y-coordinate.</p></li>   <li><p><b><code>mouse.z</code></b> z-coordinate.</p></li>   <li><p><b><code>mouse.w</code></b> w-coordinate.</p></li>   <li><p><b><code>mouse.button</code></b> The mouse button which was released, numbering from 1.</p></li>   <li><p><b><code>mouse.pressure</code></b> Pressure, ranging from 0.0 to 1.0.</p></li>   <li><p><b><code>mouse.display</code></b> The display which had mouse focus.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_BUTTON_UP"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>mouse.x</code></b> x-coordinate.</p></li>   <li><p><b><code>mouse.y</code></b> y-coordinate.</p></li>   <li><p><b><code>mouse.z</code></b> z-coordinate.</p></li>   <li><p><b><code>mouse.w</code></b> w-coordinate.</p></li>   <li><p><b><code>mouse.display</code></b> The display which had mouse focus.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>mouse.x</code></b> x-coordinate.</p></li>   <li><p><b><code>mouse.y</code></b> y-coordinate.</p></li>   <li><p><b><code>mouse.z</code></b> z-coordinate.</p></li>   <li><p><b><code>mouse.w</code></b> w-coordinate.</p></li>   <li><p><b><code>mouse.display</code></b> The display which had mouse focus.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY"},
     {"title": "Allegro5.ALLEGRO_EVENT_MOUSE_WARPED", "text": " This event is identical to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_AXES\">ALLEGRO_EVENT_MOUSE_AXES</a> otherwise. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_MOUSE_WARPED"},
     {"title": "Allegro5.ALLEGRO_EVENT_TIMER", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>timer.source</code></b> The timer which generated the event.</p></li>   <li><p><b><code>timer.count</code></b> The timer count value.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TIMER"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_EXPOSE", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was exposed.</p></li>   <li><p><b><code>display.x</code>, <code>display.y</code></b> The top-left corner of the rectangle which was exposed.</p></li>   <li><p><b><code>display.width</code>, <code>display.height</code></b> The width and height of the rectangle which was exposed.</p></li> </ul>  <p> <b>Note</b>  <p>The display needs to be created with <code>ALLEGRO_GENERATE_EXPOSE_EVENTS</code> flag for these events to be generated. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_EXPOSE"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_RESIZE", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was resized.</p></li>   <li><p><b><code>display.x</code>, <code>display.y</code></b> The position of the top-level corner of the display.</p></li>   <li><p><b><code>display.width</code></b> The new width of the display.</p></li>   <li><p><b><code>display.height</code></b> The new height of the display.</p></li> </ul>  <p> You should normally respond to these events by calling <a class=\"normal\" href=\"Allegro5.html#al_acknowledge_resize\">al_acknowledge_resize</a>. Note that further resize events may be generated by the time you process the event, so these fields may hold outdated information. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_RESIZE"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_CLOSE", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was closed.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_CLOSE"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_LOST", "text": " In that state, drawing calls are ignored, and upon entering the state, bitmap's pixel data can become undefined. Allegro does its best to preserve the correct contents of bitmaps (see the <code>ALLEGRO_NO_PRESERVE_TEXTURE</code> flag at <a class=\"normal\" href=\"Allegro5.html#al_set_new_bitmap_flags\">al_set_new_bitmap_flags</a>) and restore them when the device is &quot;found&quot; (see <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_FOUND\">ALLEGRO_EVENT_DISPLAY_FOUND</a>). However, this is not 100% fool proof (see discussion in <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a>'s documentation).  <p><b>Note</b>  <p>This event merely means that the display was lost, that is, DirectX suddenly lost the contents of all video bitmaps. In particular, you can keep calling drawing functions &ndash; they just most likely won't do anything. If Allegro's restoration of the bitmaps works well for you then no further action is required when you receive this event. </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>display.source</code></b></dt>   <dd><p>The display which was lost.</p></dd> </dl>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_LOST"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_FOUND", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was found.</p></li> </ul>  <p>  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_FOUND"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_SWITCH_IN", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was switched into.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_IN"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_SWITCH_OUT", "text": " In response to this event you might want to call <a class=\"normal\" href=\"Allegro5.html#al_clear_keyboard_state\">al_clear_keyboard_state</a> (possibly passing <code>display.source</code> as its argument) in order to prevent Allegro's keyboard state from getting out of sync. </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which was switched out of.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_OUT"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_ORIENTATION", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.source</code></b> The display which generated the event.</p></li>   <li><p><b><code>event.display.orientation</code></b> Contains one of the following values:</p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES</code></p></li>   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES</code></p></li>   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES</code></p></li>   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES</code></p></li>   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_FACE_UP</code></p></li>   <li><p><code>ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN</code></p></li> </ul>  <p></p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_ORIENTATION"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_HALT_DRAWING", "text": "  <p>This is currently only relevant for Android and iOS. It will be sent when the application is switched to background mode, in addition to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_OUT\">ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</a>. The latter may also be sent in situations where the application is not active but still should continue drawing, for example when a popup is displayed in front of it.  <p><b>Note</b>  <p>This event means that the next time you call a drawing function, your program will crash. So you must stop drawing and you must immediately reply with <code>al_acknowledge_drawing_halt</code>. Allegro sends this event because it cannot handle this automatically. Your program might be doing the drawing in a different thread from the event handling, in which case the drawing thread needs to be signaled to stop drawing before acknowledging this event.  <p><b>Note</b>  <p>Mobile devices usually never quit an application, so to prevent the battery from draining while your application is halted it can be a good idea to call <a class=\"normal\" href=\"Allegro5.html#al_stop_timer\">al_stop_timer</a> on all your timers, otherwise they will keep generating events. If you are using audio, you can also stop all audio voices (or pass <code>Nil</code> to <a class=\"normal\" href=\"al5audio.html#al_set_default_voice\">al_set_default_voice</a> if you use the default mixer), otherwise Allegro will keep streaming silence to the voice even if the stream or mixer are stopped or detached.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_HALT_DRAWING"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING", "text": "  <p>This is currently only relevant for Android and iOS. The event will be sent when an application returns from background mode and is allowed to draw to the display again, in addition to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_IN\">ALLEGRO_EVENT_DISPLAY_SWITCH_IN</a>. The latter event may also be sent in a situation where the application is already active, for example when a popup in front of it closes.  <p><b>Note</b>  <p>Unlike <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_FOUND\">ALLEGRO_EVENT_DISPLAY_FOUND</a> it is not necessary to reload any bitmaps when you receive this event.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING"},
     {"title": "Allegro5.ALLEGRO_EVENT_TOUCH_BEGIN", "text": " </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>touch.display</code></b> The display which was touched.</p></li>   <li><p><b><code>touch.id</code></b> An identifier for this touch. If supported by the device it will stay the same for events from the same finger until the touch ends.</p></li>   <li><p><b><code>touch.x</code></b> The x coordinate of the touch in pixels.</p></li>   <li><p><b><code>touch.y</code></b> The y coordinate of the touch in pixels.</p></li>   <li><p><b><code>touch.dx</code></b> Movement speed in pixels in x direction.</p></li>   <li><p><b><code>touch.dy</code></b> Movement speed in pixels in y direction.</p></li>   <li><p><b><code>touch.primary</code></b> Whether this is the only/first touch or an additional touch.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TOUCH_BEGIN"},
     {"title": "Allegro5.ALLEGRO_EVENT_TOUCH_END", "text": "  <p>Has the same fields as <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_BEGIN\">ALLEGRO_EVENT_TOUCH_BEGIN</a>. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TOUCH_END"},
     {"title": "Allegro5.ALLEGRO_EVENT_TOUCH_MOVE", "text": "  <p>Has the same fields as <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_BEGIN\">ALLEGRO_EVENT_TOUCH_BEGIN</a>. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TOUCH_MOVE"},
     {"title": "Allegro5.ALLEGRO_EVENT_TOUCH_CANCEL", "text": " This is device specific but could for example mean that a finger moved off the border of the device or moved so fast that it could not be tracked any longer.  <p>Has the same fields as <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TOUCH_BEGIN\">ALLEGRO_EVENT_TOUCH_BEGIN</a>. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TOUCH_CANCEL"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_CONNECTED", "text": " Currently, on most platforms, Allegro supports only a single physical display. However, on iOS, a secondary physical display is supported. </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.display</code></b> The display which was touched.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_CONNECTED"},
     {"title": "Allegro5.ALLEGRO_EVENT_DISPLAY_DISCONNECTED", "text": " Currently, on most platforms, Allegro supports only a single physical display. However, on iOS, a secondary physical display is supported. </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>display.display</code></b> The display which was touched.</p></li> </ul>  <p> ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DISPLAY_DISCONNECTED"},
     {"title": "Allegro5.ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE", "text": "   ", "tags": "", "loc": "Allegro5.html#ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE"},
     {"title": "Allegro5.al_get_allegro_version", "text": " the dll/so/dylib file), packed into a single integer as groups of 8 bits.  <p>You can use code like this to extract the version number: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Version: LONGINT;   Major, Minor, Revision, Release: INTEGER;   VersionStr: <span class=\"pascal_keyword\">STRING</span>; <span class=\"pascal_keyword\">BEGIN</span>   Version := al_get_allegro_version;   Major    :=  Version <span class=\"pascal_keyword\">SHR</span> <span class=\"pascal_numeric\">24</span>;   Minor    := (Version <span class=\"pascal_keyword\">SHR</span> <span class=\"pascal_numeric\">16</span>) <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">255</span>;   Revision := (Version <span class=\"pascal_keyword\">SHR</span>  <span class=\"pascal_numeric\">8</span>) <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">255</span>;   Release  :=  Version         <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">255</span>;   VersionStr := Format (<span class=\"pascal_string\">'%d.%d.%d[%d]'</span>, [Major, Minor, Revision, Release]) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The release number is 0 for an unofficial version and 1 or greater for an official release. For example &quot;5.0.2[1]&quot; would be the (first) official 5.0.2 release while &quot;5.0.2[0]&quot; would be a compile of a version from the &quot;5.0.2&quot; branch before the official release.     ", "tags": "", "loc": "Allegro5.html#al_get_allegro_version"},
     {"title": "Allegro5.al_run_main", "text": " Under Windows and Linux this is no problem because you simply can call <a class=\"normal\" href=\"Allegro5.html#al_install_system\">al_install_system</a>. But some other system (like OSX) don't allow calling <code>al_install_system</code> in the main thread. <code>al_run_main</code> will know what to do in that case.  <p>The passed <code>argc</code> and <code>argv</code> will simply be passed on to <code>user_main</code> and the return value of <code>user_main</code> will be returned.  <p><b>Note</b>  <p>This is used because the way the C language works. I didn't test if Pascal do need this kind of stuff. Future versions of Allegro.pas would not include this function, so don't use it unless your really need to (and tell me if you really need it to remove this warning from documentation).    ", "tags": "", "loc": "Allegro5.html#al_run_main"},
     {"title": "Allegro5.AL_ID", "text": " These can be used for various things, like custom datafile objects or system IDs. Example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   OSTYPE_LINUX: LONGINT; <span class=\"pascal_keyword\">BEGIN</span>   OSTYPE_LINUX := AL_ID(<span class=\"pascal_string\">'TUX '</span>); <span class=\"pascal_keyword\">END</span>;</pre>  <p>    ", "tags": "", "loc": "Allegro5.html#AL_ID"},
     {"title": "Allegro5.al_get_time", "text": " The return value is undefined if Allegro is uninitialised. The resolution depends on the used driver, but typically can be in the order of microseconds.     ", "tags": "", "loc": "Allegro5.html#al_get_time"},
     {"title": "Allegro5.al_rest", "text": " This tells the system to pause the current thread for the given amount of time. With some operating systems, the accuracy can be in the order of 10ms. That is, even <code>al_rest (0.000001)</code> might pause for something like 10ms. Also see the other timer rutines (i.e. <a class=\"normal\" href=\"Allegro5.html#al_create_timer\">al_create_timer</a>) for easier ways to time your program without using up all CPU.      ", "tags": "", "loc": "Allegro5.html#al_rest"},
     {"title": "Allegro5.al_init_timeout", "text": "  <p>For compatibility with all platforms, seconds must be 2,147,483.647 seconds or less.      ", "tags": "", "loc": "Allegro5.html#al_init_timeout"},
     {"title": "Allegro5.al_map_rgb", "text": "       ", "tags": "", "loc": "Allegro5.html#al_map_rgb"},
     {"title": "Allegro5.al_map_rgba", "text": "       ", "tags": "", "loc": "Allegro5.html#al_map_rgba"},
     {"title": "Allegro5.al_map_rgb_f", "text": "       ", "tags": "", "loc": "Allegro5.html#al_map_rgb_f"},
     {"title": "Allegro5.al_map_rgba_f", "text": " seealso(al_map_rgba)      ", "tags": "", "loc": "Allegro5.html#al_map_rgba_f"},
     {"title": "Allegro5.al_premul_rgba", "text": "  <p>By default Allegro uses pre-multiplied alpha for transparent blending of bitmaps and primitives (see <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap_flags\">al_load_bitmap_flags</a> for a discussion of that feature). This means that if you want to tint a bitmap or primitive to be transparent you need to multiply the color components by the alpha components when you pass them to this function. For example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   c: ALLEGRO_COLOR;   bmp: ALLEGRO_BITMAPptr; <span class=\"pascal_keyword\">BEGIN</span>   c := al_premul_rgba (<span class=\"pascal_numeric\">255</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">127</span>); <span class=\"pascal_comment\">{ Draw the bitmap tinted red and half-transparent. }</span>   al_draw_tinted_bitmap (bmp, c, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>); <span class=\"pascal_keyword\">END</span>;</pre>  <p>      ", "tags": "", "loc": "Allegro5.html#al_premul_rgba"},
     {"title": "Allegro5.al_premul_rgba_f", "text": "  <p>By default Allegro uses pre-multiplied alpha for transparent blending of bitmaps and primitives (see <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap_flags\">al_load_bitmap_flags</a> for a discussion of that feature). This means that if you want to tint a bitmap or primitive to be transparent you need to multiply the color components by the alpha components when you pass them to this function. For example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   c: ALLEGRO_COLOR;   bmp: ALLEGRO_BITMAPptr; <span class=\"pascal_keyword\">BEGIN</span>   c := al_premul_rgba_f (<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_float\">0.5</span>); <span class=\"pascal_comment\">{ Draw the bitmap tinted red and half-transparent. }</span>   al_draw_tinted_bitmap (bmp, c, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>); <span class=\"pascal_keyword\">END</span>;</pre>  <p>      ", "tags": "", "loc": "Allegro5.html#al_premul_rgba_f"},
     {"title": "Allegro5.al_unmap_rgb", "text": " Components will range from 0-255.      ", "tags": "", "loc": "Allegro5.html#al_unmap_rgb"},
     {"title": "Allegro5.al_unmap_rgba", "text": " Components will range from 0-255.      ", "tags": "", "loc": "Allegro5.html#al_unmap_rgba"},
     {"title": "Allegro5.al_unmap_rgb_f", "text": " Components will range from 0.0f-1.0f.      ", "tags": "", "loc": "Allegro5.html#al_unmap_rgb_f"},
     {"title": "Allegro5.al_unmap_rgba_f", "text": " Components will range from 0.0f-1.0f.      ", "tags": "", "loc": "Allegro5.html#al_unmap_rgba_f"},
     {"title": "Allegro5.al_get_pixel_size", "text": " For blocked pixel formats (e.g. compressed formats), this returns 0.      ", "tags": "", "loc": "Allegro5.html#al_get_pixel_size"},
     {"title": "Allegro5.al_get_pixel_format_bits", "text": " For blocked pixel formats (e.g. compressed formats), this returns 0.      ", "tags": "", "loc": "Allegro5.html#al_get_pixel_format_bits"},
     {"title": "Allegro5.al_get_pixel_block_size", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_pixel_block_size"},
     {"title": "Allegro5.al_get_pixel_block_width", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_pixel_block_width"},
     {"title": "Allegro5.al_get_pixel_block_height", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_pixel_block_height"},
     {"title": "Allegro5.al_set_new_bitmap_format", "text": " The default format is <code>ALLEGRO_PIXEL_FORMAT_ANY</code> and means the display driver will choose the best format.       ", "tags": "", "loc": "Allegro5.html#al_set_new_bitmap_format"},
     {"title": "Allegro5.al_set_new_bitmap_flags", "text": " Valid flags are: </p>  <dl class=\"paragraph_spacing\">   <dt>ALLEGRO_MEMORY_BITMAP</dt>   <dd><p>Creates a bitmap residing in system memory. Operations on, and with, memory bitmaps will not be hardware accelerated. However, direct pixel access can be relatively quick compared to video bitmaps, which depend on the display driver in use.  <p><i>Note:</i> Allegro's software rendering routines are currently somewhat unoptimised.  <p><i>Note:</i> Combining <code>ALLEGRO_VIDEO_BITMAP</code> with <code>ALLEGRO_MEMORY_BITMAP</code> flags is invalid.</p></dd>   <dt>ALLEGRO_VIDEO_BITMAP</dt>   <dd><p>Creates a bitmap that resides in the video card memory. These types of bitmaps receive the greatest benefit from hardware acceleration.  <p><i>Note:</i> Creating a video bitmap will fail if there is no current display or the current display driver cannot create the bitmap. The latter will happen if for example the format or dimensions are not supported.  <p><i>Note:</i> Bitmaps created with this flag will be converted to memory bitmaps when the last display is destroyed. In most cases it is therefore easier to use the <code>ALLEGRO_CONVERT_BITMAP</code> flag instead.  <p><i>Note:</i> Combining <code>ALLEGRO_VIDEO_BITMAP</code> with <code>ALLEGRO_MEMORY_BITMAP</code> flags is invalid.</p></dd>   <dt>ALLEGRO_CONVERT_BITMAP</dt>   <dd><p>This is the default. It will try to create a video bitmap and if that fails create a memory bitmap. Bitmaps created with this flag when there is no active display will be converted to video bitmaps next time a display is created. They also will remain video bitmaps if the last display is destroyed and then another is created again.  <p><i>Note:</i> You can combine this flag with <code>ALLEGRO_MEMORY_BITMAP</code> or <code>ALLEGRO_VIDEO_BITMAP</code> to force the initial type (and fail in the latter case if no video bitmap can be created) - but usually neither of those combinations is very useful.  <p>You can use the display option <code>ALLEGRO_AUTO_CONVERT_BITMAPS</code> to control which displays will try to auto-convert bitmaps.</p></dd>   <dt>ALLEGRO_NO_PRESERVE_TEXTURE</dt>   <dd><p>Normally, every effort is taken to preserve the contents of bitmaps, since some platforms may forget them. This can take extra processing time. If you know it doesn't matter if a bitmap keeps its pixel data, for example when it's a temporary buffer, use this flag to tell Allegro not to attempt to preserve its contents.</p></dd>   <dt>ALLEGRO_ALPHA_TEST</dt>   <dd><p>This is a driver hint only. It tells the graphics driver to do alpha testing instead of alpha blending on bitmaps created with this flag. Alpha testing is usually faster and preferred if your bitmaps have only one level of alpha (0). This flag is currently not widely implemented (i.e., only for memory bitmaps).</p></dd>   <dt>ALLEGRO_MIN_LINEAR</dt>   <dd><p>When drawing a scaled down version of the bitmap, use linear filtering. This usually looks better. You can also combine it with the <code>ALLEGRO_MIPMAP</code> flag for even better quality.</p></dd>   <dt>ALLEGRO_MAG_LINEAR</dt>   <dd><p>When drawing a magnified version of a bitmap, use linear filtering. This will cause the picture to get blurry instead of creating a big rectangle for each pixel. It depends on how you want things to look like whether you want to use this or not.</p></dd>   <dt>ALLEGRO_MIPMAP</dt>   <dd><p>This can only be used for bitmaps whose width and height is a power of two. In that case, it will generate mipmaps and use them when drawing scaled down versions. For example if the bitmap is 64x64, then extra bitmaps of sizes 32x32, 16x16, 8x8, 4x4, 2x2 and 1x1 will be created always containing a scaled down version of the original.</p></dd> </dl>  <p>        ", "tags": "", "loc": "Allegro5.html#al_set_new_bitmap_flags"},
     {"title": "Allegro5.al_get_new_bitmap_format", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_new_bitmap_format"},
     {"title": "Allegro5.al_get_new_bitmap_flags", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_new_bitmap_flags"},
     {"title": "Allegro5.al_add_new_bitmap_flag", "text": "    ", "tags": "", "loc": "Allegro5.html#al_add_new_bitmap_flag"},
     {"title": "Allegro5.al_get_bitmap_width", "text": "    ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_width"},
     {"title": "Allegro5.al_get_bitmap_height", "text": "    ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_height"},
     {"title": "Allegro5.al_get_bitmap_format", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_format"},
     {"title": "Allegro5.al_get_bitmap_flags", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_flags"},
     {"title": "Allegro5.al_create_bitmap", "text": " Blitting between bitmaps of differing formats, or blitting between memory bitmaps and display bitmaps may be slow.  <p>Unless you set the <code>ALLEGRO_MEMORY_BITMAP</code> flag, the bitmap is created for the current display. Blitting to another display may be slow.  <p>If a display bitmap is created, there may be limitations on the allowed dimensions. For example a DirectX or OpenGL backend usually has a maximum allowed texture size - so if bitmap creation fails for very large dimensions, you may want to re-try with a smaller bitmap. Some platforms also dictate a minimum texture size, which is relevant if you plan to use this bitmap with the primitives addon. If you try to create a bitmap smaller than this, this call will not fail but the returned bitmap will be a section of a larger bitmap with the minimum size. The minimun size that will work on all platforms is 32 by 32.  <p>Some platforms do not directly support display bitmaps whose dimensions are not powers of two. Allegro handles this by creating a larger bitmap that has dimensions that are powers of two and then returning a section of that bitmap with the dimensions you requested. This can be relevant if you plan to use this bitmap with the primitives addon but shouldn't be an issue otherwise.  <p>If you create a bitmap without <code>ALLEGRO_MEMORY_BITMAP</code> set but there is no current display, a temporary memory bitmap will be created instead. You can later convert all such bitmap to video bitmap and assign to a display by calling <a class=\"normal\" href=\"Allegro5.html#al_convert_memory_bitmaps\">al_convert_memory_bitmaps</a>.  <p>On some platforms the contents of video bitmaps may be lost when your application loses focus. Allegro has an internal mechanism to restore the contents of these video bitmaps, but it is not foolproof (sometimes bitmap contents can get lost permanently) and has performance implications. If you are using a bitmap as an intermediate buffer this mechanism may be wasteful. In this case, if you do not want Allegro to manage the bitmap contents for you, you can disable this mechanism by creating the bitmap with the <code>ALLEGRO_NO_PRESERVE_TEXTURE</code> flag. The bitmap contents are lost when you get the <code>ALLEGRO_EVENT_DISPLAY_LOST</code> and <code>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</code> and a should be restored when you get the <code>ALLEGRO_EVENT_DISPLAY_FOUND</code> and when you call <a class=\"normal\" href=\"Allegro5.html#al_acknowledge_drawing_resume\">al_acknowledge_drawing_resume</a> (after <code>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</code> event). You can use those events to implement your own bitmap content restoration mechanism if Allegro's does not work well enough for you (for example, you can reload them all from disk).  <p><i>Note:</i> The contents of a newly created bitmap are undefined - you need to clear the bitmap or make sure all pixels get overwritten before drawing it.  <p>When you are done with using the bitmap you must call <a class=\"normal\" href=\"Allegro5.html#al_destroy_bitmap\">al_destroy_bitmap</a> on it to free any resources allocated for it.          ", "tags": "", "loc": "Allegro5.html#al_create_bitmap"},
     {"title": "Allegro5.al_destroy_bitmap", "text": " This function does nothing if the <code>bitmap</code> argument is <code>Nil</code>.  <p>As a convenience, if the calling thread is currently targeting the bitmap then the bitmap will be untargeted first. The new target bitmap is unspecified.  <p>Otherwise, it is an error to destroy a bitmap while it (or a sub-bitmap) is the target bitmap of any thread.     ", "tags": "", "loc": "Allegro5.html#al_destroy_bitmap"},
     {"title": "Allegro5.al_put_pixel", "text": " This operation is slow on non-memory bitmaps. Consider locking the bitmap if you are going to use this function multiple times on the same bitmap. This function is not affected by the transformations or the color blenders.        ", "tags": "", "loc": "Allegro5.html#al_put_pixel"},
     {"title": "Allegro5.al_put_blended_pixel", "text": "    ", "tags": "", "loc": "Allegro5.html#al_put_blended_pixel"},
     {"title": "Allegro5.al_get_pixel", "text": " This operation is slow on non-memory bitmaps. Consider locking the bitmap if you are going to use this function multiple times on the same bitmap.       ", "tags": "", "loc": "Allegro5.html#al_get_pixel"},
     {"title": "Allegro5.al_convert_mask_to_alpha", "text": " Can be used to convert older 4.2-style bitmaps with magic pink to alpha-ready bitmaps.     ", "tags": "", "loc": "Allegro5.html#al_convert_mask_to_alpha"},
     {"title": "Allegro5.al_set_clipping_rectangle", "text": " The default is to clip pixels to the entire bitmap.      ", "tags": "", "loc": "Allegro5.html#al_set_clipping_rectangle"},
     {"title": "Allegro5.al_reset_clipping_rectangle", "text": "  <p>Does nothing if there is no target bitmap.     ", "tags": "", "loc": "Allegro5.html#al_reset_clipping_rectangle"},
     {"title": "Allegro5.al_get_clipping_rectangle", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_clipping_rectangle"},
     {"title": "Allegro5.al_create_sub_bitmap", "text": " A sub-bitmap is a bitmap that shares drawing memory with a pre-existing (parent) bitmap, but possibly with a different size and clipping settings.  <p>The sub-bitmap may originate off or extend past the parent bitmap.  <p>See the discussion in <a class=\"normal\" href=\"Allegro5.html#al_get_backbuffer\">al_get_backbuffer</a> about using sub-bitmaps of the backbuffer.  <p>The parent bitmap's clipping rectangles are ignored.  <p>If a sub-bitmap was not or cannot be created then <code>Nil</code> is returned.  <p>When you are done with using the sub-bitmap you must call <a class=\"normal\" href=\"Allegro5.html#al_destroy_bitmap\">al_destroy_bitmap</a> on it to free any resources allocated for it.  <p>Note that destroying parents of sub-bitmaps will not destroy the sub-bitmaps; instead the sub-bitmaps become invalid and should no longer be used for drawing - they still must be destroyed with <code>al_destroy_bitmap</code> however. It does not matter whether you destroy a sub-bitmap before or after its parent otherwise.       ", "tags": "", "loc": "Allegro5.html#al_create_sub_bitmap"},
     {"title": "Allegro5.al_is_sub_bitmap", "text": "      ", "tags": "", "loc": "Allegro5.html#al_is_sub_bitmap"},
     {"title": "Allegro5.al_get_parent_bitmap", "text": " Returns <code>Nil</code> if this bitmap is not a sub-bitmap. This function always returns the real bitmap, and never a sub-bitmap. This might NOT match what was passed to <code>al_create_sub_bitmap</code>. Consider this code, for instance: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   a, b, c: ALLEGRO_BITMAPptr; <span class=\"pascal_keyword\">BEGIN</span>   a := al_create_bitmap (<span class=\"pascal_numeric\">512</span>, <span class=\"pascal_numeric\">512</span>);   b := al_create_sub_bitmap (a, <span class=\"pascal_numeric\">128</span>, <span class=\"pascal_numeric\">128</span>, <span class=\"pascal_numeric\">256</span>, <span class=\"pascal_numeric\">256</span>);   c := al_create_sub_bitmap (b, <span class=\"pascal_numeric\">64</span>, <span class=\"pascal_numeric\">64</span>, <span class=\"pascal_numeric\">128</span>, <span class=\"pascal_numeric\">128</span>);   <span class=\"pascal_keyword\">IF</span> (al_get_parent_bitmap (b) = a) <span class=\"pascal_keyword\">AND</span> (al_get_parent_bitmap (c) = a) <span class=\"pascal_keyword\">THEN</span>     WriteLn (<span class=\"pascal_string\">'b &amp; c are sub-bitmaps of a'</span>) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The message will be printed because only <code>a</code> is a real bitmap, and both <code>b</code> and <code>c</code> are its sub-bitmaps.      ", "tags": "", "loc": "Allegro5.html#al_get_parent_bitmap"},
     {"title": "Allegro5.al_get_bitmap_x", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_x"},
     {"title": "Allegro5.al_get_bitmap_y", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_bitmap_y"},
     {"title": "Allegro5.al_reparent_bitmap", "text": " This is the same as destroying the bitmap and re-creating it with <code>al_create_sub_bitmap</code> - except the bitmap pointer stays the same. This has many uses, for example an animation player could return a single bitmap which can just be re-parented to different animation frames without having to re-draw the contents. Or a sprite atlas could re-arrange its sprites without having to invalidate all existing bitmaps.      ", "tags": "", "loc": "Allegro5.html#al_reparent_bitmap"},
     {"title": "Allegro5.al_clone_bitmap", "text": " The newly created bitmap will be created with the current new bitmap flags, and not the ones that were used to create the original bitmap. If the new bitmap is a memory bitmap, its projection bitmap is reset to be orthographic.        ", "tags": "", "loc": "Allegro5.html#al_clone_bitmap"},
     {"title": "Allegro5.al_convert_bitmap", "text": " The bitmap will be as if it was created new with <code>al_create_bitmap</code> but retain its contents. All of this bitmap's sub-bitmaps are also converted. If the new bitmap type is memory, then the bitmap's projection bitmap is reset to be orthographic.  <p>If this bitmap is a sub-bitmap, then it, its parent and all the sibling sub-bitmaps are also converted.        ", "tags": "", "loc": "Allegro5.html#al_convert_bitmap"},
     {"title": "Allegro5.al_convert_memory_bitmaps", "text": " This function converts all such bitmaps to proper video bitmaps belonging to the current display.  <p>Note that video bitmaps get automatically converted back to memory bitmaps when the last display is destroyed.  <p>This operation will preserve all bitmap flags except <code>ALLEGRO_VIDEO_BITMAP</code> and <code>ALLEGRO_MEMORY_BITMAP</code>.      ", "tags": "", "loc": "Allegro5.html#al_convert_memory_bitmaps"},
     {"title": "Allegro5.al_draw_bitmap", "text": " <code>flags</code> can be a combination of: </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_FLIP_HORIZONTAL</code> - flip the bitmap about the y-axis</p></li>   <li><p><code>ALLEGRO_FLIP_VERTICAL</code> - flip the bitmap about the x-axis</p></li> </ul>  <p> <b>Note</b>  <p>The current target bitmap must be a different bitmap. Drawing a bitmap to itself (or to a sub-bitmap of itself) or drawing a sub-bitmap to its parent (or another sub-bitmap of its parent) are not currently supported. To copy part of a bitmap into the same bitmap simply use a temporary bitmap instead.  <p><b>Note</b>  <p>The backbuffer (or a sub-bitmap thereof) can not be transformed, blended or tinted. If you need to draw the backbuffer draw it to a temporary bitmap first with no active transformation (except translation). Blending and tinting settings/parameters will be ignored. This does not apply when drawing into a memory bitmap.           bitmap Origin bitmap. dx Destination x. dy Destination y. flags Read description above.  bitmap Origin bitmap. dx Destination x. dy Destination y. flags Read description above.", "tags": "", "loc": "Allegro5.html#al_draw_bitmap"},
     {"title": "Allegro5.al_draw_bitmap_region", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.              bitmap Origin bitmap. sx source x sy source y sw source width (width of region to blit) sh source height (height of region to blit) dx destination x dy destination y flags same as for <code>al_draw_bitmap</code>  bitmap Origin bitmap. sx source x sy source y sw source width (width of region to blit) sh source height (height of region to blit) dx destination x dy destination y flags same as for <code>al_draw_bitmap</code>", "tags": "", "loc": "Allegro5.html#al_draw_bitmap_region"},
     {"title": "Allegro5.al_draw_scaled_bitmap", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.                bitmap Origin bitmap. sx source x sy source y sw source width sh source height dx destination x dy destination y dw destination width dh destination height flags same as for al_draw_bitmap  bitmap Origin bitmap. sx source x sy source y sw source width sh source height dx destination x dy destination y dw destination width dh destination height flags same as for al_draw_bitmap", "tags": "", "loc": "Allegro5.html#al_draw_scaled_bitmap"},
     {"title": "Allegro5.al_draw_rotated_bitmap", "text": "  <p>The point at <code>cx/cy</code> relative to the upper left corner of the bitmap will be drawn at <code>dx/dy</code> and the bitmap is rotated around this point. If <code>cx,cy</code> is <code>0,0</code> the bitmap will rotate around its upper left corner.  <p>Example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   w, h: SINGLE; <span class=\"pascal_keyword\">BEGIN</span>   w := al_get_bitmap_width (bitmap);   h := al_get_bitmap_height (bitmap);   al_draw_rotated_bitmap (bitmap, w / <span class=\"pascal_numeric\">2</span>, h / <span class=\"pascal_numeric\">2</span>, x, y, ALLEGRO_PI / <span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">0</span>) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The above code draws the bitmap centered on <code>x/y</code> and rotates it 90° clockwise.  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.             bitmap Origin bitmap. cx center x (relative to the left of bitmap) cy center y (relative to the top or bitmap) dx destination x dy destination y angle angle in radians by which to rotate clockwise flags same as for al_draw_bitmap  bitmap Origin bitmap. cx center x (relative to the left of bitmap) cy center y (relative to the top or bitmap) dx destination x dy destination y angle angle in radians by which to rotate clockwise flags same as for al_draw_bitmap", "tags": "", "loc": "Allegro5.html#al_draw_rotated_bitmap"},
     {"title": "Allegro5.al_draw_scaled_rotated_bitmap", "text": "  <p>The point at <code>cx/cy</code> in the bitmap will be drawn at <code>dx/dy</code> and the bitmap is rotated and scaled around this point.  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.              bitmap Origin bitmap. cx center x (relative to the left of bitmap) cy center y (relative to the top or bitmap) dx destination x dy destination y xscale how much to scale on the x-axis (e.g. 2 for twice the size) yscale how much to scale on the y-axis angle angle in radians by which to rotate clockwise flags same as for al_draw_bitmap  bitmap Origin bitmap. cx center x (relative to the left of bitmap) cy center y (relative to the top or bitmap) dx destination x dy destination y xscale how much to scale on the x-axis (e.g. 2 for twice the size) yscale how much to scale on the y-axis angle angle in radians by which to rotate clockwise flags same as for al_draw_bitmap", "tags": "", "loc": "Allegro5.html#al_draw_scaled_rotated_bitmap"},
     {"title": "Allegro5.al_draw_tinted_bitmap", "text": " For example: </p>  <pre class=\"longcode\"> al_draw_tinted_bitmap (bitmap, al_map_rgba_f (<span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>), x, y, <span class=\"pascal_numeric\">0</span>);</pre>  <p> The above will draw the bitmap 50% transparently (r/g/b values need to be pre-multiplied with the alpha component with the default blend mode). </p>  <pre class=\"longcode\"> al_draw_tinted_bitmap(bitmap, al_map_rgba_f(<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">1</span>), x, y, <span class=\"pascal_numeric\">0</span>);</pre>  <p> The above will only draw the red component of the bitmap.  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.          ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_bitmap"},
     {"title": "Allegro5.al_draw_tinted_bitmap_region", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be     ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_bitmap_region"},
     {"title": "Allegro5.al_draw_tinted_scaled_bitmap", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be     ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_scaled_bitmap"},
     {"title": "Allegro5.al_draw_tinted_rotated_bitmap", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be     ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_rotated_bitmap"},
     {"title": "Allegro5.al_draw_tinted_scaled_rotated_bitmap", "text": "  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.     ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_scaled_rotated_bitmap"},
     {"title": "Allegro5.al_draw_tinted_scaled_rotated_bitmap_region", "text": "  <p>You can get the same effect with a sub bitmap: </p>  <pre class=\"longcode\">   al_draw_tinted_scaled_rotated_bitmap_region (     bitmap, sx, sy, sw, sh, tint,     cx, cy, dx, dy, xscale, yscale, angle, flags   );  <span class=\"pascal_comment\">{ Next code draws the same: }</span>   sub_bitmap := al_create_sub_bitmap (bitmap, sx, sy, sw, sh);   al_draw_tinted_scaled_rotated_bitmap (     sub_bitmap, tint, cx, cy,     dx, dy, xscale, yscale, angle, flags   );</pre>  <p>  <p>See <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> for a note on restrictions on which bitmaps can be drawn where.     ", "tags": "", "loc": "Allegro5.html#al_draw_tinted_scaled_rotated_bitmap_region"},
     {"title": "Allegro5.al_fopen", "text": " The current file interface is used to open the file.  <p>Depending on the stream type and the mode string, files may be opened in &quot;text&quot; mode. The handling of newlines is particularly important. For example, using the default stdio-based streams on DOS and Windows platforms, where the native end-of-line terminators are <code>CR+LF</code> sequences, a call to <a class=\"normal\" href=\"Allegro5.html#al_fgetc\">al_fgetc</a> may return just one character ('\\n') where there were two bytes (<code>CR+LF</code>) in the file. When writing out '\\n', two bytes would be written instead. (As an aside, '\\n' is not defined to be equal to <code>LF</code> either.)  <p>Newline translations can be useful for text files but is disastrous for binary files. To avoid this behaviour you need to open file streams in binary mode by using a mode argument containing a &quot;b&quot;, e.g. <code>'rb'</code>, <code>'wb</code>.          path Path to the file to open. mode Access mode to open the file in ('r', 'w', etc.). a file handle on success, or <code>Nil</code> on error. path Path to the file to open. mode Access mode to open the file in ('r', 'w', etc.).", "tags": "", "loc": "Allegro5.html#al_fopen"},
     {"title": "Allegro5.al_fopen_interface", "text": "     ", "tags": "", "loc": "Allegro5.html#al_fopen_interface"},
     {"title": "Allegro5.al_create_file_handle", "text": " This allows custom interfaces to extend the <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_FILEptr\">ALLEGRO_FILEptr</a> struct with their own data. You should close the handle with the standard <a class=\"normal\" href=\"Allegro5.html#al_fclose\">al_fclose</a> function when you are finished with it.       ", "tags": "", "loc": "Allegro5.html#al_create_file_handle"},
     {"title": "Allegro5.al_fclose", "text": "     <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_fclose"},
     {"title": "Allegro5.al_fread", "text": "           The number of bytes actually read. If an error occurs, or the end-of-file is reached, the return value is a short byte count (or zero).  <p><code>al_fread</code> does not distinguish between <a class=\"normal\" href=\"Allegro5.html#AL_EOF\">AL_EOF</a> and other errors. Use <a class=\"normal\" href=\"Allegro5.html#al_feof\">al_feof</a> and <a class=\"normal\" href=\"Allegro5.html#al_ferror\">al_ferror</a> to determine which occurred. ", "tags": "", "loc": "Allegro5.html#al_fread"},
     {"title": "Allegro5.al_fwrite", "text": "           The number of bytes actually written. If an error occurs, the return value is a short byte count (or zero). ", "tags": "", "loc": "Allegro5.html#al_fwrite"},
     {"title": "Allegro5.al_fflush", "text": "     <code>True</code> on success, <code>False</code> otherwise. ", "tags": "", "loc": "Allegro5.html#al_fflush"},
     {"title": "Allegro5.al_ftell", "text": "  <p>On some platforms this function may not support large files.      ", "tags": "", "loc": "Allegro5.html#al_ftell"},
     {"title": "Allegro5.al_fseek", "text": "  <p><code>whence</code> can be:</p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_SEEK_SET</code> - seek relative to beginning of file</p></li>   <li><p><code>ALLEGRO_SEEK_CUR</code> - seek relative to current file position</p></li>   <li><p><code>ALLEGRO_SEEK_END</code> - seek relative to end of file</p></li> </ul>  <p> After a successful seek, the end-of-file indicator is cleared and all pushback bytes are forgotten.  <p>On some platforms this function may not support large files.      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_fseek"},
     {"title": "Allegro5.al_feof", "text": " we have attempted to read <i>past</i> the end of the file.  <p>This does <i>not</i> return <code>True</code> if we simply are at the end of the file. The following code correctly reads two bytes, even when the file contains exactly two bytes: </p>  <pre class=\"longcode\"> b1 := al_fgetc (f); b2 := al_fgetc (f); <span class=\"pascal_keyword\">IF</span> al_feof (f) <span class=\"pascal_keyword\">THEN</span> <span class=\"pascal_comment\">{ At least one byte was unsuccessfully read. }</span>   ReportError ();</pre>  <p>       ", "tags": "", "loc": "Allegro5.html#al_feof"},
     {"title": "Allegro5.al_ferror", "text": " there was some sort of previous error. The error code may be system or file interface specific.       ", "tags": "", "loc": "Allegro5.html#al_ferror"},
     {"title": "Allegro5.al_ferrmsg", "text": " The returned string is empty if there was no error, or if the file interface does not provide more information.      ", "tags": "", "loc": "Allegro5.html#al_ferrmsg"},
     {"title": "Allegro5.al_fclearerr", "text": "  <p>The standard I/O backend also clears the end-of-file indicator, and other backends should try to do this. However, they may not if it would require too much effort (e.g. PhysicsFS backend), so your code should not rely on it if you need your code to be portable to other backends.      ", "tags": "", "loc": "Allegro5.html#al_fclearerr"},
     {"title": "Allegro5.al_fungetc", "text": " Pushed-back bytes are not written to the file, only made available for subsequent reads, in reverse order.  <p>The number of pushbacks depends on the backend. The standard I/O backend only guarantees a single pushback; this depends on the libc implementation.  <p>For backends that follow the standard behavior, the pushback buffer will be cleared after any seeking or writing; also calls to <a class=\"normal\" href=\"Allegro5.html#al_fseek\">al_fseek</a> and <a class=\"normal\" href=\"Allegro5.html#al_ftell\">al_ftell</a> are relative to the number of pushbacks. If a pushback causes the position to become negative, the behavior of <code>al_fseek</code> and <code>al_ftell</code> are undefined.      ", "tags": "", "loc": "Allegro5.html#al_fungetc"},
     {"title": "Allegro5.al_fsize", "text": "    ", "tags": "", "loc": "Allegro5.html#al_fsize"},
     {"title": "Allegro5.al_fgetc", "text": " Returns a negative number on end of file or if an error occurred.      ", "tags": "", "loc": "Allegro5.html#al_fgetc"},
     {"title": "Allegro5.al_fputc", "text": " The byte written is the value of <code>c</code> cast to an unsigned char.     c byte value to write. f file to write to. the written byte (cast back to an <a class=\"normal\" href=\"al5Base.html#AL_INT\">AL_INT</a>) on success, or negative number on error. c byte value to write. f file to write to.", "tags": "", "loc": "Allegro5.html#al_fputc"},
     {"title": "Allegro5.al_fread16le", "text": "  <p>    On success, the 16-bit word. On failure, returns EOF (-1). Since -1 is also a valid return value, use <a class=\"normal\" href=\"Allegro5.html#al_feof\">al_feof</a> to check if the end of the file was reached prematurely, or <a class=\"normal\" href=\"Allegro5.html#al_ferror\">al_ferror</a> to check if an error occurred. ", "tags": "", "loc": "Allegro5.html#al_fread16le"},
     {"title": "Allegro5.al_fread16be", "text": "     On success, the 16-bit word. On failure, returns EOF (-1). Since -1 is also a valid return value, use <a class=\"normal\" href=\"Allegro5.html#al_feof\">al_feof</a> to check if the end of the file was reached prematurely, or <a class=\"normal\" href=\"Allegro5.html#al_ferror\">al_ferror</a> to check if an error occurred. ", "tags": "", "loc": "Allegro5.html#al_fread16be"},
     {"title": "Allegro5.al_fwrite16le", "text": "     The number of bytes written: 2 on success, less than 2 on an error. ", "tags": "", "loc": "Allegro5.html#al_fwrite16le"},
     {"title": "Allegro5.al_fwrite16be", "text": "     The number of bytes written: 2 on success, less than 2 on an error. ", "tags": "", "loc": "Allegro5.html#al_fwrite16be"},
     {"title": "Allegro5.al_fread32le", "text": "     On success, the 32-bit word. On failure, returns EOF (-1). Since -1 is also a valid return value, use <a class=\"normal\" href=\"Allegro5.html#al_feof\">al_feof</a> to check if the end of the file was reached prematurely, or <a class=\"normal\" href=\"Allegro5.html#al_ferror\">al_ferror</a> to check if an error occurred. ", "tags": "", "loc": "Allegro5.html#al_fread32le"},
     {"title": "Allegro5.al_fread32be", "text": "     On success, the 32-bit word. On failure, returns EOF (-1). Since -1 is also a valid return value, use <a class=\"normal\" href=\"Allegro5.html#al_feof\">al_feof</a> to check if the end of the file was reached prematurely, or <a class=\"normal\" href=\"Allegro5.html#al_ferror\">al_ferror</a> to check if an error occurred. ", "tags": "", "loc": "Allegro5.html#al_fread32be"},
     {"title": "Allegro5.al_fwrite32le", "text": "     The number of bytes written: 2 on success, less than 2 on an error. ", "tags": "", "loc": "Allegro5.html#al_fwrite32le"},
     {"title": "Allegro5.al_fwrite32be", "text": "     The number of bytes written: 2 on success, less than 2 on an error. ", "tags": "", "loc": "Allegro5.html#al_fwrite32be"},
     {"title": "Allegro5.al_fgets", "text": " The line terminator(s), if any, are included in the returned string. A maximum of <code>max-1</code> bytes are read, with one byte being reserved for a <code>NUL</code> terminator.  <p>See <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a> about translations of end-of-line characters.       f File to read from. buf Buffer to fill. max Maximum size of buffer. The pointer to <code>buf</code> on success. Returns <code>Nil</code> if an error occurred or if the end of file was reached without reading any bytes. f File to read from. buf Buffer to fill. max Maximum size of buffer.", "tags": "", "loc": "Allegro5.html#al_fgets"},
     {"title": "Allegro5.al_fget_ustr", "text": " The line terminator(s), if any, are included in the returned string.  <p>See <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a> about translations of end-of-line characters.      On success a pointer to a new <a class=\"normal\" href=\"al5strings.html#ALLEGRO_USTR\">ALLEGRO_USTR</a> structure. This must be freed eventually with <a class=\"normal\" href=\"al5strings.html#al_ustr_free\">al_ustr_free</a>. Returns <code>Nil</code> if an error occurred or if the end of file was reached without reading any bytes. ", "tags": "", "loc": "Allegro5.html#al_fget_ustr"},
     {"title": "Allegro5.al_fputs", "text": " Apart from the return value, this is equivalent to <code><a class=\"normal\" href=\"Allegro5.html#al_fwrite\">al_fwrite</a> (f, p, Length (p));</code>  <p><b>Note</b>  <p>depending on the stream type and the mode passed to <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a>, newline characters in the string may or may not be automatically translated to native end-of-line sequences, e.g. <code>CR/LF</code> instead of <code>LF</code>.      f File handle to write to. p String to write. A non-negative integer on success, EOF (-1) on error. f File handle to write to. p String to write.", "tags": "", "loc": "Allegro5.html#al_fputs"},
     {"title": "Allegro5.al_fopen_slice", "text": " While the slice is open, the parent file handle must not be used in any way.  <p>The slice is opened at the current location of the parent file, up through <code>initial_size</code> bytes. The <code>initial_size</code> may be any non-negative integer that will not exceed the bounds of the parent file.  <p>Seeking with <code>ALLEGRO_SEEK_SET</code> will be relative to this starting location. <code>ALLEGRO_SEEK_END</code> will be relative to the starting location plus the size of the slice.  <p>The mode can be any combination of:</p>  <ul class=\"paragraph_spacing\">   <li><p>r: read access</p></li>   <li><p>w: write access</p></li>   <li><p>e: expandable</p></li> </ul>  <p>  <p>For example, a mode of <code>'rw'</code> indicates the file can be read and written. (Note that this is slightly different from the stdio modes.) Keep in mind that the parent file must support random access and be open in normal write mode (not append) for the slice to work in a well defined way.  <p>If the slice is marked as expandable, then reads and writes can happen after the initial end point, and the slice will grow accordingly. Otherwise, all activity is restricted to the initial size of the slice.  <p>A slice must be closed with <a class=\"normal\" href=\"Allegro5.html#al_fclose\">al_fclose</a>. The parent file will then be positioned immediately after the end of the slice.     ", "tags": "", "loc": "Allegro5.html#al_fopen_slice"},
     {"title": "Allegro5.al_get_new_file_interface", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_new_file_interface"},
     {"title": "Allegro5.al_set_new_file_interface", "text": " This will change the handler for later calls to <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a>.       ", "tags": "", "loc": "Allegro5.html#al_set_new_file_interface"},
     {"title": "Allegro5.al_set_standard_file_interface", "text": " This will change the handler for later calls to <a class=\"normal\" href=\"Allegro5.html#al_fopen\">al_fopen</a>.     ", "tags": "", "loc": "Allegro5.html#al_set_standard_file_interface"},
     {"title": "Allegro5.al_get_file_userdata", "text": " This is intended to be used by functions that extend <a class=\"normal\" href=\"Allegro5.ALLEGRO_FILE_INTERFACE.html\">ALLEGRO_FILE_INTERFACE</a>.    ", "tags": "", "loc": "Allegro5.html#al_get_file_userdata"},
     {"title": "Allegro5.al_register_bitmap_loader", "text": "       ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. loader The given function used to handle the loading of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry. <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. loader The given function used to handle the loading of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry.", "tags": "", "loc": "Allegro5.html#al_register_bitmap_loader"},
     {"title": "Allegro5.al_register_bitmap_saver", "text": "       ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. saver The given function used to handle the savint of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry. <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. saver The given function used to handle the savint of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry.", "tags": "", "loc": "Allegro5.html#al_register_bitmap_saver"},
     {"title": "Allegro5.al_register_bitmap_loader_f", "text": "      ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. fs_loader The given function used to handle the loading of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry. <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. fs_loader The given function used to handle the loading of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry.", "tags": "", "loc": "Allegro5.html#al_register_bitmap_loader_f"},
     {"title": "Allegro5.al_register_bitmap_saver_f", "text": "      ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. fs_saver The given function used to handle the savint of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry. <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ext File extension. It should include the leading dot ('.') character. It will be matched case-insensitively. fs_saver The given function used to handle the savint of bitmaps files with the given extension. It may be <code>Nil</code> to unregister an entry.", "tags": "", "loc": "Allegro5.html#al_register_bitmap_saver_f"},
     {"title": "Allegro5.al_register_bitmap_identifier", "text": " The given function will be used to detect files for the given extension. It will be called with a single argument of type <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_FILEptr\">ALLEGRO_FILEptr</a> which is a file handle opened for reading and located at the first byte of the file. The handler should try to read as few bytes as possible to safely determine if the given file contents correspond to the type with the extension and return <code>True</code> in that case, <code>False</code> otherwise. The file handle must not be closed but there is no need to reset it to the beginning.      ext The extension. It should include the leading dot ('.') character. It will be matched case-insensitively. identifier The identifier handler. It may be <code>Nil</code> to unregister an entry. <code>True</code> on success, <code>False</code> on error. Returns <code>False</code> if unregistering an entry that doesn't exist. ext The extension. It should include the leading dot ('.') character. It will be matched case-insensitively. identifier The identifier handler. It may be <code>Nil</code> to unregister an entry.", "tags": "", "loc": "Allegro5.html#al_register_bitmap_identifier"},
     {"title": "Allegro5.al_load_bitmap", "text": " The file type is determined by the extension, except if the file has no extension in which case <code>al_identify_bitmap</code> is used instead.  <p>This is the same as calling <code>al_load_bitmap_flags</code> with a flags parameter of 0.  <p><b>Note</b>  <p>the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.          A pointer to the loaded bitmap or <code>Nil</code> on error. ", "tags": "", "loc": "Allegro5.html#al_load_bitmap"},
     {"title": "Allegro5.al_load_bitmap_flags", "text": " The file type is determined by the extension, except if the file has no extension in which case <a class=\"normal\" href=\"Allegro5.html#al_identify_bitmap\">al_identify_bitmap</a> is used instead.  <p><code>Note:</code> the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.      filename The file to load. flags It may be a combination of the following constants: </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_NO_PREMULTIPLIED_ALPHA</code></b> By default, Allegro pre-multiplies the alpha channel of an image with the images color data when it loads it. Typically that would look something like this: </p>  <pre class=\"longcode\"> r := get_float_byte; g := get_float_byte; b := get_float_byte; a := get_float_byte;  r := r * a; g := g * a; b := b * a;  set_image_pixel (x, y, r, g, b, a);</pre>  <p> The reason for this can be seen in the Allegro example <code>ex_premulalpha</code>, ie, using pre-multiplied alpha gives more accurate color results in some cases. To use alpha blending with images loaded with pre-multiplied alpha, you would use the default blending mode, which is set with <code>al_set_blender (ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_INVERSE_ALPHA)</code>.  <p>The <code>ALLEGRO_NO_PREMULTIPLIED_ALPHA</code> flag being set will ensure that images are not loaded with alpha pre-multiplied, but are loaded with color values direct from the image. That looks like this: </p>  <pre class=\"longcode\"> r := get_float_byte; g := get_float_byte; b := get_float_byte; a := get_float_byte;  set_image_pixel (x, y, r, g, b, a);</pre>  <p> To draw such an image using regular alpha blending, you would use <code>al_set_blender (ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA)</code> to set the correct blender. This has some caveats. First, as mentioned above, drawing such an image can result in less accurate color blending (when drawing an image with linear filtering on, the edges will be darker than they should be). Second, the behaviour is somewhat confusing, which is explained in the example below. </p>  <pre class=\"longcode\"> <span class=\"pascal_comment\">{ Load and create bitmaps with an alpha channel. }</span>   al_set_new_bitmap_format (ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA); <span class=\"pascal_comment\">{ Load some bitmap with alpha in it. }</span>   bmp := al_load_bitmap (<span class=\"pascal_string\">'some_alpha_bitmap.png'</span>); <span class=\"pascal_comment\">{ We will draw to this buffer and then draw this buffer to the screen. }</span>   tmp_buffer := al_create_bitmap (SCREEN_W, SCREEN_H); <span class=\"pascal_comment\">{ Set the buffer as the target and clear it. }</span>   al_set_target_bitmap (tmp_buffer);   al_clear_to_color (al_map_rgba_f (<span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">1</span>)); <span class=\"pascal_comment\">{ Draw the bitmap to the temporary buffer. }</span>   al_draw_bitmap (bmp, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>); <span class=\"pascal_comment\">{ Finally, draw the buffer to the screen.   The output will look incorrect (may take close inspection   depending on the bitmap -- it may also be very obvious). }</span>   al_set_target_bitmap (al_get_backbuffer (display));   al_draw_bitmap (tmp_buffer, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>);</pre>  <p> To explain further, if you have a pixel with 0.5 alpha, and you're using <code>(ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA)</code> for blending, the formula is: </p>  <pre class=\"preformatted\"> a := da * dst + sa * src</pre>  <p> Expands to: </p>  <pre class=\"longcode\"> result_a := dst_a * (<span class=\"pascal_numeric\">1</span>-0.<span class=\"pascal_numeric\">5</span>) + <span class=\"pascal_float\">0.5</span> * </pre>  <p> So if you draw the image to the temporary buffer, it is blended once resulting in 0.75 alpha, then drawn again to the screen, blended in the same way, resulting in a pixel has 0.1875 as an alpha value.</p></li>   <li><p><b><code>ALLEGRO_KEEP_INDEX</code></b>  <p>Load the palette indices of 8-bit .bmp and .pcx files instead of the rgb colors.</p></li>   <li><p><b><code>ALLEGRO_KEEP_BITMAP_FORMAT</code></b>  <p>Force the resulting ALLEGRO_BITMAP to use the same format as the file.  <p><i>This is not yet honoured.</i></p></li> </ul>  <p> A pointer to the loaded bitmap or <code>Nil</code> on error. filename The file to load. flags It may be a combination of the following constants: </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_NO_PREMULTIPLIED_ALPHA</code></b> By default, Allegro pre-multiplies the alpha channel of an image with the images color data when it loads it. Typically that would look something like this: </p>  <pre class=\"longcode\"> r := get_float_byte; g := get_float_byte; b := get_float_byte; a := get_float_byte;  r := r * a; g := g * a; b := b * a;  set_image_pixel (x, y, r, g, b, a);</pre>  <p> The reason for this can be seen in the Allegro example <code>ex_premulalpha</code>, ie, using pre-multiplied alpha gives more accurate color results in some cases. To use alpha blending with images loaded with pre-multiplied alpha, you would use the default blending mode, which is set with <code>al_set_blender (ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_INVERSE_ALPHA)</code>.  <p>The <code>ALLEGRO_NO_PREMULTIPLIED_ALPHA</code> flag being set will ensure that images are not loaded with alpha pre-multiplied, but are loaded with color values direct from the image. That looks like this: </p>  <pre class=\"longcode\"> r := get_float_byte; g := get_float_byte; b := get_float_byte; a := get_float_byte;  set_image_pixel (x, y, r, g, b, a);</pre>  <p> To draw such an image using regular alpha blending, you would use <code>al_set_blender (ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA)</code> to set the correct blender. This has some caveats. First, as mentioned above, drawing such an image can result in less accurate color blending (when drawing an image with linear filtering on, the edges will be darker than they should be). Second, the behaviour is somewhat confusing, which is explained in the example below. </p>  <pre class=\"longcode\"> <span class=\"pascal_comment\">{ Load and create bitmaps with an alpha channel. }</span>   al_set_new_bitmap_format (ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA); <span class=\"pascal_comment\">{ Load some bitmap with alpha in it. }</span>   bmp := al_load_bitmap (<span class=\"pascal_string\">'some_alpha_bitmap.png'</span>); <span class=\"pascal_comment\">{ We will draw to this buffer and then draw this buffer to the screen. }</span>   tmp_buffer := al_create_bitmap (SCREEN_W, SCREEN_H); <span class=\"pascal_comment\">{ Set the buffer as the target and clear it. }</span>   al_set_target_bitmap (tmp_buffer);   al_clear_to_color (al_map_rgba_f (<span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">1</span>)); <span class=\"pascal_comment\">{ Draw the bitmap to the temporary buffer. }</span>   al_draw_bitmap (bmp, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>); <span class=\"pascal_comment\">{ Finally, draw the buffer to the screen.   The output will look incorrect (may take close inspection   depending on the bitmap -- it may also be very obvious). }</span>   al_set_target_bitmap (al_get_backbuffer (display));   al_draw_bitmap (tmp_buffer, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>);</pre>  <p> To explain further, if you have a pixel with 0.5 alpha, and you're using <code>(ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA)</code> for blending, the formula is: </p>  <pre class=\"preformatted\"> a := da * dst + sa * src</pre>  <p> Expands to: </p>  <pre class=\"longcode\"> result_a := dst_a * (<span class=\"pascal_numeric\">1</span>-0.<span class=\"pascal_numeric\">5</span>) + <span class=\"pascal_float\">0.5</span> * </pre>  <p> So if you draw the image to the temporary buffer, it is blended once resulting in 0.75 alpha, then drawn again to the screen, blended in the same way, resulting in a pixel has 0.1875 as an alpha value.</p></li>   <li><p><b><code>ALLEGRO_KEEP_INDEX</code></b>  <p>Load the palette indices of 8-bit .bmp and .pcx files instead of the rgb colors.</p></li>   <li><p><b><code>ALLEGRO_KEEP_BITMAP_FORMAT</code></b>  <p>Force the resulting ALLEGRO_BITMAP to use the same format as the file.  <p><i>This is not yet honoured.</i></p></li> </ul>  <p>", "tags": "", "loc": "Allegro5.html#al_load_bitmap_flags"},
     {"title": "Allegro5.al_load_bitmap_f", "text": " The file type is determined by the passed <code>ident</code> parameter, which is a file name extension including the leading dot. If (and only if) <code>ident</code> is an empty string, the file type is determined with <a class=\"normal\" href=\"Allegro5.html#al_identify_bitmap_f\">al_identify_bitmap_f</a> instead.  <p>This is the same as calling <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap_flags_f\">al_load_bitmap_flags_f</a> with <code>0</code> for the <code>flags</code> parameter.  <p><b>Note</b>  <p>the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.        A pointer to the loaded bitmap or <code>Nil</code> on error. The file remains open afterwards. ", "tags": "", "loc": "Allegro5.html#al_load_bitmap_f"},
     {"title": "Allegro5.al_load_bitmap_flags_f", "text": " The file type is determined by the passed <code>ident</code> parameter, which is a file name extension including the leading dot. If (and only if) <code>ident</code> is an empty string, the file type is determined with <a class=\"normal\" href=\"Allegro5.html#al_identify_bitmap_f\">al_identify_bitmap_f</a> instead.  <p>The <code>flags</code> parameter is the same as for <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap_flags\">al_load_bitmap_flags</a>.  <p><b>Note</b>  <p>the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.      A pointer to the loaded bitmap or <code>Nil</code> on error. The file remains open afterwards. ", "tags": "", "loc": "Allegro5.html#al_load_bitmap_flags_f"},
     {"title": "Allegro5.al_save_bitmap", "text": " The file type is determined by the extension.  <p><b>Note</b>  <p>the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.       <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "Allegro5.html#al_save_bitmap"},
     {"title": "Allegro5.al_save_bitmap_f", "text": " The file type is determined by the passed <code>ident</code> parameter, which is a file name extension including the leading dot.  <p><b>Note</b>  <p>the core Allegro library does not support any image file formats by default. You must use the <a class=\"normal\" href=\"al5image.html\">al5image</a> addon, or register your own format handler.       <code>True</code> on success, <code>False</code> on error. The file remains open afterwards. ", "tags": "", "loc": "Allegro5.html#al_save_bitmap_f"},
     {"title": "Allegro5.al_identify_bitmap_f", "text": " The extension, if any, of the passed filename is not taken into account - only the file contents. By default Allegro cannot recognize any file types, but calling <a class=\"normal\" href=\"al5image.html#al_init_image_addon\">al_init_image_addon</a> will add detection of (some of) the types it can read. You can also use <a class=\"normal\" href=\"Allegro5.html#al_register_bitmap_identifier\">al_register_bitmap_identifier</a> to add identification of custom file types.       a pointer to a static string with a file extension for the type, including the leading dot. For example &quot;.png&quot; or &quot;.jpg&quot;. Returns <code>Nil</code> if the bitmap type cannot be determined. ", "tags": "", "loc": "Allegro5.html#al_identify_bitmap_f"},
     {"title": "Allegro5.al_identify_bitmap", "text": " The extension, if any, of the passed filename is not taken into account - only the file contents.       ", "tags": "", "loc": "Allegro5.html#al_identify_bitmap"},
     {"title": "Allegro5.al_lock_bitmap", "text": " If the bitmap is a display bitmap it will be updated from system memory after the bitmap is unlocked (unless locked read only).  <p>On some platforms, Allegro automatically backs up the contents of video bitmaps because they may be occasionally lost (see discussion in <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a>'s documentation). If you're completely recreating the bitmap contents often (e.g. every frame) then you will get much better performance by creating the target bitmap with <code>ALLEGRO_NO_PRESERVE_TEXTURE</code> flag.  <p><b>Note</b>  <p>While a bitmap is locked, you can not use any drawing operations on it (with the sole exception of <a class=\"normal\" href=\"Allegro5.html#al_put_pixel\">al_put_pixel</a> and <a class=\"normal\" href=\"Allegro5.html#al_put_blended_pixel\">al_put_blended_pixel</a>).           flags </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_LOCK_READONLY</code> The locked region will not be written to. This can be faster if the bitmap is a video texture, as it can be discarded after the lock instead of uploaded back to the card.</p></li>   <li><p><code>ALLEGRO_LOCK_WRITEONLY</code> The locked region will not be read from. This can be faster if the bitmap is a video texture, as no data need to be read from the video card. You are required to fill in all pixels before unlocking the bitmap again, so be careful when using this flag.</p></li>   <li><p><code>ALLEGRO_LOCK_READWRITE</code> The locked region can be written to and read from. Use this flag if a partial number of pixels need to be written to, even if reading is not needed.</p></li> </ul>  <p> format Indicates the pixel format that the returned buffer will be in. To lock in the same format as the bitmap stores its data internally, call with <code>al_get_bitmap_format (bitmap)</code> as the format or use <code>ALLEGRO_PIXEL_FORMAT_ANY</code>. Locking in the native format will usually be faster. If the bitmap format is compressed, using <code>ALLEGRO_PIXEL_FORMAT_ANY</code> will choose an implementation defined non-compressed format. <code>Nil</code> if the bitmap cannot be locked, e.g. the bitmap was locked previously and not unlocked. It also returns <code>Nil</code> if the format is a compressed format. flags </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_LOCK_READONLY</code> The locked region will not be written to. This can be faster if the bitmap is a video texture, as it can be discarded after the lock instead of uploaded back to the card.</p></li>   <li><p><code>ALLEGRO_LOCK_WRITEONLY</code> The locked region will not be read from. This can be faster if the bitmap is a video texture, as no data need to be read from the video card. You are required to fill in all pixels before unlocking the bitmap again, so be careful when using this flag.</p></li>   <li><p><code>ALLEGRO_LOCK_READWRITE</code> The locked region can be written to and read from. Use this flag if a partial number of pixels need to be written to, even if reading is not needed.</p></li> </ul>  <p> format Indicates the pixel format that the returned buffer will be in. To lock in the same format as the bitmap stores its data internally, call with <code>al_get_bitmap_format (bitmap)</code> as the format or use <code>ALLEGRO_PIXEL_FORMAT_ANY</code>. Locking in the native format will usually be faster. If the bitmap format is compressed, using <code>ALLEGRO_PIXEL_FORMAT_ANY</code> will choose an implementation defined non-compressed format.", "tags": "", "loc": "Allegro5.html#al_lock_bitmap"},
     {"title": "Allegro5.al_lock_bitmap_region", "text": " If the bitmap is a video bitmap, only that area of the texture will be updated when it is unlocked. Locking only the region you indend to modify will be faster than locking the whole bitmap.  <p><b>Note</b>  <p>Using the <code>ALLEGRO_LOCK_WRITEONLY</code> with a blocked pixel format (i.e. formats for which <a class=\"normal\" href=\"Allegro5.html#al_get_pixel_block_width\">al_get_pixel_block_width</a> or <a class=\"normal\" href=\"Allegro5.html#al_get_pixel_block_height\">al_get_pixel_block_height</a> do not return 1) requires you to have the region be aligned to the block width for optimal performance. If it is not, then the function will have to lock the region with the <code>ALLEGRO_LOCK_READWRITE</code> instead in order to pad this region with valid data.       ", "tags": "", "loc": "Allegro5.html#al_lock_bitmap_region"},
     {"title": "Allegro5.al_lock_bitmap_blocked", "text": " a format for which <a class=\"normal\" href=\"Allegro5.html#al_get_pixel_block_width\">al_get_pixel_block_width</a> or <a class=\"normal\" href=\"Allegro5.html#al_get_pixel_block_height\">al_get_pixel_block_height</a> do not return 1) in that format. To that end, this function also does not allow format conversion. For bitmap formats with a block size of 1, this function is identical to calling <code>al_lock_bitmap (bmp, al_get_bitmap_format (bmp), flags)</code>.  <p><b>Note</b>  <p>Currently there are no drawing functions that work when the bitmap is locked with a compressed format. <a class=\"normal\" href=\"Allegro5.html#al_get_pixel\">al_get_pixel</a> will also not work.      ", "tags": "", "loc": "Allegro5.html#al_lock_bitmap_blocked"},
     {"title": "Allegro5.al_lock_bitmap_region_blocked", "text": " Unlike <a class=\"normal\" href=\"Allegro5.html#al_lock_bitmap_region\">al_lock_bitmap_region</a> the region specified in terms of blocks and not pixels.      ", "tags": "", "loc": "Allegro5.html#al_lock_bitmap_region_blocked"},
     {"title": "Allegro5.al_unlock_bitmap", "text": " If the bitmap is a video bitmap, the texture will be updated to match the system memory copy (unless it was locked read only).        ", "tags": "", "loc": "Allegro5.html#al_unlock_bitmap"},
     {"title": "Allegro5.al_is_bitmap_locked", "text": "       ", "tags": "", "loc": "Allegro5.html#al_is_bitmap_locked"},
     {"title": "Allegro5.al_set_blender", "text": "  <p>Blending means, the source and destination colors are combined in drawing operations.  <p>Assume the source color (e.g. color of a rectangle to draw, or pixel of a bitmap to draw) is given as its red/green/blue/alpha components (if the bitmap has no alpha it always is assumed to be fully opaque, so 255 for 8-bit or 1.0 for floating point): <i>s = s.r, s.g, s.b, s.a</i>. And this color is drawn to a destination, which already has a color: <i>d = d.r, d.g, d.b, d.a</i>.  <p>The conceptional formula used by Allegro to draw any pixel then depends on the <code>op</code> parameter: </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_ADD</code> </p>  <pre class=\"preformatted\"> r = d.r * df.r + s.r * sf.r g = d.g * df.g + s.g * sf.g b = d.b * df.b + s.b * sf.b a = d.a * df.a + s.a * sf.a</pre>  <p></p></li>   <li><p><code>ALLEGRO_DEST_MINUS_SRC</code> </p>  <pre class=\"preformatted\"> r = d.r * df.r - s.r * sf.r g = d.g * df.g - s.g * sf.g b = d.b * df.b - s.b * sf.b a = d.a * df.a - s.a * sf.a</pre>  <p></p></li>   <li><p><code>ALLEGRO_SRC_MINUS_DEST</code> </p>  <pre class=\"preformatted\"> r = s.r * sf.r - d.r * df.r g = s.g * sf.g - d.g * df.g b = s.b * sf.b - d.b * df.b a = s.a * sf.a - d.a * df.a</pre>  <p></p></li> </ul>  <p> Valid values for the factors <i>sf</i> and <i>df</i> passed to this function are as follows, where <i>s</i> is the source color, <i>d</i> the destination color and <i>cc</i> the color set with <a class=\"normal\" href=\"Allegro5.html#al_set_blend_color\">al_set_blend_color</a> (white by default) </p>  <ul class=\"paragraph_spacing\">   <li><p><b>ALLEGRO_ZERO</b> <code>f = 0, 0, 0, 0</code></p></li>   <li><p><b>ALLEGRO_ONE</b> <code>f = 1, 1, 1, 1</code></p></li>   <li><p><b>ALLEGRO_ALPHA</b> <code>f = s.a, s.a, s.a, s.a</code></p></li>   <li><p><b>ALLEGRO_INVERSE_ALPHA</b> <code>f = 1 - s.a, 1 - s.a, 1 - s.a, 1 - s.a</code></p></li>   <li><p><b>ALLEGRO_SRC_COLOR</b> <code>f = s.r, s.g, s.b, s.a</code></p></li>   <li><p><b>ALLEGRO_DEST_COLOR</b> <code>f = d.r, d.g, d.b, d.a</code></p></li>   <li><p><b>ALLEGRO_INVERSE_SRC_COLOR</b> <code>f = 1 - s.r, 1 - s.g, 1 - s.b, 1 - s.a</code></p></li>   <li><p><b>ALLEGRO_INVERSE_DEST_COLOR</b> <code>f = 1 - d.r, 1 - d.g, 1 - d.b, 1 - d.a</code></p></li>   <li><p><b>ALLEGRO_CONST_COLOR</b> <code>f = cc.r, cc.g, cc.b, cc.a</code></p></li>   <li><p><b>ALLEGRO_INVERSE_CONST_COLOR</b> <code>f = 1 - cc.r, 1 - cc.g, 1 - cc.b, 1 - cc.a</code></p></li> </ul>  <p> So for example, to restore the default of using premultiplied alpha blending, you would use: </p>  <pre class=\"longcode\"> al_set_blender (ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_INVERSE_ALPHA);</pre>  <p> As formula: </p>  <pre class=\"preformatted\"> r = d.r * (1 - s.a) + s.r * 1 g = d.g * (1 - s.a) + s.g * 1 b = d.b * (1 - s.a) + s.b * 1 a = d.a * (1 - s.a) + s.a * 1</pre>  <p> If you are using non-pre-multiplied alpha, you could use </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA);</pre>  <p> Additive blending would be achieved with </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_ONE);</pre>  <p> Copying the source to the destination (including alpha) unmodified </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_ZERO);</pre>  <p> Multiplying source and destination components </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_DEST_COLOR, ALLEGRO_ZERO)</pre>  <p> Tinting the source (like <a class=\"normal\" href=\"Allegro5.html#al_draw_tinted_bitmap\">al_draw_tinted_bitmap</a>) </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_CONST_COLOR, ALLEGRO_ONE); al_set_blend_color(al_map_rgb(<span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">96</span>, <span class=\"pascal_numeric\">255</span>)); <span class=\"pascal_comment\">{ nice Chrysler blue }</span></pre>  <p> Averaging source and destination pixels </p>  <pre class=\"longcode\"> al_set_blender(ALLEGRO_ADD, ALLEGRO_CONST_COLOR, ALLEGRO_CONST_COLOR); al_set_blend_color(al_map_rgba_f(<span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>, <span class=\"pascal_float\">0.5</span>));</pre>  <p> As formula: </p>  <pre class=\"preformatted\"> r = d.r * 0 + s.r * d.r g = d.g * 0 + s.g * d.g b = d.b * 0 + s.b * d.b a = d.a * 0 + s.a * d.a</pre>  <p>       ", "tags": "", "loc": "Allegro5.html#al_set_blender"},
     {"title": "Allegro5.al_set_blend_color", "text": " See <a class=\"normal\" href=\"Allegro5.html#al_set_blender\">al_set_blender</a> for more information.      ", "tags": "", "loc": "Allegro5.html#al_set_blend_color"},
     {"title": "Allegro5.al_get_blender", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_blender"},
     {"title": "Allegro5.al_get_blend_color", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_blend_color"},
     {"title": "Allegro5.al_set_separate_blender", "text": " This is useful if your target bitmap also has an alpha channel and the two alpha channels need to be combined in a different way than the color components.       ", "tags": "", "loc": "Allegro5.html#al_set_separate_blender"},
     {"title": "Allegro5.al_get_separate_blender", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_separate_blender"},
     {"title": "Allegro5.ALLEGRO_EVENT_TYPE_IS_USER", "text": " one of those described in <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TYPE\">ALLEGRO_EVENT_TYPE</a>.     ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TYPE_IS_USER"},
     {"title": "Allegro5.ALLEGRO_GET_EVENT_TYPE", "text": " Usually, but not necessarily, this will be made from four 8-bit character codes, for example: </p>  <pre class=\"longcode\"> MY_EVENT_TYPE := ALLEGRO_GET_EVENT_TYPE (<span class=\"pascal_string\">'MINE'</span>);</pre>  <p> IDs less than 1024 are reserved for Allegro or its addons. Don't use anything lower than <code>ALLEGRO_GET_EVENT_TYPE (#0#0#4#0)</code>.  <p>You should try to make your IDs unique so they don't clash with any 3rd party code you may be using. Be creative. Numbering from 1024 is not creative.  <p>If you need multiple identifiers, you could define them like this: </p>  <pre class=\"longcode\"> BASE_EVENT := ALLEGRO_GET_EVENT_TYPE (<span class=\"pascal_string\">'MINE'</span>); BARK_EVENT := BASE_EVENT + <span class=\"pascal_numeric\">1</span>; MEOW_EVENT := BASE_EVENT + <span class=\"pascal_numeric\">2</span>; SQUAWK_EVENT := BASE_EVENT + <span class=\"pascal_numeric\">3</span>;</pre>  <p>       ", "tags": "", "loc": "Allegro5.html#ALLEGRO_GET_EVENT_TYPE"},
     {"title": "Allegro5.al_init_user_event_source", "text": " The space for the event source must already have been allocated.  <p>One possible way of creating custom event sources is to derive other structures with <code>ALLEGRO_EVENT_SOURCE</code> at the head, e.g. </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">TYPE</span>   THINGptr = &circ;THING;   THING = <span class=\"pascal_keyword\">RECORD</span>     event_source: ALLEGRO_EVENT_SOURCE;     field1, field2: INTEGER;     <span class=\"pascal_comment\">{ etc. }</span>   <span class=\"pascal_keyword\">END</span>;  <span class=\"pascal_keyword\">FUNCTION</span> CreateThing: THINGptr; <span class=\"pascal_keyword\">BEGIN</span>   RESULT := getmem (sizeof (THING));   <span class=\"pascal_keyword\">IF</span> RESULT &lt;&gt; <span class=\"pascal_keyword\">NIL</span> <span class=\"pascal_keyword\">THEN</span>   <span class=\"pascal_keyword\">BEGIN</span>     al_init_user_event_source (@(RESULT&circ;<span class=\"pascal_float\">.</span>event_source));     RESULT&circ;<span class=\"pascal_float\">.</span>field1 := <span class=\"pascal_numeric\">0</span>;     RESULT&circ;<span class=\"pascal_float\">.</span>field2 := <span class=\"pascal_numeric\">0</span>   <span class=\"pascal_keyword\">END</span> <span class=\"pascal_keyword\">END</span>;</pre>  <p>  <p>The advantage here is that the <code>THING</code> pointer will be the same as the <code>ALLEGRO_EVENT_SOURCE</code> pointer. Events emitted by the event source will have the event source pointer as the source field, from which you can get a pointer to a <code>THING</code> by a simple cast (after ensuring checking the event is of the correct type).  <p>However, it is only one technique and you are not obliged to use it.  <p>The user event source will never be destroyed automatically. You must destroy it manually with <code>al_destroy_user_event_source</code>.        ", "tags": "", "loc": "Allegro5.html#al_init_user_event_source"},
     {"title": "Allegro5.al_destroy_user_event_source", "text": "  <p>This does not free the memory, as that was user allocated to begin with.     ", "tags": "", "loc": "Allegro5.html#al_destroy_user_event_source"},
     {"title": "Allegro5.al_emit_user_event", "text": " The event source must have been initialised with <a class=\"normal\" href=\"Allegro5.html#al_init_user_event_source\">al_init_user_event_source</a>.   <p>Events are copied in and out of event queues, so after this function returns the memory pointed to by event may be freed or reused. Some fields of the event being passed in may be modified by the function.  <p>Reference counting will be performed if <code>dtor</code> is not <code>Nil</code>. Whenever a copy of the event is made, the reference count increases. You need to call <a class=\"normal\" href=\"Allegro5.html#al_unref_user_event\">al_unref_user_event</a> to decrease the reference count once you are done with a user event that you have received from <a class=\"normal\" href=\"Allegro5.html#al_get_next_event\">al_get_next_event</a>, <a class=\"normal\" href=\"Allegro5.html#al_peek_next_event\">al_peek_next_event</a>, <a class=\"normal\" href=\"Allegro5.html#al_wait_for_event\">al_wait_for_event</a>, etc.  <p>Once the reference count drops to zero <code>dtor</code> will be called with a copy of the event as an argument. It should free the resources associated with the event, but not the event itself (since it is just a copy).  <p>If <code>dtor</code> is <code>Nil</code> then reference counting will not be performed. It is safe, but unnecessary, to call <code>al_unref_user_event</code> on non-reference counted user events.  <p>You can use <code>al_emit_user_event</code> to emit both user and non-user events from your user event source. Note that emitting input events will not update the corresponding input device states. For example, you may emit an event of type <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_KEY_DOWN\">ALLEGRO_EVENT_KEY_DOWN</a>, but it will not update the <a class=\"normal\" href=\"Allegro5.ALLEGRO_KEYBOARD_STATE.html\">ALLEGRO_KEYBOARD_STATE</a> returned by <a class=\"normal\" href=\"Allegro5.html#al_get_keyboard_state\">al_get_keyboard_state</a>.      <code>False</code> if the event source isn't registered with any queues, hence the event wouldn't have been delivered into any queues. ", "tags": "", "loc": "Allegro5.html#al_emit_user_event"},
     {"title": "Allegro5.al_unref_user_event", "text": " This must be called on any user event that you get from <a class=\"normal\" href=\"Allegro5.html#al_get_next_event\">al_get_next_event</a>, <a class=\"normal\" href=\"Allegro5.html#al_peek_next_event\">al_peek_next_event</a>, <a class=\"normal\" href=\"Allegro5.html#al_wait_for_event\">al_wait_for_event</a>, etc. which is reference counted. This function does nothing if the event is not reference counted.      ", "tags": "", "loc": "Allegro5.html#al_unref_user_event"},
     {"title": "Allegro5.al_set_event_source_data", "text": " Allegro does not use the data internally for anything; it is simply meant as a convenient way to associate your own data or objects with events.     ", "tags": "", "loc": "Allegro5.html#al_set_event_source_data"},
     {"title": "Allegro5.al_get_event_source_data", "text": " If no data was previously set, returns <code>Nil</code>.     ", "tags": "", "loc": "Allegro5.html#al_get_event_source_data"},
     {"title": "Allegro5.al_create_event_queue", "text": "      A pointer to the newly created object if successful, <code>Nil</code> on error. ", "tags": "", "loc": "Allegro5.html#al_create_event_queue"},
     {"title": "Allegro5.al_destroy_event_queue", "text": " All event sources currently registered with the queue will be automatically unregistered before the queue is destroyed.      ", "tags": "", "loc": "Allegro5.html#al_destroy_event_queue"},
     {"title": "Allegro5.al_is_event_source_registered", "text": "    ", "tags": "", "loc": "Allegro5.html#al_is_event_source_registered"},
     {"title": "Allegro5.al_register_event_source", "text": " An event source may be registered with any number of event queues simultaneously, or none. Trying to register an event source with the same event queue more than once does nothing.      ", "tags": "", "loc": "Allegro5.html#al_register_event_source"},
     {"title": "Allegro5.al_unregister_event_source", "text": " If the event source is not actually registered with the event queue, nothing happens.  <p>If the queue had any events in it which originated from the event source, they will no longer be in the queue after this call.     ", "tags": "", "loc": "Allegro5.html#al_unregister_event_source"},
     {"title": "Allegro5.al_pause_event_queue", "text": " Events already in the queue are unaffected.  <p>While a queue is paused, any events which would be entered into the queue are simply ignored. This is an alternative to unregistering then re-registering all event sources from the event queue, if you just need to prevent events piling up in the queue for a while.     ", "tags": "", "loc": "Allegro5.html#al_pause_event_queue"},
     {"title": "Allegro5.al_is_event_queue_paused", "text": "     ", "tags": "", "loc": "Allegro5.html#al_is_event_queue_paused"},
     {"title": "Allegro5.al_is_event_queue_empty", "text": "      ", "tags": "", "loc": "Allegro5.html#al_is_event_queue_empty"},
     {"title": "Allegro5.al_get_next_event", "text": " The original event will be removed from the queue. If the event queue is empty, returns <code>False</code> and the contents of <code>ret_event</code> are unspecified.       ", "tags": "", "loc": "Allegro5.html#al_get_next_event"},
     {"title": "Allegro5.al_peek_next_event", "text": " The original event packet will remain at the head of the queue. If the event queue is actually empty, this function returns <code>False</code> and the contents of <code>ret_event</code> are unspecified.       ", "tags": "", "loc": "Allegro5.html#al_peek_next_event"},
     {"title": "Allegro5.al_drop_next_event", "text": " If the queue is empty, nothing happens.      queue Pointer to the queue. (<code>True</code>) if an event was dropped. queue Pointer to the queue.", "tags": "", "loc": "Allegro5.html#al_drop_next_event"},
     {"title": "Allegro5.al_flush_event_queue", "text": "      ", "tags": "", "loc": "Allegro5.html#al_flush_event_queue"},
     {"title": "Allegro5.al_wait_for_event", "text": " If <code>ret_event</code> is not <code>Nil</code>, the first event in the queue will be copied into <code>ret_event</code> and removed from the queue. If <code>ret_event</code> is <code>Nil</code> the first event is left at the head of the queue.        ", "tags": "", "loc": "Allegro5.html#al_wait_for_event"},
     {"title": "Allegro5.al_wait_for_event_timed", "text": "        queue Pointer to the queue. ret_event If it is not <code>Nil</code>, the first event in the queue will be copied into <code>ret_event</code> and removed from the queue. If it is <code>Nil</code> the first event is left at the head of the queue. secs Determines approximately how many seconds to wait. If the call times out, <code>False</code> is returned. Otherwise, if an event ocurred, <code>True</code> is returned. For compatibility with all platforms, <code>secs</code> must be 2,147,483.647 seconds or less.  queue Pointer to the queue. ret_event If it is not <code>Nil</code>, the first event in the queue will be copied into <code>ret_event</code> and removed from the queue. If it is <code>Nil</code> the first event is left at the head of the queue. secs Determines approximately how many seconds to wait. If the call times out, <code>False</code> is returned. Otherwise, if an event ocurred, <code>True</code> is returned. For compatibility with all platforms, <code>secs</code> must be 2,147,483.647 seconds or less.", "tags": "", "loc": "Allegro5.html#al_wait_for_event_timed"},
     {"title": "Allegro5.al_wait_for_event_until", "text": "         queue Pointer to the queue. ret_event If it is not <code>Nil</code>, the first event in the queue will be copied into <code>ret_event</code> and removed from the queue. If it is <code>Nil</code> the first event is left at the head of the queue. timeout Determines how long to wait. If the call times out, <code>False</code> is returned. Otherwise, if an event ocurred, <code>True</code> is returned. For compatibility with all platforms, <code>timeout</code> must be 2,147,483.647 seconds or less.  queue Pointer to the queue. ret_event If it is not <code>Nil</code>, the first event in the queue will be copied into <code>ret_event</code> and removed from the queue. If it is <code>Nil</code> the first event is left at the head of the queue. timeout Determines how long to wait. If the call times out, <code>False</code> is returned. Otherwise, if an event ocurred, <code>True</code> is returned. For compatibility with all platforms, <code>timeout</code> must be 2,147,483.647 seconds or less.", "tags": "", "loc": "Allegro5.html#al_wait_for_event_until"},
     {"title": "Allegro5.al_set_new_display_refresh_rate", "text": " If the refresh rate is not available, <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a> will fail. A list of modes with refresh rates can be found with <a class=\"normal\" href=\"Allegro5.html#al_get_num_display_modes\">al_get_num_display_modes</a> and <a class=\"normal\" href=\"Allegro5.html#al_get_display_mode\">al_get_display_mode</a>.  <p>The default setting is zero (don't care).     ", "tags": "", "loc": "Allegro5.html#al_set_new_display_refresh_rate"},
     {"title": "Allegro5.al_set_new_display_flags", "text": " flags is a bitfield containing any reasonable combination of the following: </p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_WINDOWED</code></b> Prefer a windowed mode.  <p>Under multi-head X (not XRandR/TwinView), the use of more than one adapter is impossible due to bugs in X and GLX. <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a> will fail if more than one adapter is attempted to be used.</p></li>   <li><p><b><code>ALLEGRO_FULLSCREEN_WINDOW</code></b> Make the window span the entire screen. Unlike <code>ALLEGRO_FULLSCREEN</code> this will never attempt to modify the screen resolution. Instead the pixel dimensions of the created display will be the same as the desktop.  <p>The passed width and height are only used if the window is switched out of fullscreen mode later but will be ignored initially.  <p>Under Windows and X11 a fullscreen display created with this flag will behave differently from one created with the <code>ALLEGRO_FULLSCREEN</code> flag - even if the <code>ALLEGRO_FULLSCREEN</code> display is passed the desktop dimensions. The exact difference is platform dependent, but some things which may be different is how alt-tab works, how fast you can toggle between fullscreen/windowed mode or how additional monitors behave while your display is in fullscreen mode.  <p>Additionally under X, the use of more than one adapter in multi-head mode or with true Xinerama enabled is impossible due to bugs in X/GLX, creation will fail if more than one adapter is attempted to be used.</p></li>   <li><p><b><code>ALLEGRO_FULLSCREEN</code></b> Prefer a fullscreen mode.  <p>Under X the use of more than one FULLSCREEN display when using multi-head X, or true Xinerama is not possible due to bugs in X and GLX, display creation will fail if more than one adapter is attempted to be used.  <p><b>Note:</b> Prefer using <code>ALLEGRO_FULLSCREEN_WINDOW</code> as it typically provides a better user experience as the monitor doesn't change resolution and switching away from your game via Alt-Tab works smoothly. <code>ALLEGRO_FULLSCREEN</code> is typically less well supported compared to <code>ALLEGRO_FULLSCREEN_WINDOW</code>.</p></li>   <li><p><b><code>ALLEGRO_RESIZABLE</code></b> The display is resizable (only applicable if combined with <code>ALLEGRO_WINDOWED</code>).</p></li>   <li><p><b><code>ALLEGRO_MAXIMIZED</code></b> The display window will be maximized (only applicable if combined with <code>ALLEGRO_RESIZABLE</code>).</p></li>   <li><p><b><code>ALLEGRO_OPENGL</code></b> Require the driver to provide an initialized OpenGL context after returning successfully.</p></li>   <li><p><b><code>ALLEGRO_OPENGL_3_0</code></b> Require the driver to provide an initialized OpenGL context compatible with OpenGL version 3.0.</p></li>   <li><p><b><code>ALLEGRO_OPENGL_FORWARD_COMPATIBLE</code></b> If this flag is set, the OpenGL context created with <code>ALLEGRO_OPENGL_3_0</code> will be forward compatible only, meaning that all of the OpenGL API declared deprecated in OpenGL 3.0 will not be supported. Currently, a display created with this flag will not be compatible with Allegro drawing routines; the display option <code>ALLEGRO_COMPATIBLE_DISPLAY</code> will be set to false.</p></li>   <li><p><b><code>ALLEGRO_OPENGL_ES_PROFILE</code></b> Used together with <code>ALLEGRO_OPENGL</code>, requests that the OpenGL context uses the OpenGL ES profile. A specific version can be requested with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_option\">al_set_new_display_option</a>. <b>Note:</b> Currently this is only supported by the X11/GLX driver.</p></li>   <li><p><b><code>ALLEGRO_DIRECT3D</code></b> Require the driver to do rendering with Direct3D and provide a Direct3D device.</p></li>   <li><p><b><code>ALLEGRO_PROGRAMMABLE_PIPELINE</code></b> Require a programmable graphics pipeline. This flag is required to use <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_SHADERptr\">ALLEGRO_SHADERptr</a> objects.</p></li>   <li><p><b><code>ALLEGRO_FRAMELESS</code></b> Try to create a window without a frame (i.e. no border or titlebar). This usually does nothing for fullscreen modes, and even in windowed modes it depends on the underlying platform whether it is supported or not.</p></li>   <li><p><b><code>ALLEGRO_GENERATE_EXPOSE_EVENTS</code></b> Let the display generate expose events.</p></li>   <li><p><b><code>ALLEGRO_GTK_TOPLEVEL</code></b> Create a GTK toplevel window for the display, on X. This flag is conditionally defined by the native dialog addon. You must call <a class=\"normal\" href=\"al5nativedlg.html#al_init_native_dialog_addon\">al_init_native_dialog_addon</a> for it to succeed. <code>ALLEGRO_GTK_TOPLEVEL</code> is incompatible with <code>ALLEGRO_FULLSCREEN</code>.</p></li> </ul>  <p> 0 can be used for default values.       ", "tags": "", "loc": "Allegro5.html#al_set_new_display_flags"},
     {"title": "Allegro5.al_get_new_display_refresh_rate", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_new_display_refresh_rate"},
     {"title": "Allegro5.al_get_new_display_flags", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_new_display_flags"},
     {"title": "Allegro5.al_set_new_window_title", "text": " Allegro uses a static buffer of <code>ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE</code> to store this, so the length of the titme you set must be less than this.        ", "tags": "", "loc": "Allegro5.html#al_set_new_window_title"},
     {"title": "Allegro5.al_get_new_window_title", "text": " This returns the value that <a class=\"normal\" href=\"Allegro5.html#al_set_window_title\">al_set_window_title</a> was called with. The current implementation returns a pointer to a static buffer of which you should make a copy if you want to modify it.       ", "tags": "", "loc": "Allegro5.html#al_get_new_window_title"},
     {"title": "Allegro5.al_get_display_width", "text": " This is like <code>SCREEN_W</code> in Allegro 4.x.     ", "tags": "", "loc": "Allegro5.html#al_get_display_width"},
     {"title": "Allegro5.al_get_display_height", "text": " This is like <code>SCREEN_H</code> in Allegro 4.x.     ", "tags": "", "loc": "Allegro5.html#al_get_display_height"},
     {"title": "Allegro5.al_get_display_format", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_display_format"},
     {"title": "Allegro5.al_get_display_refresh_rate", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_display_refresh_rate"},
     {"title": "Allegro5.al_get_display_flags", "text": "  <p>In addition to the flags set for the display at creation time with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> it can also have the <code>ALLEGRO_MINIMIZED</code> flag set, indicating that the window is currently minimized. This flag is very platform-dependent as even a minimized application may still render a preview version so normally you should not care whether it is minimized or not.      ", "tags": "", "loc": "Allegro5.html#al_get_display_flags"},
     {"title": "Allegro5.al_get_display_orientation", "text": "    ", "tags": "", "loc": "Allegro5.html#al_get_display_orientation"},
     {"title": "Allegro5.al_set_display_flag", "text": " The flags are the same as for <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a>. The only flags that can be changed after creation are: </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_FULLSCREEN_WINDOW</code></p></li>   <li><p><code>ALLEGRO_FRAMELESS</code></p></li>   <li><p><code>ALLEGRO_MAXIMIZED</code></p></li> </ul>  <p> You can use <code>al_get_display_flags</code> to query whether the given display property actually changed.      <code>True</code> if the driver supports toggling the specified flag else <code>False</code>. ", "tags": "", "loc": "Allegro5.html#al_set_display_flag"},
     {"title": "Allegro5.al_create_display", "text": " The parameters of the display are determined by the last calls to <code>al_set_new_display_* </code>. Default parameters are used if none are set explicitly. Creating a new display will automatically make it the active one, with the backbuffer selected for drawing.  <p>Each display that uses OpenGL as a backend has a distinct OpenGL rendering context associated with it. See <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a> for the discussion about rendering contexts.          <code>Nil</code> on error. ", "tags": "", "loc": "Allegro5.html#al_create_display"},
     {"title": "Allegro5.al_destroy_display", "text": "  <p>If the target bitmap of the calling thread is tied to the display, then it implies a call to <code>al_set_target_bitmap (<code>Nil</code>);</code> before the display is destroyed.  <p>That special case notwithstanding, you should make sure no threads are currently targeting a bitmap which is tied to the display before you destroy it.     ", "tags": "", "loc": "Allegro5.html#al_destroy_display"},
     {"title": "Allegro5.al_get_current_display", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_current_display"},
     {"title": "Allegro5.al_set_target_bitmap", "text": " To return to drawing to a display, set the backbuffer of the display as the target bitmap, using <a class=\"normal\" href=\"Allegro5.html#al_get_backbuffer\">al_get_backbuffer</a>. As a convenience, you may also use <a class=\"normal\" href=\"Allegro5.html#al_set_target_backbuffer\">al_set_target_backbuffer</a>.  <p>Each video bitmap is tied to a display. When a video bitmap is set to as the target bitmap, the display that the bitmap belongs to is automatically made &quot;current&quot; for the calling thread (if it is not current already). Then drawing other bitmaps which are tied to the same display can be hardware accelerated.  <p>A single display cannot be current for multiple threads simultaneously. If you need to release a display, so it is not current for the calling thread, call <code>al_set_target_bitmap (<code>Nil</code>);</code>  <p>Setting a memory bitmap as the target bitmap will not change which display is current for the calling thread.  <p>On some platforms, Allegro automatically backs up the contents of video bitmaps because they may be occasionally lost (see discussion in <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a>'s documentation). If you're completely recreating the bitmap contents often (e.g. every frame) then you will get much better performance by creating the target bitmap with <code>ALLEGRO_NO_PRESERVE_TEXTURE</code> flag.  <p><b>OpenGL note:</b>  <p>Framebuffer objects (FBOs) allow OpenGL to directly draw to a bitmap, which is very fast. When using an OpenGL display, if all of the following conditions are met an FBO will be created for use with the bitmap:</p>  <ul class=\"paragraph_spacing\">   <li><p>The <code>GL_EXT_framebuffer_object</code> OpenGL extension is available.</p></li>   <li><p>The bitmap is not a memory bitmap.</p></li>   <li><p>The bitmap is not currently locked.</p></li> </ul>  <p> In Allegro 5.0.0, you had to be careful as an FBO would be kept around until the bitmap is destroyed or you explicitly called <a class=\"normal\" href=\"al5opengl.html#al_remove_opengl_fbo\">al_remove_opengl_fbo</a> on the bitmap, wasting resources. In newer versions, FBOs will be freed automatically when the bitmap is no longer the target bitmap, unless you have called <a class=\"normal\" href=\"al5opengl.html#al_get_opengl_fbo\">al_get_opengl_fbo</a> to retrieve the FBO id.  <p>In the following example, no FBO will be created: </p>  <pre class=\"longcode\"> lock := al_lock_bitmap (bitmap); al_set_target_bitmap (bitmap); al_put_pixel (x, y, color); al_unlock_bitmap (bitmap);</pre>  <p> The above allows using <a class=\"normal\" href=\"Allegro5.html#al_put_pixel\">al_put_pixel</a> on a locked bitmap without creating an FBO.  <p>In this example an FBO is created however: </p>  <pre class=\"longcode\"> al_set_target_bitmap (bitmap); al_draw_line (x1, y1, x2, y2, color, <span class=\"pascal_numeric\">0</span>);</pre>  <p> An OpenGL command will be used to directly draw the line into the bitmap's associated texture.      ", "tags": "", "loc": "Allegro5.html#al_set_target_bitmap"},
     {"title": "Allegro5.al_set_target_backbuffer", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_target_backbuffer"},
     {"title": "Allegro5.al_get_backbuffer", "text": "  <p>Care should be taken when using the backbuffer bitmap (and its sub-bitmaps) as the source bitmap (e.g as the bitmap argument to <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a>). Only untransformed operations are hardware accelerated. These consist of <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> and <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap_region\">al_draw_bitmap_region</a> when the current transformation is the identity. If the tranformation is not the identity, or some other drawing operation is used, the call will be routed through the memory bitmap routines, which are slow. If you need those operations to be accelerated, then first copy a region of the backbuffer into a temporary bitmap (via the <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> and <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap_region\">al_draw_bitmap_region</a>), and then use that temporary bitmap as the source bitmap.    ", "tags": "", "loc": "Allegro5.html#al_get_backbuffer"},
     {"title": "Allegro5.al_get_target_bitmap", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_target_bitmap"},
     {"title": "Allegro5.al_acknowledge_resize", "text": "  <p>Adjusts the clipping rectangle to the full size of the backbuffer. This also resets the backbuffers projection transform to default orthographic transform (see <a class=\"normal\" href=\"Allegro5.html#al_use_projection_transform\">al_use_projection_transform</a>).  <p>Note that a resize event may be outdated by the time you acknowledge it; there could be further resize events generated in the meantime.      <code>True</code> on success. ", "tags": "", "loc": "Allegro5.html#al_acknowledge_resize"},
     {"title": "Allegro5.al_resize_display", "text": " This works on both fullscreen and windowed displays, regardless of the <code>ALLEGRO_RESIZABLE</code> flag.  <p>Adjusts the clipping rectangle to the full size of the backbuffer.     <code>True</code> on success, or <code>False</code> on error. ", "tags": "", "loc": "Allegro5.html#al_resize_display"},
     {"title": "Allegro5.al_flip_display", "text": " Pointers to the special back buffer bitmap remain valid and retain their semantics as the back buffer, although the contents may have changed.  <p>Several display options change how this function behaves: </p>  <ul class=\"paragraph_spacing\">   <li><p>With <code>ALLEGRO_SINGLE_BUFFER</code>, no flipping is done. You still have to call this function to display graphics, depending on how the used graphics system works.</p></li>   <li><p>The <code>ALLEGRO_SWAP_METHOD</code> option may have additional information about what kind of operation is used internally to flip the front and back buffers.</p></li>   <li><p>If <code>ALLEGRO_VSYNC</code> is 1, this function will force waiting for vsync. If <code>ALLEGRO_VSYNC</code> is 2, this function will not wait for vsync. With many drivers the vsync behavior is controlled by the user and not the application, and <code>ALLEGRO_VSYNC</code> will not be set; in this case <code>al_flip_display</code> will wait for vsync depending on the settings set in the system's graphics preferences.</p></li> </ul>  <p>       ", "tags": "", "loc": "Allegro5.html#al_flip_display"},
     {"title": "Allegro5.al_update_display_region", "text": " With many drivers this is not possible, but for some it can improve performance. If this is not supported, this function falls back to the behavior of <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>. You can query the support for this function using <code>al_get_display_option (display, ALLEGRO_UPDATE_DISPLAY_REGION)</code>.      ", "tags": "", "loc": "Allegro5.html#al_update_display_region"},
     {"title": "Allegro5.al_is_compatible_bitmap", "text": " Each <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_BITMAPptr\">ALLEGRO_BITMAPptr</a> created with <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a> however is usually tied to a single <code>ALLEGRO_DISPLAYptr</code>. This function can be used to know if the bitmap is compatible with the given display, even if it is a different display to the one it was created with. It returns <code>True</code> if the bitmap is compatible (things like a cached texture version can be used) and <code>False</code> otherwise (blitting in the current display will be slow).  <p>The only time this function is useful is if you are using multiple windows and need accelerated blitting of the same bitmaps to both.    <code>True</code> if the bitmap is compatible with the current display, <code>False</code> otherwise. If there is no current display, <code>False</code> is returned. ", "tags": "", "loc": "Allegro5.html#al_is_compatible_bitmap"},
     {"title": "Allegro5.al_wait_for_vsync", "text": " Some driver/card/monitor combinations may not be capable of this.  <p>Note how <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a> usually already waits for the vertical retrace, so unless you are doing something special, there is no reason to call this function.     <code>False</code> if not possible, <code>True</code> if successful. ", "tags": "", "loc": "Allegro5.html#al_wait_for_vsync"},
     {"title": "Allegro5.al_get_display_event_source", "text": " See the documentation on events for a list of the events displays will generate.     ", "tags": "", "loc": "Allegro5.html#al_get_display_event_source"},
     {"title": "Allegro5.al_set_display_icon", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_display_icon"},
     {"title": "Allegro5.al_set_display_icons", "text": " Multiple icons can be provided for use in different contexts, e.g. window frame, taskbar, alt-tab popup. The number of icons must be at least one.  <p><b>Note</b>  <p>If the underlying OS requires an icon of a size not provided then one of the bitmaps will be scaled up or down to the required size. The choice of bitmap is implementation dependent.      ", "tags": "", "loc": "Allegro5.html#al_set_display_icons"},
     {"title": "Allegro5.al_get_new_display_adapter", "text": " Otherwise returns <code>ALLEGRO_DEFAULT_DISPLAY_ADAPTER</code>.     ", "tags": "", "loc": "Allegro5.html#al_get_new_display_adapter"},
     {"title": "Allegro5.al_set_new_display_adapter", "text": " The adapter has a monitor attached to it. Information about the monitor can be gotten using <a class=\"normal\" href=\"Allegro5.html#al_get_num_video_adapters\">al_get_num_video_adapters</a> and <a class=\"normal\" href=\"Allegro5.html#al_get_monitor_info\">al_get_monitor_info</a>.  <p>To return to the default behaviour, pass <code>ALLEGRO_DEFAULT_DISPLAY_ADAPTER</code>.      ", "tags": "", "loc": "Allegro5.html#al_set_new_display_adapter"},
     {"title": "Allegro5.al_set_new_window_position", "text": " Negative values are allowed on some multihead systems.  <p>To reset to the default behaviour, pass <code>(maxLongint, maxLongint)</code>.      ", "tags": "", "loc": "Allegro5.html#al_set_new_window_position"},
     {"title": "Allegro5.al_get_new_window_position", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_new_window_position"},
     {"title": "Allegro5.al_set_window_position", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_window_position"},
     {"title": "Allegro5.al_get_window_position", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_window_position"},
     {"title": "Allegro5.al_set_window_constraints", "text": " The constraints are a hint only, and are not necessarily respected by the window environment. A value of 0 for any of the parameters indicates no constraint for that parameter.  <p>The constraints will be applied to a display only after the <a class=\"normal\" href=\"Allegro5.html#al_apply_window_constraints\">al_apply_window_constraints</a> function call.  (al_get_window_constraints)    ", "tags": "", "loc": "Allegro5.html#al_set_window_constraints"},
     {"title": "Allegro5.al_get_window_constraints", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_window_constraints"},
     {"title": "Allegro5.al_apply_window_constraints", "text": "  <p>If enabled, the specified display will be automatically resized to new sizes to conform constraints in next cases: </p>  <ul class=\"paragraph_spacing\">   <li><p>The specified display is resizable, not maximized and is not in fullscreen mode.</p></li>   <li><p>If the appropriate current display size (width or height) is less than the value of constraint. Applied to minimum constraints.</p></li>   <li><p>If the appropriate current display size (width or height) is greater than the value of constraint. Applied to maximum constraints.</p></li> </ul>  <p> Constrains are not applied when a display is toggle from windowed to maximized or fullscreen modes. When a display is toggle from maximized/fullscreen to windowed mode, then the display may be resized as described above. The later case is also possible when a user drags the maximized display via mouse.  <p>If disabled, the specified display will stop using constraints.      ", "tags": "", "loc": "Allegro5.html#al_apply_window_constraints"},
     {"title": "Allegro5.al_set_window_title", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_window_title"},
     {"title": "Allegro5.al_set_new_display_option", "text": " Display options differ from display flags, and specify some details of the context to be created within the window itself. These mainly have no effect on Allegro itself, but you may want to specify them, for example if you want to use multisampling.  <p>The <code>importance</code> parameter can be either:</p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_REQUIRE</code></b> - The display will not be created if the setting can not be met.</p></li>   <li><p><b><code>ALLEGRO_SUGGEST</code></b> - If the setting is not available, the display will be created anyway with a setting as close as possible to the requested one. You can query the actual value used in that case by calling <a class=\"normal\" href=\"Allegro5.html#al_get_display_option\">al_get_display_option</a> after the display has been created.</p></li>   <li><p><b><code>ALLEGRO_DONTCARE</code></b> - If you added a display option with one of the above two settings before, it will be removed again. Else this does nothing.</p></li> </ul>  <p> The supported options are: </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_COLOR_SIZE</code></b></dt>   <dd><p>This can be used to ask for a specific bit depth. For example to force a 16-bit framebuffer set this to 16.</p></dd>   <dt><b><code>ALLEGRO_RED_SIZE, ALLEGRO_GREEN_SIZE, ALLEGRO_BLUE_SIZE, ALLEGRO_ALPHA_SIZE</code></b></dt>   <dd><p>Individual color component size in bits.</p></dd>   <dt><b><code>ALLEGRO_RED_SHIFT, ALLEGRO_GREEN_SHIFT, ALLEGRO_BLUE_SHIFT, ALLEGRO_ALPHA_SHIFT</code></b></dt>   <dd><p>Together with the previous settings these can be used to specify the exact pixel layout the display should use. Normally there is no reason to use these.</p></dd>   <dt><b><code>ALLEGRO_ACC_RED_SIZE, ALLEGRO_ACC_GREEN_SIZE, ALLEGRO_ACC_BLUE_SIZE, ALLEGRO_ACC_ALPHA_SIZE</code></b></dt>   <dd><p>This can be used to define the required accumulation buffer size.</p></dd>   <dt><b><code>ALLEGRO_STEREO</code></b></dt>   <dd><p>Whether the display is a stereo display.</p></dd>   <dt><b><code>ALLEGRO_AUX_BUFFERS</code></b></dt>   <dd><p>Number of auxiliary buffers the display should have.</p></dd>   <dt><b><code>ALLEGRO_DEPTH_SIZE</code></b></dt>   <dd><p>How many depth buffer (z-buffer) bits to use.</p></dd>   <dt><b><code>ALLEGRO_STENCIL_SIZE</code></b></dt>   <dd><p>How many bits to use for the stencil buffer.</p></dd>   <dt><b><code>ALLEGRO_SAMPLE_BUFFERS</code></b></dt>   <dd><p>Whether to use multisampling (<code>1</code>) or not (<code>0</code>).</p></dd>   <dt><b><code>ALLEGRO_SAMPLES</code></b></dt>   <dd><p>If the above is <code>1</code>, the number of samples to use per pixel. Else <code>0</code>.</p></dd>   <dt><b><code>ALLEGRO_RENDER_METHOD</code></b></dt>   <dd><p><code>0</code> if hardware acceleration is not used with this display.</p></dd>   <dt><b><code>ALLEGRO_FLOAT_COLOR</code></b></dt>   <dd><p>Whether to use floating point color components.</p></dd>   <dt><b><code>ALLEGRO_FLOAT_DEPTH</code></b></dt>   <dd><p>Whether to use a floating point depth buffer.</p></dd>   <dt><b><code>ALLEGRO_SINGLE_BUFFER</code></b></dt>   <dd><p>Whether the display uses a single buffer (<code>1</code>) or another update method (<code>0</code>).</p></dd>   <dt><b><code>ALLEGRO_SWAP_METHOD</code></b></dt>   <dd><p>If the above is <code>0</code>, this is set to <code>1</code> to indicate the display is using a copying method to make the next buffer in the flip chain available, or to <code>2</code> to indicate a flipping or other method.</p></dd>   <dt><b><code>ALLEGRO_COMPATIBLE_DISPLAY</code></b></dt>   <dd><p>Indicates if Allegro's graphics functions can use this display. If you request a display not useable by Allegro, you can still use for example OpenGL to draw graphics.</p></dd>   <dt><b><code>ALLEGRO_UPDATE_DISPLAY_REGION</code></b></dt>   <dd><p>Set to <code>1</code> if the display is capable of updating just a region, and <code>0</code> if calling <a class=\"normal\" href=\"Allegro5.html#al_update_display_region\">al_update_display_region</a> is equivalent to <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>.</p></dd>   <dt><b><code>ALLEGRO_VSYNC</code></b></dt>   <dd><p>Set to <code>1</code> to tell the driver to wait for vsync in <a class=\"normal\" href=\"Allegro5.html#al_flip_display\">al_flip_display</a>, or to <code>2</code> to force vsync off. The default of <code>0</code> means that Allegro does not try to modify the vsync behavior so it may be on or off. Note that even in the case of 1 or 2 it is possible to override the vsync behavior in the graphics driver so you should not rely on it.</p></dd>   <dt><b><code>ALLEGRO_MAX_BITMAP_SIZE</code></b></dt>   <dd><p>When queried this returns the maximum size (width as well as height) a bitmap can have for this display. Calls to <a class=\"normal\" href=\"Allegro5.html#al_create_bitmap\">al_create_bitmap</a> or <a class=\"normal\" href=\"Allegro5.html#al_load_bitmap\">al_load_bitmap</a> for bitmaps larger than this size will fail. It does not apply to memory bitmaps which always can have arbitrary size (but are slow for drawing).</p></dd>   <dt><b><code>ALLEGRO_SUPPORT_NPOT_BITMAP</code></b></dt>   <dd><p>Set to 1 if textures used for bitmaps on this display can have a size which is not a power of two. This is mostly useful if you use Allegro to load textures as otherwise only power-of-two textures will be used internally as bitmap storage.</p></dd>   <dt><b><code>ALLEGRO_CAN_DRAW_INTO_BITMAP</code></b></dt>   <dd><p>Set to <code>1</code> if you can use <a class=\"normal\" href=\"Allegro5.html#al_set_target_bitmap\">al_set_target_bitmap</a> on bitmaps of this display to draw into them. If this is not the case software emulation will be used when drawing into display bitmaps (which can be very slow).</p></dd>   <dt><b><code>ALLEGRO_SUPPORT_SEPARATE_ALPHA</code></b></dt>   <dd><p>This is set to <code>1</code> if the <a class=\"normal\" href=\"Allegro5.html#al_set_separate_blender\">al_set_separate_blender</a> function is supported. Otherwise the alpha parameters will be ignored.</p></dd>   <dt><b><code>ALLEGRO_AUTO_CONVERT_BITMAPS</code></b></dt>   <dd><p>This is on by default. It causes any existing memory bitmaps with the <code>ALLEGRO_CONVERT_BITMAP</code> flag to be converted to a display bitmap of the newly created display with the option set.</p></dd>   <dt><b><code>ALLEGRO_SUPPORTED_ORIENTATIONS</code></b></dt>   <dd><p>This is a bit-combination of the orientations supported by the application. The orientations are the same as for <a class=\"normal\" href=\"Allegro5.html#al_get_display_orientation\">al_get_display_orientation</a> with the additional possibilities:</p>  <ul class=\"paragraph_spacing\">   <li><p><b><code>ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT</code></b> - means only the two portrait orientations are supported.</p></li>   <li><p><b><code>ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE</code></b> - means only the two landscape orientations</p></li>   <li><p><b><code>ALLEGRO_DISPLAY_ORIENTATION_ALL</code></b> - allows all four orientations.</p></li> </ul>  <p> When the orientation changes between a portrait and a landscape orientation the display needs to be resized. This is done by sending an <code>ALLEGRO_EVENT_DISPLAY_RESIZE</code> message which should be handled by calling <a class=\"normal\" href=\"Allegro5.html#al_acknowledge_resize\">al_acknowledge_resize</a>.</p></dd>   <dt><b><code>ALLEGRO_OPENGL_MAJOR_VERSION</code></b></dt>   <dd><p>Request a specific OpenGL major version.</p></dd>   <dt><b><code>ALLEGRO_OPENGL_MINOR_VERSION</code></b></dt>   <dd><p>Request a specific OpenGL minor version.</p></dd> </dl>  <p>       ", "tags": "", "loc": "Allegro5.html#al_set_new_display_option"},
     {"title": "Allegro5.al_get_new_display_option", "text": "    ", "tags": "", "loc": "Allegro5.html#al_get_new_display_option"},
     {"title": "Allegro5.al_reset_new_display_options", "text": "    ", "tags": "", "loc": "Allegro5.html#al_reset_new_display_options"},
     {"title": "Allegro5.al_set_display_option", "text": " After displays are created, they take on the options set with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_option\">al_set_new_display_option</a>. Calling <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_option\">al_set_new_display_option</a> subsequently only changes options for newly created displays, and doesn't touch the options of already created displays. <code>al_set_display_option</code> allows changing some of these values. Not all display options can be changed or changing them will have no effect. Changing options other than those listed below is undefined. </p>  <dl class=\"paragraph_spacing\">   <dt><b><code>ALLEGRO_SUPPORTED_ORIENTATIONS</code></b></dt>   <dd><p>This can be changed to allow new or restrict previously enabled orientations of the screen/device. See al_set_new_display_option for more information on this option.</p></dd> </dl>  <p>      ", "tags": "", "loc": "Allegro5.html#al_set_display_option"},
     {"title": "Allegro5.al_get_display_option", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_display_option"},
     {"title": "Allegro5.al_hold_bitmap_drawing", "text": " This allows for efficient drawing of many bitmaps that share a parent bitmap, such as sub-bitmaps from a tilesheet or simply identical bitmaps. Drawing bitmaps that do not share a parent is less efficient, so it is advisable to stagger bitmap drawing calls such that the parent bitmap is the same for large number of those calls. While deferred bitmap drawing is enabled, the only functions that can be used are the bitmap drawing functions and font drawing functions. Changing the state such as the blending modes will result in undefined behaviour. One exception to this rule are the non-projection transformations. It is possible to set a new transformation while the drawing is held.  <p>No drawing is guaranteed to take place until you disable the hold. Thus, the idiom of this function's usage is to enable the deferred bitmap drawing, draw as many bitmaps as possible, taking care to stagger bitmaps that share parent bitmaps, and then disable deferred drawing. As mentioned above, this function also works with bitmap and truetype fonts, so if multiple lines of text need to be drawn, this function can speed things up.     ", "tags": "", "loc": "Allegro5.html#al_hold_bitmap_drawing"},
     {"title": "Allegro5.al_is_bitmap_drawing_held", "text": "     ", "tags": "", "loc": "Allegro5.html#al_is_bitmap_drawing_held"},
     {"title": "Allegro5.al_acknowledge_drawing_halt", "text": " This is currently necessary for Android and iOS as you are not allowed to draw to your display while it is not being shown. If you do not call this function to let the operating system know that you have stopped drawing or if you call it to late the application likely will be considered misbehaving and get terminated.      ", "tags": "", "loc": "Allegro5.html#al_acknowledge_drawing_halt"},
     {"title": "Allegro5.al_acknowledge_drawing_resume", "text": "      ", "tags": "", "loc": "Allegro5.html#al_acknowledge_drawing_resume"},
     {"title": "Allegro5.al_get_clipboard_text", "text": " If no text is available on the clipboard then this function returns <code>Nil</code>. You must call <a class=\"normal\" href=\"Allegro5.html#al_free\">al_free</a> on the returned pointer when you don't need it anymore.  <p>Beware that text on the clipboard on Windows may be in Windows format, that is, it may have carriage return newline combinations for the line endings instead of regular newlines for the line endings on Linux or OSX.      ", "tags": "", "loc": "Allegro5.html#al_get_clipboard_text"},
     {"title": "Allegro5.al_set_clipboard_text", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_clipboard_text"},
     {"title": "Allegro5.al_clipboard_has_text", "text": "      ", "tags": "", "loc": "Allegro5.html#al_clipboard_has_text"},
     {"title": "Allegro5.al_create_config", "text": "      ", "tags": "", "loc": "Allegro5.html#al_create_config"},
     {"title": "Allegro5.al_add_config_section", "text": " If the section already exists then nothing happens.      ", "tags": "", "loc": "Allegro5.html#al_add_config_section"},
     {"title": "Allegro5.al_set_config_value", "text": " If the section doesn't yet exist, it will be created. If a value already existed for the given key, it will be overwritten. The section can be <code>''</code> for the global section.  <p>For consistency with the on-disk format of config files, any leading and trailing whitespace will be stripped from the value. If you have significant whitespace you wish to preserve, you should add your own quote characters and remove them when reading the values back in.     ", "tags": "", "loc": "Allegro5.html#al_set_config_value"},
     {"title": "Allegro5.al_add_config_comment", "text": " If the section doesn't yet exist, it will be created. The section can be <code>''</code> for the global section.  <p>The comment may or may not begin with a hash character. Any newlines in the comment string will be replaced by space characters.     ", "tags": "", "loc": "Allegro5.html#al_add_config_comment"},
     {"title": "Allegro5.al_get_config_value", "text": " Copy the value if you need a copy. The section can be <code>''</code> for the global section.     <code>Nil</code> if section or key do not exist. ", "tags": "", "loc": "Allegro5.html#al_get_config_value"},
     {"title": "Allegro5.al_load_config_file", "text": " The configuration structure should be destroyed with <a class=\"normal\" href=\"Allegro5.html#al_destroy_config\">al_destroy_config</a>.       Pointer to configuration or <code>Nil</code> on error. ", "tags": "", "loc": "Allegro5.html#al_load_config_file"},
     {"title": "Allegro5.al_load_config_file_f", "text": "     <code>Nil</code> on error. The configuration structure should be destroyed with <a class=\"normal\" href=\"Allegro5.html#al_destroy_config\">al_destroy_config</a>. The file remains open afterwards. ", "tags": "", "loc": "Allegro5.html#al_load_config_file_f"},
     {"title": "Allegro5.al_save_config_file", "text": "      <code>True</code> on success, <code>False</code> on error. ", "tags": "", "loc": "Allegro5.html#al_save_config_file"},
     {"title": "Allegro5.al_save_config_file_f", "text": "     <code>True</code> on success, <code>False</code> on error. The file remains open afterwards. ", "tags": "", "loc": "Allegro5.html#al_save_config_file_f"},
     {"title": "Allegro5.al_merge_config_into", "text": " Values in configuration <code>add</code> override those in <code>master</code>. <code>master</code> is modified. Comments from <code>add</code> are not retained.     ", "tags": "", "loc": "Allegro5.html#al_merge_config_into"},
     {"title": "Allegro5.al_merge_config", "text": " Values in configuration <code>cfg2</code> override those in <code>cfg1</code>. Neither of the input configuration structures are modified. Comments from <code>cfg2</code> are not retained.     ", "tags": "", "loc": "Allegro5.html#al_merge_config"},
     {"title": "Allegro5.al_destroy_config", "text": " Does nothing if passed <code>Nil</code>.      ", "tags": "", "loc": "Allegro5.html#al_destroy_config"},
     {"title": "Allegro5.al_remove_config_section", "text": "     <code>True</code> if the section was removed, or <code>False</code> if the section did not exist. ", "tags": "", "loc": "Allegro5.html#al_remove_config_section"},
     {"title": "Allegro5.al_remove_config_key", "text": "    <code>True</code> if the entry was removed, or <code>False</code> if the entry did not exist. ", "tags": "", "loc": "Allegro5.html#al_remove_config_key"},
     {"title": "Allegro5.al_get_cpu_count", "text": " Even if a positive number is returned, it might be that it is not correct. For example, Allegro running on a virtual machine will return the amount of CPU's of the VM, and not that of the underlying system.  <p>Furthermore even if the number is correct, this only gives you information about the total CPU cores of the system Allegro runs on. The amount of cores available to your program may be less due to circumstances such as programs that are currently running.  <p>Therefore, it's best to use this for advisory purposes only. It is certainly a bad idea to make your program exclusive to systems for which this function returns a certain &quot;desirable&quot; number.  <p>This function may be called prior to <a class=\"normal\" href=\"Allegro5.html#al_install_system\">al_install_system</a> or <a class=\"normal\" href=\"Allegro5.html#al_init\">al_init</a>.    ", "tags": "", "loc": "Allegro5.html#al_get_cpu_count"},
     {"title": "Allegro5.al_get_ram_size", "text": " Even if a positive number is returned, it might be that it is not correct. For example, Allegro running on a virtual machine will return the amount of RAM of the VM, and not that of the underlying system.  <p>Furthermore even if the number is correct, this only gives you information about the total physical memory of the system Allegro runs on. The memory available to your program may be less due to circumstances such as virtual memory, and other programs that are currently running.  <p>Therefore, it's best to use this for advisory purposes only. It is certainly a bad idea to make your program exclusive to systems for which this function returns a certain &quot;desirable&quot; number.  <p>This function may be called prior to <a class=\"normal\" href=\"Allegro5.html#al_install_system\">al_install_system</a> or <a class=\"normal\" href=\"Allegro5.html#al_init\">al_init</a>.    ", "tags": "", "loc": "Allegro5.html#al_get_ram_size"},
     {"title": "Allegro5.al_clear_to_color", "text": "      ", "tags": "", "loc": "Allegro5.html#al_clear_to_color"},
     {"title": "Allegro5.al_clear_depth_buffer", "text": " A depth buffer is only available if it was requested with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_option\">al_set_new_display_option</a> and the requirement could be met by the <a class=\"normal\" href=\"Allegro5.html#al_create_display\">al_create_display</a> call creating the current display. Operations involving the depth buffer are also affected by <a class=\"normal\" href=\"Allegro5.html#al_set_render_state\">al_set_render_state</a>.  <p>For example, if <code>ALLEGRO_DEPTH_FUNCTION</code> is set to <code>ALLEGRO_RENDER_LESS</code> then depth buffer value of 1 represents infinite distance, and thus is a good value to use when clearing the depth buffer.        ", "tags": "", "loc": "Allegro5.html#al_clear_depth_buffer"},
     {"title": "Allegro5.al_draw_pixel", "text": " This function, unlike <a class=\"normal\" href=\"Allegro5.html#al_put_pixel\">al_put_pixel</a>, does blending and, unlike <a class=\"normal\" href=\"Allegro5.html#al_put_blended_pixel\">al_put_blended_pixel</a>, respects the transformations (that is, the pixel's position is transformed, but its size is unaffected - it remains a pixel). This function can be slow if called often; if you need to draw a lot of pixels consider using <a class=\"normal\" href=\"al5primitives.html#al_draw_prim\">al_draw_prim</a> with <code>ALLEGRO_PRIM_POINT_LIST</code> from the primitives addon.  <p><b>Note</b>  <p>This function may not draw exactly where you expect it to. See the <b>Pixel-precise output</b> section on the <a class=\"normal\" href=\"al5primitives.html\">primitives addon</a> documentation for details on how to control exactly where the pixel is drawn.       x destination x y destination y color color of the pixel  x destination x y destination y color color of the pixel", "tags": "", "loc": "Allegro5.html#al_draw_pixel"},
     {"title": "Allegro5.al_get_errno", "text": " Call this function to retrieve the last error number set for the calling thread.     ", "tags": "", "loc": "Allegro5.html#al_get_errno"},
     {"title": "Allegro5.al_set_errno", "text": "     ", "tags": "", "loc": "Allegro5.html#al_set_errno"},
     {"title": "Allegro5.al_get_num_display_modes", "text": " This will use the values set with <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_refresh_rate\">al_set_new_display_refresh_rate</a>, and <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> to find the number of modes that match. Setting the new display parameters to zero will give a list of all modes for the default driver.     ", "tags": "", "loc": "Allegro5.html#al_get_num_display_modes"},
     {"title": "Allegro5.al_get_display_mode", "text": " Display parameters should not be changed between a call of <a class=\"normal\" href=\"Allegro5.html#al_get_num_display_modes\">al_get_num_display_modes</a> and <code>al_get_display_mode</code>.       index Must be between 0 and the number returned from <code>al_get_num_display_modes - 1</code>. mode Must be an allocated <code>ALLEGRO_DISPLAY_MODE</code> structure. <code>Nil</code> on failure, or a pointer to the <code>mode</code> parameter that was passed in on success. index Must be between 0 and the number returned from <code>al_get_num_display_modes - 1</code>. mode Must be an allocated <code>ALLEGRO_DISPLAY_MODE</code> structure.", "tags": "", "loc": "Allegro5.html#al_get_display_mode"},
     {"title": "Allegro5.al_install_joystick", "text": " If a joystick driver was already installed, returns <code>True</code> immediately.     ", "tags": "", "loc": "Allegro5.html#al_install_joystick"},
     {"title": "Allegro5.al_uninstall_joystick", "text": " All outstanding <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_JOYSTICKptr\">ALLEGRO_JOYSTICKptr</a> pointers are invalidated. If no joystick driver was active, this function does nothing.  <p>This function is automatically called when Allegro is shut down.     ", "tags": "", "loc": "Allegro5.html#al_uninstall_joystick"},
     {"title": "Allegro5.al_is_joystick_installed", "text": "    ", "tags": "", "loc": "Allegro5.html#al_is_joystick_installed"},
     {"title": "Allegro5.al_reconfigure_joysticks", "text": " On existing platforms, the joystick event source will generate an event of type <code>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</code> when a device is plugged in or unplugged. In response, you should call <code>al_reconfigure_joysticks</code>.  <p>Afterwards, the number returned by <a class=\"normal\" href=\"Allegro5.html#al_get_num_joysticks\">al_get_num_joysticks</a> may be different, and the handles returned by <a class=\"normal\" href=\"Allegro5.html#al_get_joystick\">al_get_joystick</a> may be different or be ordered differently.  <p>All <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_JOYSTICKptr\">ALLEGRO_JOYSTICKptr</a> handles remain valid, but handles for disconnected devices become inactive: their states will no longer update, and <a class=\"normal\" href=\"Allegro5.html#al_get_joystick\">al_get_joystick</a> will not return the handle. Handles for devices which remain connected will continue to represent the same devices. Previously inactive handles may become active again, being reused to represent newly connected devices.  <p>It is possible that on some systems, Allegro won't be able to generate <code>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</code> events. If your game has an input configuration screen or similar, you may wish to call <code>al_reconfigure_joysticks</code> when entering that screen.      <code>True</code> if the joystick configuration changed, otherwise <code>False</code>. ", "tags": "", "loc": "Allegro5.html#al_reconfigure_joysticks"},
     {"title": "Allegro5.al_get_num_joysticks", "text": " This number can change after <a class=\"normal\" href=\"Allegro5.html#al_reconfigure_joysticks\">al_reconfigure_joysticks</a> is called, in order to support hotplugging.  <p>Returns <code>0</code> if there is no joystick driver installed.      ", "tags": "", "loc": "Allegro5.html#al_get_num_joysticks"},
     {"title": "Allegro5.al_get_joystick", "text": " The number may be from <code>0</code> to <code>al_get_num_joysticks - 1</code>. If successful a pointer to a joystick object is returned, which represents a physical device. Otherwise <code>Nil</code> is returned.  <p>The handle and the index are only incidentally linked. After <code>al_reconfigure_joysticks</code> is called, <code>al_get_joystick</code> may return handles in a different order, and handles which represent disconnected devices will not be returned.       ", "tags": "", "loc": "Allegro5.html#al_get_joystick"},
     {"title": "Allegro5.al_release_joystick", "text": "     ", "tags": "", "loc": "Allegro5.html#al_release_joystick"},
     {"title": "Allegro5.al_get_joystick_active", "text": " in the current configuration, the handle represents some physical device plugged into the system. <a class=\"normal\" href=\"Allegro5.html#al_get_joystick\">al_get_joystick</a> returns active handles. After reconfiguration, active handles may become inactive, and vice versa.     ", "tags": "", "loc": "Allegro5.html#al_get_joystick_active"},
     {"title": "Allegro5.al_get_joystick_name", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_joystick_name"},
     {"title": "Allegro5.al_get_joystick_num_sticks", "text": " A stick has one or more axes.      ", "tags": "", "loc": "Allegro5.html#al_get_joystick_num_sticks"},
     {"title": "Allegro5.al_get_joystick_stick_flags", "text": " If the stick doesn't exist, <code>Nil</code> is returned. Indices begin from <code>0</code>.     ", "tags": "", "loc": "Allegro5.html#al_get_joystick_stick_flags"},
     {"title": "Allegro5.al_get_joystick_stick_name", "text": " If the stick doesn't exist, <code>Nil</code> is returned.      ", "tags": "", "loc": "Allegro5.html#al_get_joystick_stick_name"},
     {"title": "Allegro5.al_get_joystick_num_axes", "text": " If the stick doesn't exist, <code>0</code> is returned.     ", "tags": "", "loc": "Allegro5.html#al_get_joystick_num_axes"},
     {"title": "Allegro5.al_get_joystick_axis_name", "text": " If the axis doesn't exist, <code>Nil</code> is returned. Indices begin from <code>0</code>.      ", "tags": "", "loc": "Allegro5.html#al_get_joystick_axis_name"},
     {"title": "Allegro5.al_get_joystick_num_buttons", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_joystick_num_buttons"},
     {"title": "Allegro5.al_get_joystick_button_name", "text": " If the button doesn't exist, <code>Nil</code> is returned. Indices begin from <code>0</code>.       ", "tags": "", "loc": "Allegro5.html#al_get_joystick_button_name"},
     {"title": "Allegro5.al_get_joystick_state", "text": "       ", "tags": "", "loc": "Allegro5.html#al_get_joystick_state"},
     {"title": "Allegro5.al_get_joystick_event_source", "text": " All joystick events are generated by this event source.      ", "tags": "", "loc": "Allegro5.html#al_get_joystick_event_source"},
     {"title": "Allegro5.al_is_keyboard_installed", "text": "    ", "tags": "", "loc": "Allegro5.html#al_is_keyboard_installed"},
     {"title": "Allegro5.al_install_keyboard", "text": "      <code>True</code> if successful. If a driver was already installed, nothing happens and <code>True</code> is returned. ", "tags": "", "loc": "Allegro5.html#al_install_keyboard"},
     {"title": "Allegro5.al_uninstall_keyboard", "text": " This will automatically unregister the keyboard event source with any event queues.  <p>This function is automatically called when Allegro is shut down.     ", "tags": "", "loc": "Allegro5.html#al_uninstall_keyboard"},
     {"title": "Allegro5.al_set_keyboard_leds", "text": " Set <code>leds</code> to a combination of the keyboard modifier flags to enable the corresponding LED indicators (<code>ALLEGRO_KEYMOD_NUMLOCK</code>, <code>ALLEGRO_KEYMOD_CAPSLOCK</code> and <code>ALLEGRO_KEYMOD_SCROLLLOCK</code> are supported) or to <code>-1</code> to return to default behavior.    <code>False</code> if the current keyboard driver cannot set LED. ", "tags": "", "loc": "Allegro5.html#al_set_keyboard_leds"},
     {"title": "Allegro5.al_keycode_to_name", "text": "    ", "tags": "", "loc": "Allegro5.html#al_keycode_to_name"},
     {"title": "Allegro5.al_get_keyboard_state", "text": "      ", "tags": "", "loc": "Allegro5.html#al_get_keyboard_state"},
     {"title": "Allegro5.al_clear_keyboard_state", "text": " The given display is regarded as the one which had the keyboard focus when the event occurred. In case display is <code>Nil</code> no event is emitted. For most keyboard drivers Allegro maintains its own state of the keyboard, which might get out of sync with the real one. This function is intended to remedy such situation by resetting Allegro's keyboard state to a known default (no key pressed). This is particularly useful in response to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_DISPLAY_SWITCH_OUT\">ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</a> events.  <p><b>Unstable API:</b> This is a new feature and the exact semantics are still being decided upon.      ", "tags": "", "loc": "Allegro5.html#al_clear_keyboard_state"},
     {"title": "Allegro5.al_key_down", "text": "     ", "tags": "", "loc": "Allegro5.html#al_key_down"},
     {"title": "Allegro5.al_get_keyboard_event_source", "text": " All keyboard events are generated by this event source.      <code>Nil</code> if the keyboard subsystem was not installed. ", "tags": "", "loc": "Allegro5.html#al_get_keyboard_event_source"},
     {"title": "Allegro5.al_is_mouse_installed", "text": "    ", "tags": "", "loc": "Allegro5.html#al_is_mouse_installed"},
     {"title": "Allegro5.al_install_mouse", "text": "      <code>True</code> if successful. If a driver was already installed, nothing happens and <code>True</code> is returned. ", "tags": "", "loc": "Allegro5.html#al_install_mouse"},
     {"title": "Allegro5.al_uninstall_mouse", "text": " This will automatically unregister the mouse event source with any event queues.  <p>This function is automatically called when Allegro is shut down.     ", "tags": "", "loc": "Allegro5.html#al_uninstall_mouse"},
     {"title": "Allegro5.al_get_mouse_num_buttons", "text": " The first button is 1.     ", "tags": "", "loc": "Allegro5.html#al_get_mouse_num_buttons"},
     {"title": "Allegro5.al_get_mouse_num_axes", "text": " The first axis is 0.     ", "tags": "", "loc": "Allegro5.html#al_get_mouse_num_axes"},
     {"title": "Allegro5.al_set_mouse_xy", "text": " The mouse movement resulting from a successful move will generate an <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_MOUSE_WARPED\">ALLEGRO_EVENT_MOUSE_WARPED</a> event.      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_mouse_xy"},
     {"title": "Allegro5.al_set_mouse_z", "text": "      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_mouse_z"},
     {"title": "Allegro5.al_set_mouse_w", "text": "      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_mouse_w"},
     {"title": "Allegro5.al_set_mouse_axis", "text": "  <p>The axis number must not be 0 or 1, which are the X and Y axes. Use <code>al_set_mouse_xy</code> for that.       <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_mouse_axis"},
     {"title": "Allegro5.al_get_mouse_state", "text": "  <p>Example: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   State: ALLEGRO_MOUSE_STATE; <span class=\"pascal_keyword\">BEGIN</span>   al_get_mouse_state (State);   <span class=\"pascal_keyword\">IF</span> (State.buttons <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">1</span>) &lt;&gt; <span class=\"pascal_numeric\">0</span> <span class=\"pascal_keyword\">THEN</span>   <span class=\"pascal_comment\">{ Primary (e.g. left) mouse button is held. }</span>     WriteLn (Format (<span class=\"pascal_string\">'Mouse position: (%d, %d)'</span>, [State.x, State.y]));   <span class=\"pascal_keyword\">IF</span> (State.buttons <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">2</span>) &lt;&gt; <span class=\"pascal_numeric\">0</span> <span class=\"pascal_keyword\">THEN</span>   <span class=\"pascal_comment\">{ Secondary (e.g. right) mouse button is held. }</span>     ;   <span class=\"pascal_keyword\">IF</span> (State.buttons <span class=\"pascal_keyword\">AND</span> <span class=\"pascal_numeric\">4</span>) &lt;&gt; <span class=\"pascal_numeric\">0</span> <span class=\"pascal_keyword\">THEN</span>   <span class=\"pascal_comment\">{ Tertiary (e.g. middle) mouse button is held. }</span>     ; <span class=\"pascal_keyword\">END</span>.</pre>  <p>       ", "tags": "", "loc": "Allegro5.html#al_get_mouse_state"},
     {"title": "Allegro5.al_mouse_button_down", "text": " Unlike most things, the first mouse button is numbered 1.       ", "tags": "", "loc": "Allegro5.html#al_mouse_button_down"},
     {"title": "Allegro5.al_get_mouse_state_axis", "text": " The axes are numbered from 0, in this order: x-axis, y-axis, z-axis, w-axis.       ", "tags": "", "loc": "Allegro5.html#al_get_mouse_state_axis"},
     {"title": "Allegro5.al_get_mouse_cursor_position", "text": " You should not normally use this function, as the information is not useful except for special scenarios as moving a window.    <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_get_mouse_cursor_position"},
     {"title": "Allegro5.al_grab_mouse", "text": " The mouse cursor can only be confined to one display at a time.  <p>Do not assume that the cursor will remain confined until you call <a class=\"normal\" href=\"Allegro5.html#al_ungrab_mouse\">al_ungrab_mouse</a>. It may lose the confined status at any time for other reasons.  <p><b>Note</b>  <p>not yet implemented on Mac OS X.     <code>True</code> if successful, otherwise returns <code>False</code>. ", "tags": "", "loc": "Allegro5.html#al_grab_mouse"},
     {"title": "Allegro5.al_ungrab_mouse", "text": "  <p><b>Note</b>  <p>not yet implemented on Mac OS X.     ", "tags": "", "loc": "Allegro5.html#al_ungrab_mouse"},
     {"title": "Allegro5.al_set_mouse_wheel_precision", "text": " This precision manifests itself as a multiplier on the <code>dz</code> and <code>dw</code> fields in mouse events. It also affects the <code>z</code> and <code>w</code> fields of events and <a class=\"normal\" href=\"Allegro5.ALLEGRO_MOUSE_STATE.html\">ALLEGRO_MOUSE_STATE</a>, but not in a simple way if you alter the precision often, so it is suggested to reset those axes to <code>0</code> when you change precision. Setting this to a high value allows you to detect small changes in those two axes for some high precision mice. A flexible way of using this precision is to set it to a high value (120 is likely sufficient for most, if not all, mice) and use a floating point <code>dz</code> and <code>dw</code> like so: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Event: ALLEGRO_EVENT;   dz := DOUBLE; <span class=\"pascal_keyword\">BEGIN</span>   al_set_mouse_wheel_precision (<span class=\"pascal_numeric\">120</span>);   al_wait_for_event (EventQueue, Event);   <span class=\"pascal_keyword\">IF</span> Event.ftype = ALLEGRO_EVENT_MOUSE_AXES <span class=\"pascal_keyword\">THEN</span>   <span class=\"pascal_keyword\">BEGIN</span>     dz := Event.mouse.dz / al_get_mouse_wheel_precision ();   <span class=\"pascal_comment\">{ Use dz in some way... }</span>   <span class=\"pascal_keyword\">END</span>; <span class=\"pascal_keyword\">END</span>.</pre>  <p> Precision is set to 1 by default. It is impossible to set it to a lower precision than that.     ", "tags": "", "loc": "Allegro5.html#al_set_mouse_wheel_precision"},
     {"title": "Allegro5.al_get_mouse_wheel_precision", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_mouse_wheel_precision"},
     {"title": "Allegro5.al_get_mouse_event_source", "text": " All mouse events are generated by this event source.      <code>Nil</code> if the mouse subsystem was not installed. ", "tags": "", "loc": "Allegro5.html#al_get_mouse_event_source"},
     {"title": "Allegro5.al_set_memory_interface", "text": " The context arguments may be used for debugging. The new functions should be thread safe.      ", "tags": "", "loc": "Allegro5.html#al_set_memory_interface"},
     {"title": "Allegro5.al_restore_memory_interface", "text": "     ", "tags": "", "loc": "Allegro5.html#al_restore_memory_interface"},
     {"title": "Allegro5.al_malloc", "text": " The implementation may be overriden.  <p>Memory allocated with this function <b>must</b> be released by <a class=\"normal\" href=\"Allegro5.html#al_free\">al_free</a>.         ", "tags": "", "loc": "Allegro5.html#al_malloc"},
     {"title": "Allegro5.al_free", "text": " The implementation may be overriden.  <p>Additionally, on Windows, a memory block allocated by one DLL must be freed from the same DLL. In the few places where an Allegro function returns a pointer that <b>must</b> be freed, you must use <code>al_free</code> for portability to Windows.      ", "tags": "", "loc": "Allegro5.html#al_free"},
     {"title": "Allegro5.al_realloc", "text": " The value of <code>p</code> may change during this operation. The contents of the memory pointed to by <code>p</code> (if any) will be copied to the new location, but may be truncated if the newly allocated memory block is smaller in size. If a larger block is allocated, only the used memory is initialized, extra memory will not be zeroed out. The implementation may be overriden.      ", "tags": "", "loc": "Allegro5.html#al_realloc"},
     {"title": "Allegro5.al_calloc", "text": " The implementation may be overriden.         ", "tags": "", "loc": "Allegro5.html#al_calloc"},
     {"title": "Allegro5.al_malloc_with_context", "text": "  <p>Generally you should use the <a class=\"normal\" href=\"Allegro5.html#al_malloc\">al_malloc</a> function.    ", "tags": "", "loc": "Allegro5.html#al_malloc_with_context"},
     {"title": "Allegro5.al_free_with_context", "text": "  <p>Generally you should use the <a class=\"normal\" href=\"Allegro5.html#al_free\">al_free</a> function.    ", "tags": "", "loc": "Allegro5.html#al_free_with_context"},
     {"title": "Allegro5.al_realloc_with_context", "text": "  <p>Generally you should use the <a class=\"normal\" href=\"Allegro5.html#al_realloc\">al_realloc</a> function.    ", "tags": "", "loc": "Allegro5.html#al_realloc_with_context"},
     {"title": "Allegro5.al_calloc_with_context", "text": "  <p>Generally you should use the <a class=\"normal\" href=\"Allegro5.html#al_calloc\">al_calloc</a> function.    ", "tags": "", "loc": "Allegro5.html#al_calloc_with_context"},
     {"title": "Allegro5.al_get_num_video_adapters", "text": " Each video card attached to the computer counts as one or more adapters. An adapter is thus really a video port that can have a monitor connected to it.  <p>On Windows, use <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> to switch between Direct3D and OpenGL backends, which will often have different adapters available.     ", "tags": "", "loc": "Allegro5.html#al_get_num_video_adapters"},
     {"title": "Allegro5.al_get_monitor_info", "text": " adapter is a number from 0 to <code>al_get_num_video_adapters - 1</code>.  <p>On Windows, use <a class=\"normal\" href=\"Allegro5.html#al_set_new_display_flags\">al_set_new_display_flags</a> to switch between Direct3D and OpenGL backends, which will often have different adapters available.      <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_get_monitor_info"},
     {"title": "Allegro5.al_create_mouse_cursor", "text": "       x_focus Describes the bit of the cursor that will represent the actual mouse position. y_focus Describes the bit of the cursor that will represent the actual mouse position. A pointer to the cursor on success, or <code>Nil</code> on failure. x_focus Describes the bit of the cursor that will represent the actual mouse position. y_focus Describes the bit of the cursor that will represent the actual mouse position.", "tags": "", "loc": "Allegro5.html#al_create_mouse_cursor"},
     {"title": "Allegro5.al_destroy_mouse_cursor", "text": "  <p>It has no effect if <code>cursor</code> is <code>Nil</code>.     ", "tags": "", "loc": "Allegro5.html#al_destroy_mouse_cursor"},
     {"title": "Allegro5.al_set_mouse_cursor", "text": "  <p>If the cursor is currently 'shown' (as opposed to 'hidden') the change is immediately visible.       <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_mouse_cursor"},
     {"title": "Allegro5.al_set_system_mouse_cursor", "text": " If the cursor is currently 'shown' (as opposed to 'hidden') the change is immediately visible.  <p>If the cursor doesn't exist on the current platform another cursor will be silently be substituted.        <code>True</code> on success, <code>False</code> on failure. ", "tags": "", "loc": "Allegro5.html#al_set_system_mouse_cursor"},
     {"title": "Allegro5.al_show_mouse_cursor", "text": "     <code>True</code> if a mouse cursor is shown as a result of the call (or one already was visible), <code>False</code> otherwise. ", "tags": "", "loc": "Allegro5.html#al_show_mouse_cursor"},
     {"title": "Allegro5.al_hide_mouse_cursor", "text": " This has no effect on what the current mouse cursor looks like; it just makes it disappear.     <code>True</code> on success (or if the cursor already was hidden), <code>False</code> otherwise. ", "tags": "", "loc": "Allegro5.html#al_hide_mouse_cursor"},
     {"title": "Allegro5.al_set_render_state", "text": "  <p>This function does nothing if the target bitmap is a memory bitmap.    state Possible render states which can be one of <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_RENDER_STATE\">ALLEGRO_RENDER_STATE</a>. value Value to apply to the given <code>state</code>.  state Possible render states which can be one of <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_RENDER_STATE\">ALLEGRO_RENDER_STATE</a>. value Value to apply to the given <code>state</code>.", "tags": "", "loc": "Allegro5.html#al_set_render_state"},
     {"title": "Allegro5.al_use_transform", "text": " Every drawing operation after this call will be transformed using this transformation. Call this function with an identity transformation to return to the default behaviour.  <p>This function does nothing if there is no target bitmap.  <p>The parameter is passed by reference as an optimization to avoid the overhead of stack copying. The reference will not be stored in the Allegro library so it is safe to pass references to local variables. </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">PROCEDURE</span> SetupMyTransformation; <span class=\"pascal_keyword\">VAR</span>   Transform: ALLEGRO_TRANSFORM; <span class=\"pascal_keyword\">BEGIN</span>   al_translate_transform (Transform, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">10</span>);   al_use_transform (Transform) <span class=\"pascal_keyword\">END</span>;</pre>  <p>     trans Transformation to use.  trans Transformation to use.", "tags": "", "loc": "Allegro5.html#al_use_transform"},
     {"title": "Allegro5.al_use_projection_transform", "text": " Every drawing operation after this call will be transformed using this transformation. To return default behavior, call this function with an orthographic transform like so: </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   Trans: ALLEGRO_TRANSFORM; <span class=\"pascal_keyword\">BEGIN</span>   al_identity_transform (Trans);   al_orthographic_transform (     Trans,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, -<span class=\"pascal_float\">1.0</span>,     al_get_bitmap_width (Bitmap), al_get_bitmap_height (Bitmap), <span class=\"pascal_float\">1.0</span>   );   al_set_target_bitmap (Bitmap);   al_use_projection_transform (trans) <span class=\"pascal_keyword\">END</span>;</pre>  <p> The orthographic transformation above is the default projection transform.  <p>This function does nothing if there is no target bitmap. This function also does nothing if the bitmap is a memory bitmap (i.e. memory bitmaps always use an orthographic transform like the snippet above). Note that the projection transform will be reset to default if a video bitmap is converted to a memory bitmap. Additionally, if the bitmap in question is the backbuffer, it's projection transformation will be reset to default if it is resized. Lastly, when you draw a memory bitmap to a video bitmap with a custom projection transform, this transformation will be ignored (i.e. it'll be as if the projection transform of the target bitmap was temporarily reset to default).  <p>The parameter is passed by reference as an optimization to avoid the overhead of stack copying. The reference will not be stored in the Allegro library so it is safe to pass references to local variables.     ", "tags": "", "loc": "Allegro5.html#al_use_projection_transform"},
     {"title": "Allegro5.al_copy_transform", "text": "    src Source transformation. dest Destination transformation.  src Source transformation. dest Destination transformation.", "tags": "", "loc": "Allegro5.html#al_copy_transform"},
     {"title": "Allegro5.al_identity_transform", "text": " This is the default transformation. Use <a class=\"normal\" href=\"Allegro5.html#al_use_transform\">al_use_transform</a> on an identity transformation to return to the default. </p>  <pre class=\"longcode\"> <span class=\"pascal_keyword\">VAR</span>   T: ALLEGRO_TRANSFORM; <span class=\"pascal_keyword\">BEGIN</span>   al_identity_transform (T);   al_use_transform (T) <span class=\"pascal_keyword\">END</span>;</pre>  <p>      trans Transformation to alter.  trans Transformation to alter.", "tags": "", "loc": "Allegro5.html#al_identity_transform"},
     {"title": "Allegro5.al_build_transform", "text": " This call is equivalent to calling the transformations in this order: make identity, rotate, scale, translate. This method is faster, however, than actually calling those functions.  <p><b>Note</b>  <p>this function was previously documented to be equivalent to a different (and more useful) order of operations: identity, scale, rotate, translate.            trans Transformation to alter. x Horizontal translation. y Vertical translation. sx Horizontal scale. sy Vertical scale. theta Rotation angle in radians:  trans Transformation to alter. x Horizontal translation. y Vertical translation. sx Horizontal scale. sy Vertical scale. theta Rotation angle in radians:", "tags": "", "loc": "Allegro5.html#al_build_transform"},
     {"title": "Allegro5.al_build_camera_transform", "text": " This involves translation and a rotation. The function expects three coordinate triplets: The camera's position, the position the camera is looking at and an up vector. The up vector does not need to be of unit length and also does not need to be perpendicular to the view direction - it can usually just be the world up direction (most commonly 0/1/0).  <p>For example: </p>  <pre class=\"longcode\"> al_build_camera_transform (     T,     <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>,     <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">5</span>,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span> );</pre>  <p> This create a transformation for a camera standing at 1/1/1 and looking towards 5/5/5.  <p><b>Note:</b> If the position and look parameters are identical, or if the up direction is parallel to the view direction, an identity matrix is created.  <p>Another example which will simply re-create the identity matrix: </p>  <pre class=\"longcode\"> al_build_camera_transform (     T,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>,  <span class=\"pascal_numeric\">0</span>,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">0</span>, -<span class=\"pascal_numeric\">1</span>,     <span class=\"pascal_numeric\">0</span>, <span class=\"pascal_numeric\">1</span>,  <span class=\"pascal_numeric\">0</span> );</pre>  <p> An example where the up vector will cause the camera to lean (roll) by 45 degrees: </p>  <pre class=\"longcode\"> al_build_camera_transform (     T,     <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>,     <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">5</span>,     <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">0</span> );</pre>  <p>         ", "tags": "", "loc": "Allegro5.html#al_build_camera_transform"},
     {"title": "Allegro5.al_translate_transform", "text": "        trans Transformation to alter. x Horizontal translation. y Vertical translation.  trans Transformation to alter. x Horizontal translation. y Vertical translation.", "tags": "", "loc": "Allegro5.html#al_translate_transform"},
     {"title": "Allegro5.al_translate_transform_3d", "text": "     ", "tags": "", "loc": "Allegro5.html#al_translate_transform_3d"},
     {"title": "Allegro5.al_rotate_transform", "text": "       trans Transformation to alter. theta Rotation angle in radians.  trans Transformation to alter. theta Rotation angle in radians.", "tags": "", "loc": "Allegro5.html#al_rotate_transform"},
     {"title": "Allegro5.al_rotate_transform_3d", "text": "  <p>Note: The vector is assumed to be of unit length (otherwise it will also incur a scale).    ", "tags": "", "loc": "Allegro5.html#al_rotate_transform_3d"},
     {"title": "Allegro5.al_scale_transform", "text": "        trans Transformation to alter. sx Horizontal scale. sy Vertical scale.  trans Transformation to alter. sx Horizontal scale. sy Vertical scale.", "tags": "", "loc": "Allegro5.html#al_scale_transform"},
     {"title": "Allegro5.al_scale_transform_3D", "text": "     ", "tags": "", "loc": "Allegro5.html#al_scale_transform_3D"},
     {"title": "Allegro5.al_transform_coordinates", "text": "       trans Transformation to use. x Horizontal coordinate. y Vertical coordinate.  trans Transformation to use. x Horizontal coordinate. y Vertical coordinate.", "tags": "", "loc": "Allegro5.html#al_transform_coordinates"},
     {"title": "Allegro5.al_transform_coordinates_3d", "text": "  <p>Note: If you are using a projection transform you most likely will want to use al_transform_coordinates_3d_projective instead.        trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate.  trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate.", "tags": "", "loc": "Allegro5.html#al_transform_coordinates_3d"},
     {"title": "Allegro5.al_transform_coordinates_4d", "text": "          trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate. w W coordinate.  trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate. w W coordinate.", "tags": "", "loc": "Allegro5.html#al_transform_coordinates_4d"},
     {"title": "Allegro5.al_transform_coordinates_3d_projective", "text": " This is the same as using <a class=\"normal\" href=\"Allegro5.html#al_transform_coordinates_4d\">al_transform_coordinates_4d</a> with the <code>w</code> coordinate set to 1, then dividing <code>x</code>, <code>y</code>, <code>z</code> by the resulting <code>w</code>. This will provide the same coordinates Allegro will draw to when a projective transform is in effect as set with al_use_projection_transform.          trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate.  trans Transformation to use. x Horizontal coordinate. y Vertical coordinate. z Depth coordinate.", "tags": "", "loc": "Allegro5.html#al_transform_coordinates_3d_projective"},
     {"title": "Allegro5.al_compose_transform", "text": " </p>  <pre class=\"longcode\"> trans := trans other</pre>  <p> Note that the order of matrix multiplications is important. The effect of applying the combined transform will be as if first applying <code>trans</code> and then applying <code>other</code> and not the other way around.       trans ransformation to alter. other ransformation used to transform trans.  trans ransformation to alter. other ransformation used to transform trans.", "tags": "", "loc": "Allegro5.html#al_compose_transform"},
     {"title": "Allegro5.al_get_current_transform", "text": " If there is no target bitmap, this function returns <code>Nil</code>.     A pointer to the current transformation. ", "tags": "", "loc": "Allegro5.html#al_get_current_transform"},
     {"title": "Allegro5.al_get_current_inverse_transform", "text": " If there is no target bitmap, this function returns <code>Nil</code>.  <p>This is similar to calling <code><a class=\"normal\" href=\"Allegro5.html#al_invert_transform\">al_invert_transform</a> (<a class=\"normal\" href=\"Allegro5.html#al_get_current_transform\">al_get_current_transform</a>&circ;)</code> but the result of this function is cached.  <p><b>Note</b>  <p>Allegro's transformation inversion functions work correctly only with 2D transformations.    ", "tags": "", "loc": "Allegro5.html#al_get_current_inverse_transform"},
     {"title": "Allegro5.al_get_current_projection_transform", "text": " If there is no target bitmap, this function returns <code>Nil</code>.     ", "tags": "", "loc": "Allegro5.html#al_get_current_projection_transform"},
     {"title": "Allegro5.al_invert_transform", "text": " If the transformation is nearly singular (close to not having an inverse) then the returned transformation may be invalid. Use <a class=\"normal\" href=\"Allegro5.html#al_check_inverse\">al_check_inverse</a> to ascertain if the transformation has an inverse before inverting it if you are in doubt.  <p><b>Note</b>  <p>Allegro's transformation inversion functions work correctly only with 2D transformations.    trans Transformation to invert.  trans Transformation to invert.", "tags": "", "loc": "Allegro5.html#al_invert_transform"},
     {"title": "Allegro5.al_check_inverse", "text": " Tolerance should be a small value between 0 and 1, with 1e-7 being sufficient for most applications.  <p>In this function tolerance specifies how close the determinant can be to 0 (if the determinant is 0, the transformation has no inverse). Thus the smaller the tolerance you specify, the &quot;worse&quot; transformations will pass this test. Using a tolerance of 1e-7 will catch errors greater than 1/1000's of a pixel, but let smaller errors pass. That means that if you transformed a point by a transformation and then transformed it again by the inverse transformation that passed this check, the resultant point should less than 1/1000's of a pixel away from the original point.  <p>Note that this check is superfluous most of the time if you never touched the transformation matrix values yourself. The only thing that would cause the transformation to not have an inverse is if you applied a 0 (or very small) scale to the transformation or you have a really large translation. As long as the scale is comfortably above 0, the transformation will be invertible.  <p><b>Note</b>  <p>Allegro's transformation inversion functions work correctly only with 2D transformations.      trans Transformation to check. tol Tolerance. <code>True</code> if the transformation is invertible, <code>False</code> otherwise. trans Transformation to check. tol Tolerance.", "tags": "", "loc": "Allegro5.html#al_check_inverse"},
     {"title": "Allegro5.al_orthographic_transform", "text": "  <p>near/far is the z range, coordinates outside of that range will get clipped. Normally -1/1 is fine because all 2D graphics will have a z coordinate of 0. However if you for example do <code>al_draw_rectangle (0, 0, 100, 100)</code> and rotate around the x axis (&quot;towards the screen&quot;) make sure your z range allows values from -100 to 100 or the rotated rectangle will get clipped.  <p>Also, if you are using a depth buffer the z range decides the depth resolution. For example if you have a 16 bit depth buffer there are only 65536 discrete depth values. So if your near/far is set to -1000000/1000000 most of the z positions would not result in separate depth values which could lead to artifacts.      ", "tags": "", "loc": "Allegro5.html#al_orthographic_transform"},
     {"title": "Allegro5.al_perspective_transform", "text": " If everything is at a z-position of -near it will look the same as with an orthographic transformation.  <p>To use a specific horizontal field of view you can use the relation: </p>  <pre class=\"preformatted\">! tan(hfov / 2) = (right - left) / 2 / near !</pre>  <p>      ", "tags": "", "loc": "Allegro5.html#al_perspective_transform"},
     {"title": "Allegro5.al_horizontal_shear_transform", "text": "  trans Transformation to alter. theta Rotation angle in radians.  trans Transformation to alter. theta Rotation angle in radians.", "tags": "", "loc": "Allegro5.html#al_horizontal_shear_transform"},
     {"title": "Allegro5.al_vertical_shear_transform", "text": "  trans Transformation to alter. theta Rotation angle in radians.  trans Transformation to alter. theta Rotation angle in radians.", "tags": "", "loc": "Allegro5.html#al_vertical_shear_transform"},
     {"title": "Allegro5.al_create_shader", "text": "  <p>The platform argument is one of the <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_SHADER_PLATFORM\">ALLEGRO_SHADER_PLATFORM</a> values, and specifies the type of shader object to create, and which language is used to program the shader.  <p>The shader platform must be compatible with the type of display that you will use the shader with. For example, you cannot create and use a HLSL shader on an OpenGL display, nor a GLSL shader on a Direct3D display.  <p>The <code>ALLEGRO_SHADER_AUTO</code> value automatically chooses the appropriate platform for the display currently targeted by the calling thread; there must be such a display. It will create a GLSL shader for an OpenGL display, and a HLSL shader for a Direct3D display.          A pointer to the shader object on success. Otherwise, returns <code>Nil</code>. ", "tags": "", "loc": "Allegro5.html#al_create_shader"},
     {"title": "Allegro5.al_attach_shader_source", "text": " Passing <code>Nil</code> deletes the underlying (OpenGL or DirectX) shader. See also <a class=\"normal\" href=\"Allegro5.html#al_attach_shader_source_file\">al_attach_shader_source_file</a> if you prefer to obtain your shader source from an external file.  <p>If you do not use <code>ALLEGRO_PROGRAMMABLE_PIPELINE</code> Allegro's graphics functions will not use any shader specific functions themselves. In case of a system with no fixed function pipeline (like OpenGL ES 2 or OpenGL 3 or 4) this means Allegro's drawing functions cannot be used.  <p>TODO: Is <code>ALLEGRO_PROGRAMMABLE_PIPELINE</code> set automatically in this case?  <p>When <code>ALLEGRO_PROGRAMMABLE_PIPELINE</code> is used the following shader uniforms are provided by Allegro and can be accessed in your shaders: </p>  <dl class=\"paragraph_spacing\">   <dt><b>al_projview_matrix</b></dt>   <dd><p>matrix for Allegro's orthographic projection multiplied by the al_use_transform matrix. The type is <code>mat4</code> in GLSL, and <code>float4x4</code> in HLSL.</p></dd>   <dt><b>al_use_tex</b></dt>   <dd><p>whether or not to use the bound texture. The type is <code>bool</code> in both GLSL and HLSL.</p></dd>   <dt><b>al_tex</b></dt>   <dd><p>the texture if one is bound. The type is <code>sampler2D</code> in GLSL and <code>texture</code> in HLSL.</p></dd>   <dt><b>al_use_tex_matrix</b></dt>   <dd><p>whether or not to use a texture matrix (used by the primitives addon). The type is <code>bool</code> in both GLSL and HLSL.</p></dd>   <dt><b>al_tex_matrix</b></dt>   <dd><p>the texture matrix (used by the primitives addon). Your shader should multiply the texture coordinates by this matrix. The type is <code>mat4</code> in GLSL, and <code>float4x4</code> in HLSL.</p></dd> </dl>  <p>  <p>For GLSL shaders the vertex attributes are passed using the following variables: </p>  <dl class=\"paragraph_spacing\">   <dt><b>al_pos</b></dt>   <dd><p>vertex position attribute. Type is <code>vec4</code>.</p></dd>   <dt><b>al_texcoord</b></dt>   <dd><p>vertex texture coordinate attribute. Type is <code>vec2</code>.</p></dd>   <dt><b>al_color</b></dt>   <dd><p>vertex color attribute. Type is <code>vec4</code>.</p></dd> </dl>  <p>  <p>For HLSL shaders the vertex attributes are passed using the following semantics: </p>  <dl class=\"paragraph_spacing\">   <dt><b>POSITION0</b></dt>   <dd><p>vertex position attribute. Type is <code>float4</code>.</p></dd>   <dt><b>TEXCOORD0</b></dt>   <dd><p>vertex texture coordinate attribute. Type is <code>float2</code>.</p></dd>   <dt><b>TEXCOORD1</b></dt>   <dd><p>vertex color attribute. Type is <code>float4</code>.</p></dd> </dl>  <p>  <p>Also, each shader variable has a corresponding macro name that can be used when defining the shaders using string literals. Don't use these macros with the other shader functions as that will lead to undefined behavior. </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX</code> for &quot;al_projview_matrix&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_POS</code> for &quot;al_pos&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_COLOR</code> for &quot;al_color&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_TEXCOORD</code> for &quot;al_texcoord&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_USE_TEX</code> for &quot;al_use_tex&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_TEX</code> for &quot;al_tex&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_USE_TEX_MATRIX</code> for &quot;al_use_tex_matrix&quot;</p></li>   <li><p><code>ALLEGRO_SHADER_VAR_TEX_MATRIX for</code> &quot;al_tex_matrix&quot;</p></li> </ul>  <p> Examine the output of <a class=\"normal\" href=\"Allegro5.html#al_get_default_shader_source\">al_get_default_shader_source</a> for an example of how to use the above uniforms and attributes.        <code>True</code> on success and <code>False</code> on error, in which case the error log is updated. The error log can be retrieved with <a class=\"normal\" href=\"Allegro5.html#al_get_shader_log\">al_get_shader_log</a>. ", "tags": "", "loc": "Allegro5.html#al_attach_shader_source"},
     {"title": "Allegro5.al_attach_shader_source_file", "text": "       <code>True</code> on success and <code>False</code> on error, in which case the error log is updated. The error log can be retrieved with <a class=\"normal\" href=\"Allegro5.html#al_get_shader_log\">al_get_shader_log</a>. ", "tags": "", "loc": "Allegro5.html#al_attach_shader_source_file"},
     {"title": "Allegro5.al_build_shader", "text": " It should be called after successfully attaching the pixel and/or vertex shaders with <a class=\"normal\" href=\"Allegro5.html#al_attach_shader_source\">al_attach_shader_source</a> or <a class=\"normal\" href=\"Allegro5.html#al_attach_shader_source_file\">al_attach_shader_source_file</a>.  <p><b>Note</b>  <p>If you are using the <code>ALLEGRO_PROGRAMMABLE_PIPELINE</code> flag, then you must specify both a pixel and a vertex shader sources for anything to be rendered.      <code>True</code> on success and <code>False</code> on error, in which case the error log is updated. The error log can be retrieved with <a class=\"normal\" href=\"Allegro5.html#al_get_shader_log\">al_get_shader_log</a>. ", "tags": "", "loc": "Allegro5.html#al_build_shader"},
     {"title": "Allegro5.al_get_shader_log", "text": " The log is updated by certain functions, such as <a class=\"normal\" href=\"Allegro5.html#al_attach_shader_source\">al_attach_shader_source</a> or <a class=\"normal\" href=\"Allegro5.html#al_build_shader\">al_build_shader</a> when there is an error.  <p>This function never returns <code>Nil</code>.       ", "tags": "", "loc": "Allegro5.html#al_get_shader_log"},
     {"title": "Allegro5.al_get_shader_platform", "text": "     ", "tags": "", "loc": "Allegro5.html#al_get_shader_platform"},
     {"title": "Allegro5.al_use_shader", "text": " Pass <code>Nil</code> to stop using any shader on the current target bitmap.            <code>True</code> on success. Otherwise returns <code>False</code>, e.g. because the shader is incompatible with the target bitmap. ", "tags": "", "loc": "Allegro5.html#al_use_shader"},
     {"title": "Allegro5.al_destroy_shader", "text": " Any bitmaps which currently use the shader will implicitly stop using the shader. In multi-threaded programs, be careful that no such bitmaps are being accessed by other threads at the time.  <p>As a convenience, if the target bitmap of the calling thread is using the shader then the shader is implicitly unused before being destroyed.  <p>This function does nothing if the shader argument is <code>Nil</code>.     ", "tags": "", "loc": "Allegro5.html#al_destroy_shader"},
     {"title": "Allegro5.al_set_shader_sampler", "text": " The given bitmap must be a video bitmap.  <p>Different samplers should use different units. The bitmap passed to Allegro's drawing functions uses the 0th unit, so if you're planning on using the <code>al_tex</code> variable in your pixel shader as well as another sampler, set the other sampler to use a unit different from 0. With the primitives addon, it is possible to free up the 0th unit by passing <code>Nil</code> as the texture argument to the relevant drawing functions. In this case, you may set a sampler to use the 0th unit and thus not use <code>al_tex</code> (the <code>al_use_tex</code> variable will be set to <code>false</code>).     <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_sampler"},
     {"title": "Allegro5.al_set_shader_matrix", "text": "     <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_matrix"},
     {"title": "Allegro5.al_set_shader_int", "text": "     <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_int"},
     {"title": "Allegro5.al_set_shader_float", "text": "     <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_float"},
     {"title": "Allegro5.al_set_shader_int_vector", "text": " The <code>num_components</code> parameter can take one of the values 1, 2, 3 or 4. If it is 1 then an array of <code>num_elems</code> integer elements is added. Otherwise each added array element is assumed to be a vector with 2, 3 or 4 components in it.  <p>For example, if you have a GLSL uniform declared as uniform <code>ivec3 flowers[4]</code> or an HLSL uniform declared as uniform <code>int3 flowers[4]</code>, then you'd use this function from your code like so: </p>  <pre class=\"longcode\">@(longcode! <span class=\"pascal_keyword\">VAR</span>   Flowers: <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..3] <span class=\"pascal_keyword\">OF</span> <span class=\"pascal_keyword\">ARRAY</span> [<span class=\"pascal_numeric\">0</span>..2] <span class=\"pascal_keyword\">OF</span> AL_INT =   (    (<span class=\"pascal_numeric\">1</span>, <span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">3</span>),    (<span class=\"pascal_numeric\">4</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">6</span>),    (<span class=\"pascal_numeric\">7</span>, <span class=\"pascal_numeric\">8</span>, <span class=\"pascal_numeric\">9</span>),    (<span class=\"pascal_numeric\">2</span>, <span class=\"pascal_numeric\">5</span>, <span class=\"pascal_numeric\">7</span>)   ); <span class=\"pascal_keyword\">BEGIN</span>   <span class=\"pascal_numeric\"></span>...   al_set_shader_int_vector (<span class=\"pascal_string\">'flowers'</span>, <span class=\"pascal_numeric\">3</span>, (Flowers[<span class=\"pascal_numeric\">0</span>][<span class=\"pascal_numeric\">0</span>]), <span class=\"pascal_numeric\">4</span>)</pre>  <p>; ... END; !)      <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_int_vector"},
     {"title": "Allegro5.al_set_shader_float_vector", "text": "      ", "tags": "", "loc": "Allegro5.html#al_set_shader_float_vector"},
     {"title": "Allegro5.al_set_shader_bool", "text": "     <code>True</code> on success. Otherwise returns <code>False</code>, e.g. if the uniform by that name does not exist in the shader. ", "tags": "", "loc": "Allegro5.html#al_set_shader_bool"},
     {"title": "Allegro5.al_get_default_shader_source", "text": " The <code>ALLEGRO_SHADER_AUTO</code> value means GLSL is used if OpenGL is being used otherwise HLSL. <code>ALLEGRO_SHADER_AUTO</code> requires that there is a current display set on the calling thread. This function can return <code>Nil</code> if Allegro was built without support for shaders of the selected platform.     ", "tags": "", "loc": "Allegro5.html#al_get_default_shader_source"},
     {"title": "Allegro5.al_init", "text": " In particular, do not call it inside a shared library unless you know what you're doing. In those cases, it is better to call <a class=\"normal\" href=\"Allegro5.html#al_install_system\">al_install_system</a> either with a <code>Nil</code> <code>atexit_ptr</code>, or with a pointer to <code>atexit</code> provided by the user of this shared library.    ", "tags": "", "loc": "Allegro5.html#al_init"},
     {"title": "Allegro5.al_install_system", "text": " No other Allegro functions can be called before this (with one or two exceptions).      version Should always be set to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_VERSION_INT\">ALLEGRO_VERSION_INT</a>. atexit_ptr If non-<code>Nil</code>, and if hasn't been done already, <code>al_uninstall_system</code> will be registered as an atexit function. <code>atexit</code> is a function provided by standard C runtime library. It allows similar functionality than <code>FINALIZATION</code> section in Pascal. <code>True</code> if Allegro was successfully initialized by this function call (or already was initialized previously), <code>False</code> if Allegro cannot be used. version Should always be set to <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_VERSION_INT\">ALLEGRO_VERSION_INT</a>. atexit_ptr If non-<code>Nil</code>, and if hasn't been done already, <code>al_uninstall_system</code> will be registered as an atexit function. <code>atexit</code> is a function provided by standard C runtime library. It allows similar functionality than <code>FINALIZATION</code> section in Pascal.", "tags": "", "loc": "Allegro5.html#al_install_system"},
     {"title": "Allegro5.al_uninstall_system", "text": "  <p>In most cases you don't need to call this, because it's called by <code>allegro5.pas</code> <code>FINALIZATION</code> section.      ", "tags": "", "loc": "Allegro5.html#al_uninstall_system"},
     {"title": "Allegro5.al_is_system_installed", "text": "    ", "tags": "", "loc": "Allegro5.html#al_is_system_installed"},
     {"title": "Allegro5.al_get_system_config", "text": " The returned configuration should not be destroyed with <a class=\"normal\" href=\"Allegro5.html#al_destroy_config\">al_destroy_config</a>. This is mainly used for configuring Allegro and its addons. You may populate this configuration before Allegro is installed to control things like the logging levels and other features.  <p>Allegro will try to populate this configuration by loading a configuration file from a few different locations, in this order: </p>  <ul class=\"paragraph_spacing\">   <li><p>Unix only: /etc/allegro5rc</p></li>   <li><p>Unix only: $HOME/allegro5rc</p></li>   <li><p>Unix only: $HOME/.allegro5rc</p></li>   <li><p>allegro5.cfg next to the executable</p></li> </ul>  <p> If multiple copies are found, then they are merged using <a class=\"normal\" href=\"Allegro5.html#al_merge_config_into\">al_merge_config_into</a>.  <p>The contents of this file are documented inside a prototypical allegro5.cfg that you can find in the <code>resources</code> directory of the distributions of Allegro.pas.  <p>Note that Allegro will not look into that file unless you make a copy of it and place it next to your executable!    ", "tags": "", "loc": "Allegro5.html#al_get_system_config"},
     {"title": "Allegro5.al_inhibit_screensaver", "text": "    <code>True</code> if the state was set successfully, otherwise <code>False</code>. ", "tags": "", "loc": "Allegro5.html#al_inhibit_screensaver"},
     {"title": "Allegro5.ALLEGRO_USECS_TO_SECS", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_USECS_TO_SECS"},
     {"title": "Allegro5.ALLEGRO_MSECS_TO_SECS", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_MSECS_TO_SECS"},
     {"title": "Allegro5.ALLEGRO_BPS_TO_SECS", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_BPS_TO_SECS"},
     {"title": "Allegro5.ALLEGRO_BPM_TO_SECS", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_BPM_TO_SECS"},
     {"title": "Allegro5.al_create_timer", "text": " The new timer is initially stopped.  <p>Usage note: typical granularity is on the order of microseconds, but with some drivers might only be milliseconds.      speed_secs Seconds per &quot;tick&quot;. Must be positive. If successful, a pointer to a new timer object, otherwise <code>Nil</code>. speed_secs Seconds per &quot;tick&quot;. Must be positive.", "tags": "", "loc": "Allegro5.html#al_create_timer"},
     {"title": "Allegro5.al_destroy_timer", "text": " If the timer is started, it will automatically be stopped before uninstallation. It will also automatically unregister the timer with any event queues.  <p>Does nothing if passed the <code>Nil</code> pointer.     ", "tags": "", "loc": "Allegro5.html#al_destroy_timer"},
     {"title": "Allegro5.al_start_timer", "text": " From then, the timer's counter will increment at a constant rate, and it will begin generating events. Starting a timer that is already started does nothing. Starting a timer that was stopped will reset the timer's counter, effectively restarting the timer from the beginning.       ", "tags": "", "loc": "Allegro5.html#al_start_timer"},
     {"title": "Allegro5.al_stop_timer", "text": " The timer's counter will stop incrementing and it will stop generating events. Stopping a timer that is already stopped does nothing.       ", "tags": "", "loc": "Allegro5.html#al_stop_timer"},
     {"title": "Allegro5.al_resume_timer", "text": " From then, the timer's counter will increment at a constant rate, and it will begin generating events. Resuming a timer that is already started does nothing. Resuming a stopped timer will not reset the timer's counter (unlike <a class=\"normal\" href=\"Allegro5.html#al_start_timer\">al_start_timer</a>).       ", "tags": "", "loc": "Allegro5.html#al_resume_timer"},
     {"title": "Allegro5.al_get_timer_started", "text": "    ", "tags": "", "loc": "Allegro5.html#al_get_timer_started"},
     {"title": "Allegro5.al_get_timer_speed", "text": " (The same value passed to <a class=\"normal\" href=\"Allegro5.html#al_create_timer\">al_create_timer</a> or <a class=\"normal\" href=\"Allegro5.html#al_set_timer_speed\">al_set_timer_speed</a>.)     ", "tags": "", "loc": "Allegro5.html#al_get_timer_speed"},
     {"title": "Allegro5.al_set_timer_speed", "text": " the rate at which its counter will be incremented when it is started. This can be done when the timer is started or stopped. If the timer is currently running, it is made to look as though the speed change occurred precisely at the last tick.    speed_secs Exactly the same meaning as with <a class=\"normal\" href=\"Allegro5.html#al_create_timer\">al_create_timer</a>.  speed_secs Exactly the same meaning as with <a class=\"normal\" href=\"Allegro5.html#al_create_timer\">al_create_timer</a>.", "tags": "", "loc": "Allegro5.html#al_set_timer_speed"},
     {"title": "Allegro5.al_get_timer_count", "text": " The timer can be started or stopped.     ", "tags": "", "loc": "Allegro5.html#al_get_timer_count"},
     {"title": "Allegro5.al_set_timer_count", "text": " The timer can be started or stopped. The <code>count</code> value may be positive or negative, but will always be incremented by +1 at each tick.      ", "tags": "", "loc": "Allegro5.html#al_set_timer_count"},
     {"title": "Allegro5.al_add_timer_count", "text": " This is similar to writing: </p>  <pre class=\"longcode\"> al_set_timer_count (Timer, al_get_timer_count (Timer) + diff);</pre>  <p> except that the addition is performed atomically, so no ticks will be lost.     ", "tags": "", "loc": "Allegro5.html#al_add_timer_count"},
     {"title": "Allegro5.al_get_timer_event_source", "text": " Timers will generate events of type <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_EVENT_TIMER\">ALLEGRO_EVENT_TIMER</a>.    ", "tags": "", "loc": "Allegro5.html#al_get_timer_event_source"},
     {"title": "Allegro5.al_store_state", "text": " The flags parameter can take any bit-combination of these flags: </p>  <ul class=\"paragraph_spacing\">   <li><p><code>ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS</code> - new_display_format, new_display_refresh_rate, new_display_flags</p></li>   <li><p><code>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</code> - new_bitmap_format, new_bitmap_flags</p></li>   <li><p><code>ALLEGRO_STATE_DISPLAY</code> - current_display</p></li>   <li><p><code>ALLEGRO_STATE_TARGET_BITMAP</code> - target_bitmap</p></li>   <li><p><code>ALLEGRO_STATE_BLENDER</code> - blender</p></li>   <li><p><code>ALLEGRO_STATE_TRANSFORM</code> - current_transformation</p></li>   <li><p><code>ALLEGRO_STATE_PROJECTION_TRANSFORM</code> - current_projection_transformation</p></li>   <li><p><code>ALLEGRO_STATE_NEW_FILE_INTERFACE</code> - new_file_interface</p></li>   <li><p><code>ALLEGRO_STATE_BITMAP</code> - same as <code>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</code> and <code>ALLEGRO_STATE_TARGET_BITMAP</code></p></li>   <li><p><code>ALLEGRO_STATE_ALL</code> - all of the above</p></li> </ul>  <p>     ", "tags": "", "loc": "Allegro5.html#al_store_state"},
     {"title": "Allegro5.al_restore_state", "text": "     ", "tags": "", "loc": "Allegro5.html#al_restore_state"},
     {"title": "Allegro5._al_load_bitmap_f", "text": "    ", "tags": "", "loc": "Allegro5.html#_al_load_bitmap_f"},
     {"title": "Allegro5._al_load_bitmap_flags_f", "text": "    ", "tags": "", "loc": "Allegro5.html#_al_load_bitmap_flags_f"},
     {"title": "Allegro5._al_set_memory_interface_", "text": "    ", "tags": "", "loc": "Allegro5.html#_al_set_memory_interface_"},
     {"title": "Allegro5._al_check_inverse", "text": "    ", "tags": "", "loc": "Allegro5.html#_al_check_inverse"},
     {"title": "Allegro5.ALLEGRO_USER_MAIN", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_USER_MAIN"},
     {"title": "Allegro5.ALLEGRO_PIXEL_FORMAT", "text": " Each pixel format specifies the exact size and bit layout of a pixel in memory. Components are specified from high bits to low bits, so for example a fully opaque red pixel in <code>ARGB_8888</code> format is <code>$FFFF0000</code>.  <p><b>Note</b>  <p>The pixel format is independent of endianness. That is, in the above example you can always get the red component with <code>(pixel AND $00ff0000) SHR 16</code>. But you can not rely on this code: <code>(pixel + 2)&circ;</code> it will return the red component on little endian systems, but the green component on big endian systems.  <p>Also note that Allegro's naming is different from OpenGL naming here, where a format of <code>GL_RGBA8</code> merely defines the component order and the exact layout including endianness treatment is specified separately. Usually <code>GL_RGBA8</code> will correspond to <code>ALLEGRO_PIXEL_ABGR_8888</code> though on little endian systems, so care must be taken (note the reversal of RGBA &lt;-&gt; ABGR).  <p>The only exception to this <code>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</code> which will always have the components as 4 bytes corresponding to red, green, blue and alpha, in this order, independent of the endianness.  <p>Some of the pixel formats represent compressed bitmap formats. Compressed bitmaps take up less space in the GPU memory than bitmaps with regular (uncompressed) pixel formats. This smaller footprint means that you can load more resources into GPU memory, and they will be drawn somewhat faster. The compression is lossy, however, so it is not appropriate for all graphical styles: it tends to work best for images with smooth color gradations. It is possible to compress bitmaps at runtime by passing the appropriate bitmap format in <a class=\"normal\" href=\"Allegro5.html#al_set_new_bitmap_format\">al_set_new_bitmap_format</a> and then creating, loading, cloning or converting a non-compressed bitmap. This, however, is not recommended as the compression quality differs between different GPU drivers. It is recommended to compress these bitmaps ahead of time using external tools and then load them compressed.  <p>Unlike regular pixel formats, compressed pixel formats are not laid out in memory one pixel row at a time. Instead, the bitmap is subdivided into rectangular blocks of pixels that are then laid out in block rows. This means that regular locking functions cannot use compressed pixel formats as the destination format. Instead, you can use the blocked versions of the bitmap locking functions which do support these formats.  <p>It is not recommended to use compressed bitmaps as target bitmaps, as that operation cannot be hardware accelerated. Due to proprietary algorithms used, it is typically impossible to create compressed memory bitmaps.    ALLEGRO_PIXEL_FORMAT_ANY Let the driver choose a format.  This is the default format at program start.  ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA Let the driver choose a format without alpha.   ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA Let the driver choose a format with alpha.   ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA Let the driver choose a 15 bit format without alpha.   ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA Let the driver choose a 16 bit format without alpha.   ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA Let the driver choose a 16 bit format with alpha.   ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA Let the driver choose a 24 bit format without alpha.   ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA Let the driver choose a 32 bit format without alpha.   ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA Let the driver choose a 32 bit format with alpha.   ALLEGRO_PIXEL_FORMAT_ARGB_8888 32 bit   ALLEGRO_PIXEL_FORMAT_RGBA_8888 32 bit   ALLEGRO_PIXEL_FORMAT_ARGB_4444 24 bit   ALLEGRO_PIXEL_FORMAT_RGB_888 24 bit   ALLEGRO_PIXEL_FORMAT_RGB_565 16 bit   ALLEGRO_PIXEL_FORMAT_RGB_555 15 bit   ALLEGRO_PIXEL_FORMAT_RGBA_5551 16 bit   ALLEGRO_PIXEL_FORMAT_ARGB_1555 16 bit   ALLEGRO_PIXEL_FORMAT_ABGR_8888 32 bit   ALLEGRO_PIXEL_FORMAT_XBGR_8888 32 bit   ALLEGRO_PIXEL_FORMAT_BGR_888 24 bit   ALLEGRO_PIXEL_FORMAT_BGR_565 16 bit   ALLEGRO_PIXEL_FORMAT_BGR_555 15 bit   ALLEGRO_PIXEL_FORMAT_RGBX_8888 32 bit   ALLEGRO_PIXEL_FORMAT_XRGB_8888 32 bit   ALLEGRO_PIXEL_FORMAT_ABGR_F32 128 bit   ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE Like the version without _LE, but the component order is guaranteed to be red, green, blue, alpha.  This only makes a difference on big endian systems, on little endian it is just an alias.  ALLEGRO_PIXEL_FORMAT_RGBA_4444 16bit   ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 A single 8-bit channel.  A pixel value maps onto the red channel when displayed, but it is undefined how it maps onto green, blue and alpha channels. When drawing to bitmaps of this format, only the red channel is taken into account. Allegro may have to use fallback methods to render to bitmaps of this format. This pixel format is mainly intended for storing the color indices of an indexed (paletted) image, usually in conjunction with a pixel shader that maps indices to RGBA values.  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 Compressed using the DXT1 compression algorithm.  Each 4x4 pixel block is encoded in 64 bytes, resulting in 6-8x compression ratio. Only a single bit of alpha per pixel is supported.  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 Compressed using the DXT3 compression algorithm.  Each 4x4 pixel block is encoded in 128 bytes, resulting in 4x compression ratio. This format supports sharp alpha transitions.  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 Compressed using the DXT5 compression algorithm.  Each 4x4 pixel block is encoded in 128 bytes, resulting in 4x compression ratio. This format supports smooth alpha transitions.  ALLEGRO_NUM_PIXEL_FORMATS   ", "tags": "", "loc": "Allegro5.html#ALLEGRO_PIXEL_FORMAT"},
     {"title": "Allegro5.ALLEGRO_BITMAPptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_BITMAPptr"},
     {"title": "Allegro5.ALLEGRO_FILEptr", "text": " This could be a real file on disk or a virtual file. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_FILEptr"},
     {"title": "Allegro5.ALLEGRO_FILE_INTERFACEptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_FILE_INTERFACEptr"},
     {"title": "Allegro5.ALLEGRO_IIO_LOADER_FUNCTION", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IIO_LOADER_FUNCTION"},
     {"title": "Allegro5.ALLEGRO_IIO_FS_LOADER_FUNCTION", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IIO_FS_LOADER_FUNCTION"},
     {"title": "Allegro5.ALLEGRO_IIO_SAVER_FUNCTION", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IIO_SAVER_FUNCTION"},
     {"title": "Allegro5.ALLEGRO_IIO_FS_SAVER_FUNCTION", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IIO_FS_SAVER_FUNCTION"},
     {"title": "Allegro5.ALLEGRO_IIO_IDENTIFIER_FUNCTION", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_IIO_IDENTIFIER_FUNCTION"},
     {"title": "Allegro5.ALLEGRO_LOCK", "text": "  ALLEGRO_LOCK_READWRITE    ALLEGRO_LOCK_READONLY    ALLEGRO_LOCK_WRITEONLY   ", "tags": "", "loc": "Allegro5.html#ALLEGRO_LOCK"},
     {"title": "Allegro5.ALLEGRO_LOCKED_REGIONptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_LOCKED_REGIONptr"},
     {"title": "Allegro5.ALLEGRO_EVENT_TYPE", "text": "    ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_TYPE"},
     {"title": "Allegro5.ALLEGRO_DISPLAYptr", "text": "  <p>An opaque type representing an open display or window. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_DISPLAYptr"},
     {"title": "Allegro5.ALLEGRO_JOYSTICKptr", "text": "  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_JOYSTICKptr"},
     {"title": "Allegro5.ALLEGRO_KEYBOARDptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_KEYBOARDptr"},
     {"title": "Allegro5.ALLEGRO_MOUSEptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_MOUSEptr"},
     {"title": "Allegro5.ALLEGRO_TIMERptr", "text": " This is an abstract data type representing a timer object. ", "tags": "", "loc": "Allegro5.html#ALLEGRO_TIMERptr"},
     {"title": "Allegro5.ALLEGRO_EVENT_SOURCEptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_SOURCEptr"},
     {"title": "Allegro5.ALLEGRO_USER_EVENT_DESCRIPTORptr", "text": "  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_USER_EVENT_DESCRIPTORptr"},
     {"title": "Allegro5.ALLEGRO_USER_EVENTptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_USER_EVENTptr"},
     {"title": "Allegro5.ALLEGRO_EVENTptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENTptr"},
     {"title": "Allegro5.ALLEGRO_EVENT_DTOR_PROC", "text": "     ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_DTOR_PROC"},
     {"title": "Allegro5.ALLEGRO_EVENT_QUEUEptr", "text": " Events are stored in the order they are generated. Access is in a strictly FIFO (first-in-first-out) order.   ", "tags": "", "loc": "Allegro5.html#ALLEGRO_EVENT_QUEUEptr"},
     {"title": "Allegro5.ALLEGRO_CONFIGptr", "text": "  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_CONFIGptr"},
     {"title": "Allegro5.ALLEGRO_DISPLAY_MODEptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_DISPLAY_MODEptr"},
     {"title": "Allegro5.ALLEGRO_JOYFLAGS", "text": "   ALLEGRO_JOYFLAG_DIGITAL The stick provides digital input.   ALLEGRO_JOYFLAG_ANALOGUE The stick provides analogue input.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_JOYFLAGS"},
     {"title": "Allegro5.ALLEGRO_MOUSE_CURSORptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_MOUSE_CURSORptr"},
     {"title": "Allegro5.ALLEGRO_SYSTEM_MOUSE_CURSOR", "text": "   ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE    ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT    ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW    ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY    ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION    ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT    ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE    ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE    ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS    ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION    ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK    ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT    ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE    ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS   ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SYSTEM_MOUSE_CURSOR"},
     {"title": "Allegro5.ALLEGRO_RENDER_STATE", "text": "  ALLEGRO_ALPHA_TEST If this is set to 1, the values of <code>ALLEGRO_ALPHA_FUNCTION</code> and <code>ALLEGRO_ALPHA_TEST_VALUE</code> define a comparison function which is performed for each pixel.  Only if it evaluates to true the pixel is written. Otherwise no subsequent processing (like depth test or blending) is performed.  ALLEGRO_WRITE_MASK This determines how the framebuffer and depthbuffer are updated whenever a pixel is written (in case alpha and/or depth testing is enabled: after all such enabled tests succeed).  Depth values are only written if <code>ALLEGRO_DEPTH_TEST</code> is 1, in addition to the write mask flag being set.  ALLEGRO_DEPTH_TEST If this is set to 1, compare the depth value of any newly written pixels with the depth value already in the buffer, according to <code>ALLEGRO_DEPTH_FUNCTION</code>.  Allegro primitives with no explicit z coordinate will write a value of 0 into the depth buffer.  ALLEGRO_DEPTH_FUNCTION One of the next values: <code>ALLEGRO_RENDER_NEVER</code> <code>ALLEGRO_RENDER_ALWAYS</code> <code>ALLEGRO_RENDER_LESS</code> <code>ALLEGRO_RENDER_EQUAL</code> <code>ALLEGRO_RENDER_LESS_EQUAL</code> <code>ALLEGRO_RENDER_GREATER</code> <code>ALLEGRO_RENDER_NOT_EQUAL</code> <code>ALLEGRO_RENDER_GREATER_EQUAL</code>, only used when <code>ALLEGRO_DEPTH_TEST</code> is 1.   ALLEGRO_ALPHA_FUNCTION One of the next values: <code>ALLEGRO_RENDER_NEVER</code> <code>ALLEGRO_RENDER_ALWAYS</code> <code>ALLEGRO_RENDER_LESS</code> <code>ALLEGRO_RENDER_EQUAL</code> <code>ALLEGRO_RENDER_LESS_EQUAL</code> <code>ALLEGRO_RENDER_GREATER</code> <code>ALLEGRO_RENDER_NOT_EQUAL</code> <code>ALLEGRO_RENDER_GREATER_EQUAL</code>, only used when <code>ALLEGRO_ALPHA_TEST</code> is 1.   ALLEGRO_ALPHA_TEST_VALUE Only used when <code>ALLEGRO_ALPHA_TEST</code> is 1.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_RENDER_STATE"},
     {"title": "Allegro5.ALLEGRO_TRANSFORMptr", "text": " ", "tags": "", "loc": "Allegro5.html#ALLEGRO_TRANSFORMptr"},
     {"title": "Allegro5.ALLEGRO_SHADERptr", "text": "  <p>An <code>ALLEGRO_SHADER</code> is a program that runs on the GPU. It combines both a vertex and a pixel shader. (In OpenGL terms, an <code>ALLEGRO_SHADER</code> is actually a program which has one or more shaders attached. This can be confusing.)  <p>The source code for the underlying vertex or pixel shader can be provided either as GLSL or HLSL, depending on the value of <a class=\"normal\" href=\"Allegro5.html#ALLEGRO_SHADER_PLATFORM\">ALLEGRO_SHADER_PLATFORM</a> used when creating it.  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SHADERptr"},
     {"title": "Allegro5.ALLEGRO_SHADER_TYPE", "text": "  ALLEGRO_VERTEX_SHADER A vertex shader is executed for each vertex it is used with.  The program will output exactly one vertex at a time.  <p>When Allegro's graphics are being used then in addition to all vertices of primitives from the primitives addon, each drawn bitmap also consists of four vertices.  ALLEGRO_PIXEL_SHADER A pixel shader is executed for each pixel it is used with.  The program will output exactly one pixel at a time - either in the backbuffer or in the current target bitmap.  <p>With Allegro's builtin graphics this means the shader is for example called for each destination pixel of the output of an <a class=\"normal\" href=\"Allegro5.html#al_draw_bitmap\">al_draw_bitmap</a> call.  <p>A more accurate term for pixel shader would be fragment shader since one final pixel in the target bitmap is not necessarily composed of only a single output but of multiple fragments (for example when multi-sampling is being used). ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SHADER_TYPE"},
     {"title": "Allegro5.ALLEGRO_SHADER_PLATFORM", "text": "  ALLEGRO_SHADER_AUTO    ALLEGRO_SHADER_GLSL OpenGL Shading Language.   ALLEGRO_SHADER_HLSL High Level Shader Language (for Direct3D).  ", "tags": "", "loc": "Allegro5.html#ALLEGRO_SHADER_PLATFORM"}
]};
